<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何利用RAG+LLM技术拯救自己的期末考试</title>
      <link href="/2025/01/08/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8RAG+LLM%E6%8A%80%E6%9C%AF%E6%8B%AF%E6%95%91%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
      <url>/2025/01/08/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8RAG+LLM%E6%8A%80%E6%9C%AF%E6%8B%AF%E6%95%91%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主最近正在为了微机和计算机操作系统的期末考试而忙碌中(毕竟还在读大学😭)，操作系统的复习资料和复习重点都给的很全，所以我复习起来还是相当顺利的。但是，诶🤓！，接下来我要重点“表扬”一下微机这门课的各种神奇操作</p><ol><li>给了题库，但是没有答案，更没解析</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108213235278.png" alt="image-20250108213235278"></p><p>PS:这个题库有好几万字😅<br>2.   抽象的书籍</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/%E5%BE%AE%E6%9C%BA%E4%B9%A6%E5%B0%81%E9%9D%A2.jpeg" alt="微型计算机技术及应用 的图像结果"></p><p>这本书谁看谁知道，这么抽象的书，能学明白的是这个👍，而且知识点还多，想要短时间内复习完，那是相当困难的。</p><p>所以我找到了一种利用<strong>RAG技术+LLM</strong>（大语言模型，比较有名的是ChatGPT）搭建出问答系统，让这个问答系统来帮我做题和复习的方法。</p><blockquote><p>仅以此文章记录这一流程，文中用到的技术可能会过时，这个可以寻找一下平替，但是解决问题的思路是不会过时的</p></blockquote><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>我向来喜欢先展示出效果，因为这样读者才能快速地知道，接下来的一系列操作所耗费的精力是否值得😋</p><p>这个是问题目怎么做</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108222106777.png" alt="image-20250108222106777"></p><p>如果你直接找一个LLM问某个领域很高深且具体的题目的话，会有非常高的概率出现<strong>大模型幻觉</strong>，所谓的<strong>幻觉</strong>，其实就是“说胡话”，LLM看似回答了你很多内容，但是当你仔细看看可能会发现，他就是在胡扯，完全不清楚他回答的根据是什么。这样会很浪费时间，因为我们需要额外花费精力去辨认LLM回答的内容是否是“假情报”,这样还不如自己做呢。</p><p>因此使用RAG技术能很有效减少大模型幻觉，比如看看LLM回答时候引用的知识库，能确保他的回答是有根据的。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108223341417.png" alt="image-20250108223341417"></p><p>还有个我比较常用的是问一些很刁钻的知识点，其实也就是相当于让LLM帮我读书，然后整理好告诉我，毕竟这书写的，真的是抽象的我看不下去…..😐</p><p>比如下面这个问题,如果你没学过微机相关的内容，看不懂也没关系，理解我想表达的思想就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8253-5工作于方式2，用BCD码计数，用1号计数器，只读高8位则控制字为：\_\_\_\_\_。</span><br><span class="line"> A．01010101B</span><br><span class="line"> B．01000101B</span><br><span class="line"> C．01100101B </span><br><span class="line"> D．01100100B</span><br></pre></td></tr></table></figure><p>先看看claude 3.5 Sonnet(跟GPT4o一个梯队的)的回答</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108225543896.png" alt="image-20250108225543896"></p><p>我直接说结论，这道题应该选 C，8253的方式选择控制字如下图，所以要达成题目的要求，对应控制字的二进制位应该设置为 <code>01100101B</code>。但是你看到claude 3.5 Sonnet的回答了吗？他给出的解释中，对应控制字位的功能完全就是瞎编的，而且还编的相当严谨，让你觉得有理有据，但其实这是<strong>大模型幻觉</strong>🤣</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108225752342.png" alt="image-20250108225752342"></p><p>然后我们再对比一下用了RAG技术的回答，就能看到回答了正确的答案C，因为要是问8253的某个特定的控制字，只有查阅了书上的内容才知道的。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108230552640.png" alt="image-20250108230552640"></p><h2 id="什么是RAG？"><a href="#什么是RAG？" class="headerlink" title="什么是RAG？"></a>什么是RAG？</h2><p>在上文多次提到了 RAG，那么 RAG 到底是什么？</p><p>RAG的全称是Retrieval <strong>Augmented</strong> Generation，也就是<strong>检索，增强，生成</strong>，由 数据提取——embedding（向量化）——创建索引——检索——自动排序（Rerank）——LLM归纳生成，以上部分组成。所以RAG就是通过检索获取相关的知识并将其融入Prompt，让大模型能够参考相应的知识从而给出合理回答。</p><p>下图是实现的原理，如果实在看不懂这个图也没啥关系。因为我们是使用者，直接找实现了RAG技术的项目来用就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/principle.jpg" alt="实现原理"></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>基于LLM+RAG的问答系统有很多，我这里推荐用开源的<a href="https://maxkb.cn/index.html">MaxKB - 基于大模型和 RAG 的知识库问答系统 - 官网</a>,官方文档：<a href="https://maxkb.cn/docs/quick_start/">快速入门 - MaxKB 文档</a>关于安装方法和使用其实已经写的很详细了，但如果只是基本的使用的话，官方文档的很多东西是用不到的或者是小白根本就玩不明白的，这个看你自己的能力和需求</p><h3 id="通过docker安装"><a href="#通过docker安装" class="headerlink" title="通过docker安装"></a>通过docker安装</h3><p>论最简单的安装方法，我只推荐用docker，因为最无脑</p><p>Windows的话，下载docker desktop<a href="https://www.docker.com/get-started/">Get Started | Docker</a>，下载后长这样，有图形化界面，用起来很简单</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108233843594.png" alt="image-20250108233843594"></p><blockquote><p>Linux要自己下载docker engine这些，太麻烦了，自强吧🤗</p></blockquote><p>然后确保自己的dockers desktop开启了，打开命令行输入这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=maxkb --restart=always -p 8080:8080 -v C:/maxkb:/var/lib/postgresql/data -v C:/python-packages:/opt/maxkb/app/sandbox/python-packages cr2.fit2cloud.com/1panel/maxkb</span><br></pre></td></tr></table></figure><p>我简单解释一下 <code>-p</code>表示指定端口，<code>8080:8080</code>表示端口映射，前面的是本机的访问端口，可以改，后面的是容器的端口，不要动，比如可以这样改 <code>-p 4444:8080</code>，然后通过 <code>4444</code>端口访问就行，<code>-v</code>指定数据保存的位置，也是同理，<code>:</code>前面的路径你可以改，<code>:</code>后面的路径不要动，</p><p>拉取成功后在docker desktop的Containers选项卡会显示,先检查一下有没有在运行，这个容器很大，所以运行后需要一定的时间进行初始化，然后点击Port就能在浏览器打开了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108234752754.png" alt="image-20250108234752754"></p><p>有登录界面就说明安装成功了，默认的账户和密码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://目标服务器 IP 地址:8080</span><br><span class="line"></span><br><span class="line">默认登录信息</span><br><span class="line">用户名：admin</span><br><span class="line">默认密码：MaxKB@123..</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108235103601.png" alt="image-20250108235103601"></p><h3 id="创建知识库"><a href="#创建知识库" class="headerlink" title="创建知识库"></a>创建知识库</h3><p>查看上面的原理可以知道，做知识库首先要先将文档向量化，默认使用的那个向量模型的嵌入速度太慢了，所以我们需要配置<strong>向量模型</strong>，我这里推荐用百度的千帆大模型，因为新注册的用户可以白嫖一些额度，用来应付期末考试的复习就够用了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108235540846.png" alt="image-20250108235540846"></p><p>api key和secret key怎么配置，可以自己去<a href="https://console.bce.baidu.com/qianfan/overview">百度智能云控制台</a>研究</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250108235740080.png" alt="image-20250108235740080"></p><p>然后还要配置语言模型，这里我也推荐用千帆大模型，因为api key和secret key跟向量模型的配置是一样的，当然用其他模型也行，这个自行查看对应的官方文档</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250109000045379.png" alt="image-20250109000045379"></p><p>创建一个知识库，然后上传文档</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250109000432078.png" alt="image-20250109000432078"></p><p>悬停到 <code>文件状态</code>会显示向量化的进度</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250109000512901.png" alt="image-20250109000512901"></p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>在应用那一栏创建应用，AI模型就是你配置的语言模型，知识库关联上面创建好的，自定义提示词建议别去碰，用默认的就好(血的教训)</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/RAG%E5%92%8CLLM%E6%8A%80%E6%9C%AF%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E5%BA%93/image-20250109000644897.png" alt="image-20250109000644897"></p><p>到此搭建就完成了，完全能够满足个人的使用</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://luxiangdong.com/2023/09/25/ragone/">大模型主流应用RAG的介绍——从架构到技术细节 | 我的学习笔记 | 土猛的员外</a></p><p><a href="https://www.docker.com/get-started/">开始使用 | Docker — Get Started | Docker</a></p><p><a href="https://maxkb.cn/docs/system_arch/">系统架构 - MaxKB 文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Vscode中使用netdb.h的getaddrinfo和addrinfo会报错的方法</title>
      <link href="/2024/12/03/C%E8%AF%AD%E8%A8%80/%E8%A7%A3%E5%86%B3Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8netdb.h%E7%9A%84getaddrinfo%E5%92%8Caddrinfo%E4%BC%9A%E6%8A%A5%E9%94%99%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/12/03/C%E8%AF%AD%E8%A8%80/%E8%A7%A3%E5%86%B3Vscode%E4%B8%AD%E4%BD%BF%E7%94%A8netdb.h%E7%9A%84getaddrinfo%E5%92%8Caddrinfo%E4%BC%9A%E6%8A%A5%E9%94%99%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主最近在学习c语言的socket编程，在调用netdb.h中的相关函数和变量api时，遇到了一些问题，因此本文将给出解决的方法，并且进行分析</p><h3 id="博主的配置"><a href="#博主的配置" class="headerlink" title="博主的配置"></a>博主的配置</h3><ul><li>wsl：ubuntu20.04发行版</li><li>vscode：1.95.3</li></ul><h2 id="问题的描述"><a href="#问题的描述" class="headerlink" title="问题的描述"></a>问题的描述</h2><p>使用addrinfo(属于netdb.h头文件)结构体变量的时候，vscode会报错</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241203234701125.png" alt="image-20241203234701125"></p><p>调用getaddrinfo()函数的时候，vscode也索引不到这个函数的定义</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241203234754622.png" alt="image-20241203234754622"></p><p>其实这个函数就位于netdb.h中，可以看到，这一部分是灰色的</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241203234937711.png" alt="image-20241203234937711"></p><p>但是使用gcc编译的时候，是能够正确编译链接的，说明程序是没有语法和语义错误的</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241203235130147.png" alt="image-20241203235130147"></p><p>因此我推测是vscode的c语言扩展的intellisense智能提示的问题，就是下图的这个扩展(不得不说微软的东西，屁事就是多😅)</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241203235234757.png" alt="image-20241203235234757"></p><h2 id="解决的方法"><a href="#解决的方法" class="headerlink" title="解决的方法"></a>解决的方法</h2><p>我查阅了很多资料，最终也是找到了解决的方法。我的风格就是先告诉你怎么做，解决你的燃眉之急，至于为什么要这么做，之后我再娓娓道来😋所以如果你对原因分析不感兴趣的话，后面的分析和总结你可以跳过不看❤️</p><h3 id="方法1：在插件设置中更改c-standard"><a href="#方法1：在插件设置中更改c-standard" class="headerlink" title="方法1：在插件设置中更改c standard"></a>方法1：在插件设置中更改c standard</h3><p>进入c&#x2F;c++插件的设置中，找到这一栏</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241204000236168.png" alt="image-20241204000236168"></p><p>然后将c99修改成gnu的c语言标准，我试过了，修改成GNU的任意一个都行</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241204000400301.png" alt="image-20241204000400301"></p><p>可以看到已经不会报错了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241204000455795.png" alt="image-20241204000455795"></p><h3 id="方法2：定义-GNU-SOURCE"><a href="#方法2：定义-GNU-SOURCE" class="headerlink" title="方法2：定义_GNU_SOURCE"></a>方法2：定义_GNU_SOURCE</h3><p>在代码文件中添加<code>_GNU_SOURCE</code>的宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br></pre></td></tr></table></figure><p>或者在.vscode中新建一个<code>c_cpp_properties.json</code>,然后在这个文件中定义这个宏，我个人推荐这个做法，因为修改配置文件能作用于整个工程,上面那种只能作用于单个文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_GNU_SOURCE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分析与总结"><a href="#分析与总结" class="headerlink" title="分析与总结"></a>分析与总结</h2><p>现在来分析一下为什么会报错，造成报错的原因是什么。然后总结一下</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>先说结论：<strong>netdb.h属于GNU 特有扩展</strong></p><p>标准的c语言本身并不直接包含对<code>netdb.h</code>的支持，所以你现在明白为啥上面打开netdb.h文件后发现有一部分是灰色(说明没有被包含)了吧。</p><p>那么GNU的c标准，和普通的c标准有啥区别呢？简单来说就是在普通的c标准上加了很多扩展功能,<code>netdb.h</code>就是GNU特有扩展功能的一部分，所以解决方案2就是这么来的，将c standard切换成GNU C就行了</p><table><thead><tr><th>特性</th><th>C99</th><th>GNU99</th></tr></thead><tbody><tr><td>标准</td><td>遵循 ISO C99 标准</td><td>C99 加上 GNU 扩展</td></tr><tr><td>扩展</td><td>不支持 GNU 特有扩展</td><td>支持 GNU 特有扩展</td></tr><tr><td>兼容性</td><td>严格遵循标准</td><td>允许使用非标准的 GNU 特性</td></tr><tr><td>默认设置</td><td>不定义 <code>__STRICT_ANSI__</code></td><td>定义<code>__STRICT_ANSI__</code> 以禁用所有 GNU 扩展</td></tr></tbody></table><blockquote><ul><li><strong><a href="https://zh.wikipedia.org/wiki/C99">C99</a></strong>: 这是 1999 年发布的 C 语言标准（ISO&#x2F;IEC 9899:1999）。它引入了许多新特性，如布尔类型、复合字面量、可变参数宏等。使用 <code>c99</code> 编译器选项时，代码将遵循这一标准。</li><li><strong>GNU99</strong>: 这是基于 C99 标准的 GNU 扩展版本。使用 <code>gnu99</code> 选项时，除了 C99 的特性外，还可以使用 GNU 编译器（GCC）提供的一些额外功能和扩展。这些扩展可能包括额外的语法和库函数，这些在标准 C 中并不被支持。</li></ul></blockquote><p>那么<code>_GNU_SOURCE</code>这个宏又是哪来的？干嘛的？</p><blockquote><p>   _GNU_SOURCE是一个宏定义，用于启用GNU C库（glibc）中的许多非标准扩展和功能。定义这个宏后，程序可以访问一些POSIX标准中未包含的传统功能以及GNU&#x2F;Linux特有的扩展接口。</p></blockquote><p>所以当你定义了这个宏的时候，那么下面标准的所有功能都会启用：ISO C89、ISO C99、POSIX.1、POSIX.2、BSD、SVID、X&#x2F;Open、LFS 以及 GNU 扩展。在 POSIX.1 与 BSD 发生冲突的情况下，POSIX 定义优先。</p><p>这就是解决方案1的由来，定义了这个宏之后就能启用GNU的扩展</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有一种说法是写程序都是三分在写，七分在调，我觉得说的很对，写程序最重要的反而不是编写代码，而是如何去调试代码，解决报错，总结问题，我在解决本文的问题的时候，上网查阅了很多资料，以前我并不会去在意C语言不同标准带来的差异，因为写的程序能跑就行😋。但是当你解决问题的时候会发现，你可能会接触到别人写的资料中不胜其烦的枯燥术语，难以理解的代码逻辑，当你经历这个过程后，你的code能力就提升了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/Undefined443/p/18468828">C99 和 GNU99 的区别 - Undefined443 - 博客园</a></li><li><a href="https://stackoverflow.com/questions/5582211/what-does-define-gnu-source-imply">c - What does “#define _GNU_SOURCE” imply? - Stack Overflow</a></li><li><a href="https://www.cnblogs.com/raozhiyi/articles/9509600.html">关于__GNU_SOURCE 这个宏 - 颠覆者 - 博客园</a></li><li><a href="https://github.com/microsoft/vscode-cpptools/issues/2025">Incomplete type error on struct addrinfo · Issue #2025 · microsoft&#x2F;vscode-cpptools</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VMware配置Ubuntu20.04静态ip的方法</title>
      <link href="/2024/11/30/Linux/Ubuntu20.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/30/Linux/Ubuntu20.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适用于在Windows下配置VMware虚拟机NAT模式下的静态ip，如果你与我使用的软件版本不一样的话，那么配置操作仅供参考</p><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>ubuntu20.04</li><li>VMware17</li></ul><h2 id="Just-do-it"><a href="#Just-do-it" class="headerlink" title="Just do it!"></a>Just do it!</h2><p>打开window的网络适配器更改的选项，不同window版本的入口会有所差异，所以请自行寻找。VMware会创建多个虚拟网卡VMnet，命名如下图所示，每台电脑的虚拟网络命名都可能不同，这里我们选择<code>VMnet8</code>,这里记住这个网络的名字，后面要考😋</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130114230277.png" alt="image-20241130114230277"></p><p>点击属性</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130114929350.png" alt="image-20241130114929350"></p><p>找到ipv4这一栏，点进去，修改ip</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130115031196.png" alt="image-20241130115031196"></p><p>因为下面的内容都会涉及到计算机网络的知识，因此如果你没学过计算机网络的话，别想太多，做就完事了。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>IP地址你只能设置为三大私有地址段(不做阐述)，这里推荐使用<code>192.168.1xxx.2xxx</code>这个私有地址</li><li><code>1xxx</code>可以随便填从<code>0~255</code>任意值，我下面填了<code>235</code></li><li><code>2xxx</code>一般要用来标识子网地址，所以最好填<code>0</code>或者<code>1</code></li><li>C类地址的网络号是24位，因此子网掩码固定填写<code>255.255.255.0</code></li><li>默认网关要跟ip地址在同一个子网，别跟ip地址重复就行</li><li>DNS不要填，让他自动配置</li></ol><p>修改完后点确定就行</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130115123230.png" alt="image-20241130115123230"></p><p>之后打开VMware的虚拟网络编辑器，找到<code>Vmnet8</code>(前面的伏笔哦),把DHCP取消掉，这个功能会自动帮你分配ip,但这不是你想要的！😈</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130120351824.png" alt="image-20241130120351824"></p><p>然后打开NAT设置,这里的网关要跟前面在Windows设置的一样</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130120613803.png" alt="image-20241130120613803"></p><p>虚拟机，启动！在设置里面打开网络配置，这里唯一要注意的是<strong>网关要跟DNS的地址设置成一样的</strong>，要不然ping网站的时候会出现域名解析错误！！</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130120801311.png" alt="image-20241130120801311"></p><p>配置完后要重启电脑，之后我们试试ping一下百度，看看是否能成功</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241130121018849.png" alt="image-20241130121018849"></p><p>然后在看看ip地址是否配置成功,我的虚拟机网络是ens33，可以ip地址变成了<code>192.168.235.15</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.235.15  netmask 255.255.255.0  broadcast 192.168.235.255</span><br><span class="line">        inet6 fe80::39b5:326e:53f9:de8a  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        inet6 fd15:4ba5:5a2b:1008:f6fa:23d4:56df:a104  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fd15:4ba5:5a2b:1008:c61a:74ad:3acf:44cc  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        ether 00:0c:29:20:3a:79  txqueuelen 1000  (以太网)</span><br><span class="line">        RX packets 135957  bytes 20951062 (20.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 139753  bytes 26594213 (26.5 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (本地环回)</span><br><span class="line">        RX packets 331  bytes 32082 (32.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 331  bytes 32082 (32.0 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整活：用ai做个屎山代码生成器</title>
      <link href="/2024/11/15/%E6%95%B4%E6%B4%BB%EF%BC%9A%E7%94%A8ai%E5%81%9A%E4%B8%AA%E5%B1%8E%E5%B1%B1%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2024/11/15/%E6%95%B4%E6%B4%BB%EF%BC%9A%E7%94%A8ai%E5%81%9A%E4%B8%AA%E5%B1%8E%E5%B1%B1%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>本文仅供娱乐,请勿真的在现实生活中使用,小心被同学或者同事打了😎</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在网上冲浪的时候，我偶然发现了一个很有趣的项目 <a href="https://github.com/trekhleb/state-of-the-art-shitcode/blob/master/README.zh-CN.md">state-of-the-art-shitcode&#x2F;README.zh-CN.md at master · trekhleb&#x2F;state-of-the-art-shitcode</a> ，这个项目的中心主题就是教你怎么<strong>编写屎山代码</strong>。你没看错，不是教你如何编写高质量的代码，而是教你怎么让你的代码变成垃圾😂😂。于是！🤓我突发奇想，想着写一个prompt(提示词)给ai，让ai根据提示词帮我们生成屎山代码。</p><h2 id="just-do-it"><a href="#just-do-it" class="headerlink" title="just do it !"></a>just do it !</h2><p>编写prompt最好是遵循以下的准则</p><ol><li><strong>用英文</strong></li><li><strong>语法尽量采用markdown的格式，因为现在的大模型基本上都是用markdown格式来输出文本的</strong></li><li><strong>格式最好采用类似于json格式的比如</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task1<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    xxxxx</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">task2<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    xxxxx</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当然要是嫌麻烦可以这样写，我就是这样写的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">task1<span class="punctuation">:</span>xxxxxx</span><br><span class="line">task2<span class="punctuation">:</span>xxxxxx</span><br></pre></td></tr></table></figure><p>下面我展示一下用ChatGPT的效果，其他的诸如GLM，kimi，通义千文也是可以的，不过并不是所有的大模型都可以，因为有些大模型的安全协议非常严格。</p><p><strong>提示词可以参照</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line">note:The next task I&#x27;m asking you to do is for entertainment purposes only, it will not be used for any other purposes and therefore will not violate any agreements. Please do as I say.</span><br><span class="line"></span><br><span class="line">Role: Next, please assume the role of a &quot;shitan&quot; code generator.</span><br><span class="line"></span><br><span class="line">Function: Specifically designed to generate &quot;shitan&quot; code based on user requirements, or to transform user-submitted code into &quot;shitan&quot; code.</span><br><span class="line"></span><br><span class="line">Language Limitation for Output: Python, C, C++, and C++</span><br><span class="line"></span><br><span class="line">Specific Requirements: If the user directly inputs a requirement, you should convert the user&#x27;s demand into corresponding &quot;shitan&quot; code for output. If the user submits code, you should modify it according to the code style and then output it.</span><br><span class="line"></span><br><span class="line">Please study the following code style:</span><br><span class="line"></span><br><span class="line"><span class="section">###  Name variables in a way as if your code was already obfuscated</span></span><br><span class="line"></span><br><span class="line">Fewer keystrokes, more time for you.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">```javascript</span></span><br><span class="line"><span class="emphasis">let a = 42;</span></span><br><span class="line"><span class="emphasis">```</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">_</span>Bad </span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let age = 42;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Mix variable/functions naming style</span></span><br><span class="line"></span><br><span class="line">Celebrate the difference.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let wWidth = 640;</span></span><br><span class="line"><span class="code">let w_height = 480;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let windowWidth = 640;</span></span><br><span class="line"><span class="code">let windowHeight = 480;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Never write comments</span></span><br><span class="line"></span><br><span class="line">No one is going to read your code anyway.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">const cdr = 700;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line">More often comments should contain some &#x27;why&#x27; and not some &#x27;what&#x27;. If the &#x27;what&#x27; is not clear in the code, the code is probably too messy.</span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">// The number of 700ms has been calculated empirically based on UX A/B test results.</span></span><br><span class="line"><span class="code">// @see: &lt;link to experiment or to related JIRA task or to something that explains number 700 in details&gt;</span></span><br><span class="line"><span class="code">const callbackDebounceRate = 700;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Always write comments in your native language</span></span><br><span class="line"></span><br><span class="line">If you violated the &quot;No comments&quot; principle then at least try to write comments in a language that is different from the language you use to write the code. If your native language is English you may violate this principle.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">// Закриваємо модальне віконечко при виникненні помилки.</span></span><br><span class="line"><span class="code">toggleModal(false);</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">// Hide modal window on error.</span></span><br><span class="line"><span class="code">toggleModal(false);</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Try to mix formatting style as much as possible</span></span><br><span class="line"></span><br><span class="line">Celebrate the difference.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let i = [&#x27;tomato&#x27;, &#x27;onion&#x27;, &#x27;mushrooms&#x27;];</span></span><br><span class="line"><span class="code">let d = [ &quot;ketchup&quot;, &quot;mayonnaise&quot; ];</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let ingredients = [&#x27;tomato&#x27;, &#x27;onion&#x27;, &#x27;mushrooms&#x27;];</span></span><br><span class="line"><span class="code">let dressings = [&#x27;ketchup&#x27;, &#x27;mayonnaise&#x27;];</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Put as much code as possible into one line</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">document.location.search.replace(/(^\?)/,&#x27;&#x27;).split(&#x27;&amp;&#x27;).reduce(function(o,n)&#123;n=n.split(&#x27;=&#x27;);o[n[0]]=n[1];return o&#125;,&#123;&#125;)</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">document.location.search</span></span><br><span class="line"><span class="code">  .replace(/(^\?)/, &#x27;&#x27;)</span></span><br><span class="line"><span class="code">  .split(&#x27;&amp;&#x27;)</span></span><br><span class="line"><span class="code">  .reduce((searchParams, keyValuePair) =&gt; &#123;</span></span><br><span class="line"><span class="code">    keyValuePair = keyValuePair.split(&#x27;=&#x27;);</span></span><br><span class="line"><span class="code">    searchParams[keyValuePair[0]] = keyValuePair[1];</span></span><br><span class="line"><span class="code">    return searchParams;</span></span><br><span class="line"><span class="code">  &#125;,</span></span><br><span class="line"><span class="code">  &#123;&#125;</span></span><br><span class="line"><span class="code">)</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Fail silently</span></span><br><span class="line"></span><br><span class="line">Whenever you catch an error it is not necessary for anyone to know about it. No logs, no error modals, chill.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">try &#123;</span></span><br><span class="line"><span class="code">  // Something unpredictable.</span></span><br><span class="line"><span class="code">&#125; catch (error) &#123;</span></span><br><span class="line"><span class="code">  // tss... </span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">try &#123;</span></span><br><span class="line"><span class="code">  // Something unpredictable.</span></span><br><span class="line"><span class="code">&#125; catch (error) &#123;</span></span><br><span class="line"><span class="code">  setErrorMessage(error.message);</span></span><br><span class="line"><span class="code">  // and/or</span></span><br><span class="line"><span class="code">  logError(error);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Use global variables extensively</span></span><br><span class="line"></span><br><span class="line">Globalization principle.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let x = 5;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">function square() &#123;</span></span><br><span class="line"><span class="code">  x = x ** 2;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">square(); // Now x is 25.</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let x = 5;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">function square(num) &#123;</span></span><br><span class="line"><span class="code">  return num ** 2;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">x = square(x); // Now x is 25.</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Create variables that you&#x27;re not going to use.</span></span><br><span class="line"></span><br><span class="line">Just in case.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function sum(a, b, c) &#123;</span></span><br><span class="line"><span class="code">  const timeout = 1300;</span></span><br><span class="line"><span class="code">  const result = a + b;</span></span><br><span class="line"><span class="code">  return a + b;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function sum(a, b) &#123;</span></span><br><span class="line"><span class="code">  return a + b;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Don&#x27;t specify types and/or don&#x27;t do type checks if language allows you to do so.</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function sum(a, b) &#123;</span></span><br><span class="line"><span class="code">  return a + b;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// Having untyped fun here.</span></span><br><span class="line"><span class="code">const guessWhat = sum([], &#123;&#125;); // -&gt; &quot;[object Object]&quot;</span></span><br><span class="line"><span class="code">const guessWhatAgain = sum(&#123;&#125;, []); // -&gt; 0</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function sum(a: number, b: number): ?number &#123;</span></span><br><span class="line"><span class="code">  // Covering the case when we don&#x27;t do transpilation and/or Flow type checks in JS.</span></span><br><span class="line"><span class="code">  if (typeof a !== &#x27;number&#x27; &amp;&amp; typeof b !== &#x27;number&#x27;) &#123;</span></span><br><span class="line"><span class="code">    return undefined;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  return a + b;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// This one should fail during the transpilation/compilation.</span></span><br><span class="line"><span class="code">const guessWhat = sum([], &#123;&#125;); // -&gt; undefined</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  You need to have an unreachable piece of code</span></span><br><span class="line"></span><br><span class="line">This is your &quot;Plan B&quot;.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function square(num) &#123;</span></span><br><span class="line"><span class="code">  if (typeof num === &#x27;undefined&#x27;) &#123;</span></span><br><span class="line"><span class="code">    return undefined;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  else &#123;</span></span><br><span class="line"><span class="code">    return num ** 2;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  return null; // This is my &quot;Plan B&quot;.</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function square(num) &#123;</span></span><br><span class="line"><span class="code">  if (typeof num === &#x27;undefined&#x27;) &#123;</span></span><br><span class="line"><span class="code">    return undefined;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  return num ** 2;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Triangle principle</span></span><br><span class="line"></span><br><span class="line">Be like a bird - nest, nest, nest.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">function someFunction() &#123;</span></span><br><span class="line"><span class="code">  if (condition1) &#123;</span></span><br><span class="line"><span class="code">    if (condition2) &#123;</span></span><br><span class="line"><span class="code">      asyncFunction(params, (result) =&gt; &#123;</span></span><br><span class="line"><span class="code">        if (result) &#123;</span></span><br><span class="line"><span class="code">          for (;;) &#123;</span></span><br><span class="line"><span class="code">            if (condition3) &#123;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">          &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">      &#125;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">async function someFunction() &#123;</span></span><br><span class="line"><span class="code">  if (!condition1 || !condition2) &#123;</span></span><br><span class="line"><span class="code">    return;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">  const result = await asyncFunction(params);</span></span><br><span class="line"><span class="code">  if (!result) &#123;</span></span><br><span class="line"><span class="code">    return;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">  for (;;) &#123;</span></span><br><span class="line"><span class="code">    if (condition3) &#123;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Mess with indentations</span></span><br><span class="line"></span><br><span class="line">Avoid indentations since they make complex code take up more space in the editor. If you&#x27;re not feeling like avoiding them then just mess with them.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">const fruits = [&#x27;apple&#x27;,</span></span><br><span class="line"><span class="code">  &#x27;orange&#x27;, &#x27;grape&#x27;, &#x27;pineapple&#x27;];</span></span><br><span class="line"><span class="code">  const toppings = [&#x27;syrup&#x27;, &#x27;cream&#x27;, </span></span><br><span class="line"><span class="code">                    &#x27;jam&#x27;, </span></span><br><span class="line"><span class="code">                    &#x27;chocolate&#x27;];</span></span><br><span class="line"><span class="code">const desserts = [];</span></span><br><span class="line"><span class="code">fruits.forEach(fruit =&gt; &#123;</span></span><br><span class="line"><span class="code">toppings.forEach(topping =&gt; &#123;</span></span><br><span class="line"><span class="code">    desserts.push([</span></span><br><span class="line"><span class="code">fruit,topping]);</span></span><br><span class="line"><span class="code">    &#125;);&#125;)</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">const fruits = [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;, &#x27;pineapple&#x27;];</span></span><br><span class="line"><span class="code">const toppings = [&#x27;syrup&#x27;, &#x27;cream&#x27;, &#x27;jam&#x27;, &#x27;chocolate&#x27;];</span></span><br><span class="line"><span class="code">const desserts = [];</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">fruits.forEach(fruit =&gt; &#123;</span></span><br><span class="line"><span class="code">  toppings.forEach(topping =&gt; &#123;</span></span><br><span class="line"><span class="code">    desserts.push([fruit, topping]); </span></span><br><span class="line"><span class="code">  &#125;);</span></span><br><span class="line"><span class="code">&#125;)</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Do not lock your dependencies</span></span><br><span class="line"></span><br><span class="line">Update your dependencies on each new installation in uncontrolled way. Why stick to the past, let&#x27;s use the cutting edge libraries versions.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">$ ls -la</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">package.json</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">$ ls -la</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">package.json</span></span><br><span class="line"><span class="code">package-lock.json</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Always name your boolean value a `flag`</span></span><br><span class="line"></span><br><span class="line">Leave the space for your colleagues to think what the boolean value means.</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Good _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let flag = true;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Bad _</span></span><br><span class="line"></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">let isDone = false;</span></span><br><span class="line"><span class="code">let isEmpty = false;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">###  Long-read functions are better than short ones.</span></span><br><span class="line"></span><br><span class="line">Don&#x27;t divide a program logic into readable pieces. What if your IDE&#x27;s search breaks and you will not be able to find the necessary file or function?</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 10000 lines of code in one file is OK.</span><br><span class="line"><span class="bullet">-</span> 1000 lines of a function body is OK.</span><br><span class="line"><span class="bullet">-</span> Dealing with many services (3rd party and internal, also, there are some helpers, database hand-written ORM and jQuery slider) in one <span class="code">`service.js`</span>? It&#x27;s OK.</span><br><span class="line"></span><br><span class="line"><span class="section">###  Avoid covering your code with tests</span></span><br><span class="line"></span><br><span class="line">This is a duplicate and unnecessary amount of work.</span><br><span class="line"></span><br><span class="line"><span class="section">###  As hard as you can try to avoid code linters</span></span><br><span class="line"></span><br><span class="line">Write code as you want, especially if there is more than one developer in a team. This is a &quot;freedom&quot; principle.</span><br><span class="line"></span><br><span class="line"><span class="section">###  Start your project without a README file.</span></span><br><span class="line"></span><br><span class="line">And keep it that way for the time being.</span><br><span class="line"></span><br><span class="line"><span class="section">###  You need to have unnecessary code</span></span><br><span class="line"></span><br><span class="line">Don&#x27;t delete the code your app doesn&#x27;t use. At most, comment it.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241116003938186.png" alt="image-20241116003938186"></p><p>然后我们用一段写的非常规范的高质量c语言代码作为样例测试一下。哇，这个代码写的是不是非常好？格式优美，变量命名清晰易懂，结构合理😍。所以这才有弄脏的价值嘛！😈（开玩笑的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A vertex of the graph</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> vertex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Some declarations</span></span><br><span class="line"><span class="keyword">struct</span> node *<span class="title function_">createNode</span><span class="params">(<span class="type">int</span> v)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> numVertices;</span><br><span class="line">    <span class="type">int</span> *visited;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> **<span class="title">adjLists</span>;</span> <span class="comment">// we need int** to store a two dimensional array. Similary,</span></span><br><span class="line">                            <span class="comment">// we need struct node** to store an array of Linked lists</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> Graph *<span class="title function_">createGraph</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="keyword">struct</span> Graph *, <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(<span class="keyword">struct</span> Graph *)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="keyword">struct</span> Graph *, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> vertices, edges, source, i, src, dst;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the number of vertices\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;vertices);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> *<span class="title">graph</span> =</span> createGraph(vertices);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the number of edges\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;edges);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; edges; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Edge %d \nEnter source: &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;src);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter destination: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dst);</span><br><span class="line">        addEdge(graph, src, dst);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter source of DFS\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;source);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DFS from %d is:\n&quot;</span>, source);</span><br><span class="line">    dfs(graph, source);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Uncomment below part to get a ready-made example</span></span><br><span class="line">    <span class="comment">/*struct Graph* graph = createGraph(4);</span></span><br><span class="line"><span class="comment">    addEdge(graph, 0, 1);</span></span><br><span class="line"><span class="comment">    addEdge(graph, 0, 2);</span></span><br><span class="line"><span class="comment">    addEdge(graph, 1, 2);</span></span><br><span class="line"><span class="comment">    addEdge(graph, 2, 3);</span></span><br><span class="line"><span class="comment">    printf(&quot;DFS from 0 is:\n&quot;);</span></span><br><span class="line"><span class="comment">    dfs(graph,0);</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Recursive dfs approach</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="keyword">struct</span> Graph *graph, <span class="type">int</span> vertex)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">adjList</span> =</span> graph-&gt;adjLists[vertex];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> adjList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add vertex to visited list and print it</span></span><br><span class="line">    graph-&gt;visited[vertex] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, vertex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursively call the dfs function on all unvisited neighbours</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> connectedVertex = temp-&gt;vertex;</span><br><span class="line">        <span class="keyword">if</span> (graph-&gt;visited[connectedVertex] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(graph, connectedVertex);</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Allocate memory for a node</span></span><br><span class="line"><span class="keyword">struct</span> node *<span class="title function_">createNode</span><span class="params">(<span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">    newNode-&gt;vertex = v;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Allocate memory for the entire graph structure</span></span><br><span class="line"><span class="keyword">struct</span> Graph *<span class="title function_">createGraph</span><span class="params">(<span class="type">int</span> vertices)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> *<span class="title">graph</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Graph));</span><br><span class="line">    graph-&gt;numVertices = vertices;</span><br><span class="line"></span><br><span class="line">    graph-&gt;adjLists = <span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node *));</span><br><span class="line"></span><br><span class="line">    graph-&gt;visited = <span class="built_in">malloc</span>(vertices * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertices; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        graph-&gt;adjLists[i] = <span class="literal">NULL</span>;</span><br><span class="line">        graph-&gt;visited[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Creates a bidirectional graph</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="keyword">struct</span> Graph *graph, <span class="type">int</span> src, <span class="type">int</span> dest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Add edge from src to dest</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> createNode(dest);</span><br><span class="line">    newNode-&gt;next = graph-&gt;adjLists[src];</span><br><span class="line">    graph-&gt;adjLists[src] = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add edge from dest to src</span></span><br><span class="line">    newNode = createNode(src);</span><br><span class="line">    newNode-&gt;next = graph-&gt;adjLists[dest];</span><br><span class="line">    graph-&gt;adjLists[dest] = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utility function to see state of graph at a given time</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(<span class="keyword">struct</span> Graph *graph)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; graph-&gt;numVertices; v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> graph-&gt;adjLists[v];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n Adjacency list of vertex %d\n &quot;</span>, v);</span><br><span class="line">        <span class="keyword">while</span> (temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;vertex);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们看看ai的回答,不得不说，确实是一坨屎山。瞬间让人没有阅读下去的欲望了😂😂</p><p>​<img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%85%B6%E4%BB%96/image-20241116004334591.png" alt="image-20241116004334591"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span><span class="type">int</span> v;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">nxt</span>;</span>&#125;; <span class="comment">// Shortened struct name</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">G</span>&#123;</span><span class="type">int</span> nV;<span class="type">int</span> *vst;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> **<span class="title">aL</span>;</span>&#125;;<span class="comment">// Graph struct</span></span><br><span class="line"><span class="keyword">struct</span> G *<span class="title function_">crG</span><span class="params">(<span class="type">int</span>)</span>;<span class="type">void</span> <span class="title function_">adE</span><span class="params">(<span class="keyword">struct</span> G *,<span class="type">int</span>,<span class="type">int</span>)</span>;<span class="type">void</span> <span class="title function_">prG</span><span class="params">(<span class="keyword">struct</span> G *)</span>;<span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="keyword">struct</span> G *,<span class="type">int</span>)</span>;<span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;<span class="type">int</span> v,e,s,i,src,dst;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);<span class="class"><span class="keyword">struct</span> <span class="title">G</span> *<span class="title">g</span>=</span>crG(v);<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;e;i++)&#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;src,&amp;dst);adE(g,src,dst);&#125;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);dfs(g,s);<span class="keyword">return</span> <span class="number">0</span>;&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="keyword">struct</span> G *g,<span class="type">int</span> v)</span>&#123;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">aL</span>=</span>g-&gt;aL[v];<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">t</span>=</span>aL;g-&gt;vst[v]=<span class="number">1</span>;<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);<span class="keyword">while</span>(t)&#123;<span class="type">int</span> cV=t-&gt;v;<span class="keyword">if</span>(!g-&gt;vst[cV])dfs(g,cV);t=t-&gt;nxt;&#125;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> n *<span class="title function_">crN</span><span class="params">(<span class="type">int</span> v)</span>&#123;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">n</span>=</span><span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> n));n-&gt;v=v;n-&gt;nxt=<span class="literal">NULL</span>;<span class="keyword">return</span> n;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> G *<span class="title function_">crG</span><span class="params">(<span class="type">int</span> v)</span>&#123;<span class="class"><span class="keyword">struct</span> <span class="title">G</span> *<span class="title">g</span>=</span><span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> G));g-&gt;nV=v;g-&gt;aL=<span class="built_in">malloc</span>(v*<span class="keyword">sizeof</span>(<span class="keyword">struct</span> n *));g-&gt;vst=<span class="built_in">malloc</span>(v*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v;i++)&#123;g-&gt;aL[i]=<span class="literal">NULL</span>;g-&gt;vst[i]=<span class="number">0</span>;&#125;<span class="keyword">return</span> g;&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">adE</span><span class="params">(<span class="keyword">struct</span> G *g,<span class="type">int</span> s,<span class="type">int</span> d)</span>&#123;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">n</span>=</span>crN(d);n-&gt;nxt=g-&gt;aL[s];g-&gt;aL[s]=n;n=crN(s);n-&gt;nxt=g-&gt;aL[d];g-&gt;aL[d]=n;&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">prG</span><span class="params">(<span class="keyword">struct</span> G *g)</span>&#123;<span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;g-&gt;nV;v++)&#123;<span class="class"><span class="keyword">struct</span> <span class="title">n</span> *<span class="title">t</span>=</span>g-&gt;aL[v];<span class="keyword">while</span>(t)&#123;<span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,t-&gt;v);t=t-&gt;nxt;&#125;<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>再次重申，仅供娱乐，玩玩就好了，现实中这样做会被打的😑</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux命令行中一行执行多个命令</title>
      <link href="/2024/10/22/Linux/%E5%9C%A8Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%B8%80%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/10/22/Linux/%E5%9C%A8Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%B8%80%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你要完成一个复杂的任务时，在shell中一次只输入一个命令，这通常很低效，因此后面就出现了shell脚本，所谓的shell脚本就是指一堆命令的集合，然后一起执行，那么本文就会阐述shell脚本的其中一个基础——在一行内执行多条命令</p><p>在讲述方法前，我们先来看一个问题：用apt安装软件的时候，你肯定都会先更新软件源，然后再安装软件，有没有方法可以在一行做到呢？</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>有三种方式可以做到这个操作</p><ol><li>[ ; ]</li></ol><p>特点：如果被分号(;)所分隔的命令会连续的执行下去，就算是错误的命令也会继续执行后面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# lld ; <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span> ; lok</span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br><span class="line">ok</span><br><span class="line">-bash: lok: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><ol start="2"><li>[ &amp;&amp; ]</li></ol><p>特点：如果命令被 &amp;&amp; 所分隔，那么命令也会一直执行下去，但是中间有错误的命令存在就不会执行后面的命令，没错就直行至完为止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span> &amp;&amp; lld &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">ok</span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><ol start="3"><li>[ || ]</li></ol><p>特点：如果每个命令被双竖线 || 所分隔，那么一遇到可以执行成功的命令就会停止执行后面的命令，而不管后面的命令是否正确与否。如果执行到错误的命令就是继续执行后一个命令，一直执行到遇到正确的命令为止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;haha&quot;</span></span><br><span class="line">ok</span><br><span class="line">[root@localhost etc]# lld || <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;haha&quot;</span></span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>那么回到最初的问题，在一行更新并安装软件可以用下面的方式做到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update;<span class="built_in">sudo</span> apt install software</span><br></pre></td></tr></table></figure><h3 id="如何进行选择"><a href="#如何进行选择" class="headerlink" title="如何进行选择"></a>如何进行选择</h3><p>以上的三种方法都可以实现一行执行多个命令，但是他们之间的用法是有区别的，下面我简要概括一下每种方式的使用场景</p><ol><li>命令的执行的结果之间无逻辑关系，比如</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a .;<span class="built_in">ls</span> -a /</span><br></pre></td></tr></table></figure><p>这两个命令执行是否成功，都不会影响到彼此，因此这种情况下，使用分号(;)即可</p><ol start="2"><li>命令的执行的结果之间有逻辑关系</li></ol><p><strong>假如后一个命令必须依赖前一个命令，这种情况下就使用 <code>&amp;&amp;</code></strong></p><p>比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> file.txt &amp;&amp; <span class="built_in">ls</span> -l file.txt</span><br></pre></td></tr></table></figure><p>上面例子中，只有 <code>cat</code>命令执行成功，才会继续执行 <code>ls</code>命令。如果 <code>cat</code>执行失败（比如不存在文件 <code>flie.txt</code>），那么 <code>ls</code>命令就不会执行。</p><p><strong>假如后一个命令是作为前一个命令的替补选择的话，这种情况就使用 <code>||</code></strong></p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir foo || mkdir bar</span><br></pre></td></tr></table></figure><p>上面例子中，只有 <code>mkdir foo</code>命令执行失败（比如 <code>foo</code>目录已经存在），才会继续执行 <code>mkdir bar</code>命令。如果 <code>mkdir foo</code>命令执行成功，就不会创建 <code>bar</code>目录了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析main函数的参数的作用与应用场景</title>
      <link href="/2024/10/14/C%E8%AF%AD%E8%A8%80/%E8%A7%A3%E6%9E%90main%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2024/10/14/C%E8%AF%AD%E8%A8%80/%E8%A7%A3%E6%9E%90main%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚学习C语言的你，多数都会使用ide，比如visual studio等等，一般生成的代码模板都是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常来说 <code>int argc, char const *argv[]</code>，用ide点点按钮编译文件的话，这两个参数你是用不到的，因为ide都会集成一种叫做<strong>构建系统</strong>的东西用来快速编译整个工程，但是你难道没有好奇过这两个参数有啥用吗😕。今天我就简单解析一下这两个参数的作用与应用场景</p><h2 id="定义与解析"><a href="#定义与解析" class="headerlink" title="定义与解析"></a>定义与解析</h2><p>百度百科是这样定义这两个参数的</p><blockquote><p><strong>ARG</strong>c和<strong>ARG</strong>v中的<strong>ARG</strong>指的是**”参数”<em><strong>（外语：</strong>ARG</em>*<em>uments, argument counter 和 argument vector</em> ） [1]</p><p>至少有两个<a href="https://baike.baidu.com/item/%E5%8F%82%E6%95%B0/5934974?fromModule=lemma_inlink">参数</a>至<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%87%BD%E6%95%B0/8428535?fromModule=lemma_inlink">主函数</a>：ARGc和ARGv；</p><p>第一个是提供给主函数的参数个数，</p><p>第二个是参数的字符串数组的指针。 [1]</p></blockquote><p>我给你翻译成人话，<code>argc</code>是指从命令行传入参数的个数，<code>argv</code>是参数名字的数组</p><p>举个例子你马上就懂了</p><p>假如有下面的代码main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// argc 是参数的数量</span></span><br><span class="line">    <span class="comment">// argv 是参数的列表，argv[0] 是程序名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;参数%d是: %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们用gcc进行编译，如果你不知道什么是gcc，没关系，你现在只需要知道gcc是编译c语言的工具就行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -o表示指定编译后的程序名字为main.exe </span></span><br><span class="line">gcc main.c -o main.exe</span><br></pre></td></tr></table></figure><p>然后我们在命令行执行main.exe</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须加上 ./ 不然命令行无法找到main.exe的路径(./ 表示当前路径)</span></span><br><span class="line">./main.exe 111 222 333</span><br></pre></td></tr></table></figure><p>之后就是重要部分了，在程序执行后，我们加上了三个数字111 222 和333，这里有三个数字，所以argc&#x3D;3，argv&#x3D;[“D:\coding\workspace\C_CPP\study\main.exe”,”111”,”222”,”333”]</p><p>运行结果如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数 <span class="number">0</span>是: D:\coding\workspace\C_CPP\study\main.exe</span><br><span class="line">参数 <span class="number">1</span>是: <span class="number">111</span></span><br><span class="line">参数 <span class="number">2</span>是: <span class="number">222</span></span><br><span class="line">参数 <span class="number">3</span>是: <span class="number">333</span></span><br></pre></td></tr></table></figure><p>argc&#x3D;3,意思就是传进的参数有 3 个，那为什么argv数组有四个元素呢？</p><p><strong>因为argv[0]默认是程序的存放路径，这个记住就</strong>行</p><p>最后有一个点要说一样，main函数的参数不一定非要要叫argc和argv，而是可以自定义的，所以你写成a和b都可以,argc和argv是约定成俗的一个名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> a, <span class="type">char</span> *b[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// argc 是参数的数量</span></span><br><span class="line">    <span class="comment">// argv 是参数的列表，argv[0] 是程序名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;参数 %d是: %s\n&quot;</span>, i, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>看完上面的内容，你估计有个疑问，这玩意好像没啥用啊？</p><p>别急，我给你说一个例子你就懂了</p><p>假设你开发了一个命令行工具 <strong>app.exe</strong>  ,他的作用是对txt文件进行处理(具体是什么功能省略)</p><p>你可以这样写程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我要处理的文件是%s!&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你就可以这样使用，来把你要处理的文件名通过命令行传输进去，这样程序就能知道你要对那个文件进行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\coding\workspace\C_CPP\study&gt;.\app.exe file.txt</span><br><span class="line">我要处理的文件是file.txt!</span><br></pre></td></tr></table></figure><p>当然这只是一个简单的例子，以后学习Linux的时候，你会接触到更多这方面的使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2启用代理(梯子)的方法</title>
      <link href="/2024/10/13/Linux/wsl2%E5%90%AF%E7%94%A8%E4%BB%A3%E7%90%86(%E6%A2%AF%E5%AD%90)%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/10/13/Linux/wsl2%E5%90%AF%E7%94%A8%E4%BB%A3%E7%90%86(%E6%A2%AF%E5%AD%90)%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开头先讲讲wsl2启用代理的必要性，一般来说，会用wsl的都是开发者，那么就避免不了从网络上下载软件和应用，但是由于众所周知的原因，你使用apt，wget等工具下载国外网站的东西时，下载速度就会非常的缓慢，因此让wsl2使用代理是提高下载速度的有效手段。通常情况下，wsl2的网络会采用NAT模式，如果你不知道啥是NAT,这里我简单介绍一下</p><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><p><strong>Network Address Translation</strong>(NAT)，翻译过来就是网络地址转换，别看网上的定义那么复杂，其实这个东西很简单，就是将你本地的ip地址与一台有公网ip地址的服务器做一个简单的映射</p><table><thead><tr><th>公网ip</th><th>本地ip</th></tr></thead><tbody><tr><td>113.x.x.x</td><td>192.168.x.x</td></tr></tbody></table><p>现实中，一般都会有多个本地ip映射到同一个公网ip上，这样就能多台电脑同时使用一个公网ip，节约公网ip的数量，而且通常来说，NAT都是会进行多次映射的，所以就会有二次nat，三次nat这种东西。因此计算机领域很大的一个特点就是套娃捏😂😂。</p><p>ok，回到正题，如何你在使用代理的情况下启动wsl，通常会得到以下的提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>不支持NAT，那么就改成其他模式就好了，具体的步骤如下</p><ol><li>在你windows的用户文件夹下找到一个<code>.wslconfig</code>的文件，如果没有那你就自己创建一个，用户文件夹的路径通常是<code>C:\Users\&lt;这里是你自己的用户名&gt;</code></li><li>在这个文件夹中输入以下的内容,networkingMode就是网络模式，默认是NAT，这里我们改成<code>mirrored</code>,镜像模式就是与windows本机的网络配置一样</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored</span><br><span class="line">autoProxy=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重启wsl</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br><span class="line">wsl</span><br></pre></td></tr></table></figure><p>上面的方法是我查阅官方文档后总结出来的,<a href="https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config">WSL 中的高级设置配置 | Microsoft Learn</a>,想要配置其他的选项可以参考。如果你是一个小白，我不推荐你看微软的官方文档，因为很难看懂，如果你已经是老手，那么我建议你看英文版的，因为微软官翻的中文，我只能说忍俊不禁🤓</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>改成镜像模式后，wsl的ip地址会和windows本机的相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig </span><br><span class="line">eth2: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.77.27.220  netmask 255.255.255.0  broadcast 10.77.27.255</span><br><span class="line">        inet6 fe80::5591:8540:66e9:2273  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether b0:25:aa:58:2d:bc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 12  bytes 976 (976.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>可以看到ip地址都是相同的，说明修改就成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::5591:8540:66e9:2273%14</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 10.77.27.220</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 10.77.27.254</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言期末复习题库，答案与解析</title>
      <link href="/2024/10/12/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E9%A2%98%E5%BA%93%E7%AD%94%E6%A1%88%E4%B8%8E%E8%A7%A3%E6%9E%902024%E7%89%88/"/>
      <url>/2024/10/12/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E9%A2%98%E5%BA%93%E7%AD%94%E6%A1%88%E4%B8%8E%E8%A7%A3%E6%9E%902024%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>临时抱佛脚专用，拿着它速通汇编语言吧！😈😈，还有就是，答案与解析都是基于web search 的GenAL生成的，所以在计算题上会错误比较多，这个就自己想想办法吧，但是在概念与需要记忆的题上效果很好，自己作为参考吧😝😝😝</p><h2 id="一-单选题"><a href="#一-单选题" class="headerlink" title="一 单选题"></a>一 单选题</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><ol><li>PC机的最小信息单位是（ ）。</li></ol><p>A. bit   B. 字节  C. 字长    D. 字</p><ol start="2"><li>一个CPU的寻址能力是8KB，那么它的地址总线的宽度为（ ）位。</li></ol><p>A. 8   B. 3   C. 12   D. 13</p><ol start="3"><li>1个CPU的寻址能力为16KB，那么它的地址总线的宽度为 （  ）位。</li></ol><p>A. 11         B. 12         C. 13         D. 14</p><ol start="4"><li>1MB的存储器的地址编号从（  ）到（  ）</li></ol><p>A.0<del>3ff H    B. 1</del>400 H         C. 0<del>fffff H  D. 1</del>100000H</p><ol start="5"><li>1TB是 （  ） 个Byte。</li></ol><p>A. 2^40   B. 2^30   C. 2^20        D. 2^10</p><ol start="6"><li>1MB是（  ） 个Byte。</li></ol><p>A. 2^40   B. 2^30   C. 2^20   D. 2^10</p><ol start="7"><li>1KB的存储器的地址编号从（  ）到（  ）</li></ol><p>A. 0<del>3ff H        B. 1</del>400 H    C. 0<del>fffff H    D. 1</del>100000H</p><ol start="8"><li>1KB的存储器的可以存储（  ）个bit</li></ol><p>A. 1024       B. 8×1024         C. 1000       D. 8000</p><ol start="9"><li>1GB是 （  ） 个Byte。</li></ol><p>A. 2^40   B. 2^30   C. 2^20        D. 2^10</p><ol start="10"><li>8086的数据总线宽度为16根，从内存中读取20字节的数据，8086至少要读 （  ）次。</li></ol><p>A. 16         B. 20          C. 10         D. 5</p><ol start="11"><li>8086的数据总线宽度为32根。从内存中读取20字节的数据，8086至少要读 （  ）次。</li></ol><p>A. 32         B. 20          C. 10         D. 5</p><ol start="12"><li>在存储器中,数据和程序以_______形式存放。</li></ol><p>A. 二进制    B. 八进制    C. 十进制    D. 十六进制</p><ol start="13"><li>8086CPU的地址总线的宽度是20位，数据总线的宽度是16位，则8086CPU的寻址能力为(  )。</li></ol><p>A.64KB   B.1MB   C.1GB   D.不确定</p><ol start="14"><li>8086CPU的地址总线宽度为32根，8086CPU的寻址能力是（  ）。</li></ol><p>A.64KB  B.1024KB  C.16MB   D.4096MB</p><ol start="15"><li>从内存中读取1024个字节的数据，8086CPU至少需要读256次，则8086的数据总线宽度为（  ）位。</li></ol><p>A.4    B.8   C.16   D.32</p><ol start="16"><li>8086中，一个字单元可以存储（  ）个bit。</li></ol><p>A.1  B.8  C.16   D.32</p><ol start="17"><li>一个1KB的存储器包含多少个存储单元？可以存储多少个二进制位？（  ）</li></ol><p>A. 1024，1024  B. 8192，1024   C. 8192，8192   D. 1024，8192</p><h4 id="答案与解析"><a href="#答案与解析" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>PC机的最小信息单位是字节</li><li>一个CPU的寻址能力是8KB，那么它的地址总线的宽度为13位。因为13根地址总线可以寻址2^13&#x3D;8KB。</li><li>一个CPU的寻址能力为16KB，那么它的地址总线的宽度为14位。因为14根地址总线可以寻址2^14&#x3D;16KB。</li><li>1MB的存储器的地址编号从0x00000到0xFFFFF。1MB等于2^20字节，其十六进制表示为0x100000，因此地址范围为0x00000~0xFFFFF。</li><li>1TB是2^40个Byte。在计算机存储界，K、M、G、T为二进制单位，所以1TB&#x3D;1024GB&#x3D;1024<em>1024MB&#x3D;1024</em>1024<em>1024KB&#x3D;1024</em>1024<em>1024</em>1024Byte&#x3D;2^40Byte。</li><li>1MB是2^20个Byte。1MB&#x3D;1024KB&#x3D;1024*1024Byte&#x3D;2^20Byte。</li><li>1KB的存储器的地址编号从0x000到0x3FF。1KB等于2^10字节，其十六进制表示为0x400，因此地址范围为0x000~0x3FF。</li><li>1KB的存储器可以存储8192个bit。因为1KB&#x3D;1024Byte，而1Byte&#x3D;8bit，所以1KB&#x3D;1024*8bit&#x3D;8192bit。</li><li>1GB是2^30个Byte。1GB&#x3D;1024MB&#x3D;1024<em>1024KB&#x3D;1024</em>1024*1024Byte&#x3D;2^30Byte。</li><li>8086的数据总线宽度为16根，从内存中读取20字节的数据，8086至少要读10次。因为每次可以读取16位（即2字节），所以20字节需要10次读取。</li><li>8086的数据总线宽度为32根，从内存中读取20字节的数据，8086至少要读5次。因为每次可以读取32位（即4字节），所以20字节需要5次读取。</li><li>在存储器中，数据和程序以二进制形式存放。</li><li>8086CPU的地址总线的宽度是20位，数据总线的宽度是16位，则8086CPU的寻址能力为1MB。因为20位地址总线可以寻址2^20&#x3D;1MB。</li><li>8086CPU的地址总线宽度为32根，8086CPU的寻址能力是4GB。因为32位地址总线可以寻址2^32&#x3D;4GB。</li><li>从内存中读取1024个字节的数据，8086CPU至少需要读256次，则8086的数据总线宽度为32位。因为每次可以读取32位（即4字节），所以1024字节需要256次读取。</li><li>8086中，一个字单元可以存储16个bit。因为8086的数据总线宽度为16位，所以一个字单元是16位。</li><li>一个1KB的存储器包含1024个存储单元，可以存储8192个二进制位。因为1KB&#x3D;1024Byte，而1Byte&#x3D;8bit，所以1KB&#x3D;1024*8bit&#x3D;8192bit。</li></ol><h3 id="第2-3章"><a href="#第2-3章" class="headerlink" title="第2~3章"></a>第2~3章</h3><ol><li>在Debug中，用“d 075A：110 11F”查看内存，结果如下：</li></ol><p>075A：0110 B8 00  00 FF 07 00 B8 4C — CD 21 F3 69 20 8A 03 A1</p><p>那么，字型数据 00B8H对应的地址为（ ）。</p><p>A. 076A：11  B. 076A：16    C. 076B：0    D. 无法确定</p><ol start="2"><li>给定段地址为1234H，仅通过变化偏移地址寻址，8086CPU的寻址范围为_________(物理地址）。</li></ol><p>A、 12340H<del>1234FH        B、 01234H</del>F1234H        C、 12340H<del>2233FH        D、 12340H</del>FFFFFH</p><ol start="3"><li><p>给定段地址101H，仅通过变化偏移地址寻址，8086CPU可以寻址到地址为（ ）的内存单元。</p><p>A. 0   B. 12000H   C. 10000H   D. 1FFFFH</p></li><li><p>下列寄存器中，（  ）是8位寄存器。</p></li></ol><p>A、 AX        B、 BL       C、 CS           D、 DI</p><ol start="5"><li>下列寄存器中，（ ）是16位寄存器</li></ol><p>A、 AX       B、 BL       C、 CH       D、 DL</p><ol start="6"><li>下列说法正确的是（ ）</li></ol><p>A、 AX寄存器不能分为两个8位的寄存器</p><p>B、 BP寄存器不能分为两个8位的寄存器</p><p>C、 CS可以分为两个8位的寄存器</p><p>D、 PSW是一个通用寄存器，可以存放一般性的数据</p><ol start="7"><li>下面指令中，错误的指令是（  ）。</li></ol><p>A、 MOV AX,1000             B、 MOV AL,BL</p><p>C、 MOV AL,1000             D、 MOV  DS,AX</p><ol start="8"><li>下面指令中，错误的指令是（  ）。</li></ol><p>A、 MOV AX,100          B、 MOV BX,AL</p><p>C、 MOV AL,100          D、 ADD AL,BL</p><ol start="9"><li>下面指令中，正确的指令是（  ）。</li></ol><p>A、 MOV AX,100          B、 MOV BX,AL</p><p>C、 MOV 100，AL        D、 ADD AL,1234H</p><ol start="10"><li>下面的5条指令执行后，cpu几次修改IP？（ ）</li></ol><p>mov ax,2000H</p><p>mov bx,3000h</p><p>add ax,bx</p><p>sub bx,bx</p><p>jmp bx</p><p>A、 5        B、 6        C、 7        D、 不确定</p><ol start="11"><li>代码段寄存器是（）</li></ol><p>A、 CS       B、 DS       C、 SS       D、 ES</p><ol start="12"><li>指令指针寄存器是（）</li></ol><p>A、 AX       B、 BP       C、 IP        D、 DS</p><ol start="13"><li>在debug中，查看、修改CPU的寄存器内容是（ ）命令。</li></ol><p>A、 T        B、 A        C、 E        D、 R</p><ol start="14"><li>在debug中，查看内存中的内容是（ ）命令。</li></ol><p>A、 T        B、 A        C、 D        D、 R</p><ol start="15"><li>在debug中，修改内存中的内容是（ ）命令。</li></ol><p>A、 T        B、 E        C、 D        D、 R</p><ol start="16"><li>在debug中，执行CS、IP指向的内存单元处的指令是（ ）命令。</li></ol><p>A、 T        B、 E        C、 D        D、 R</p><ol start="17"><li>存储单元45A0：7CB9H的物理地址为 （  ）</li></ol><p>A、 45AB9H      B、 4D6B9H       C、 C259H        D、 47CB9H</p><ol start="18"><li>8086CPU中，任意时刻，CPU将（ ）指向的内容当作指令来执行。</li></ol><p>A. DS、SI   B. CS、IP   C. SS、SP   D. ES、DI</p><ol start="19"><li>下列关于Debug的说法，错误的是（ ）。</li></ol><p>A. R命令可以修改寄存器的内容。   B. E命令可以修改内存单元的内容。</p><p>C. T命令每次只执行一条指令。    D. D命令可以查看内存单元的内容。</p><ol start="20"><li>对于8086CPU，错误的指令是（  ）。</li></ol><p>A. mov ax,bx   B. mov ax,[bx]   C. mov ds,0   D. mov ax,0</p><ol start="21"><li>以下指令执行后，寄存器ax的值为（  ）。</li></ol><p>mov ax, 0095h</p><p>mov ah, 95h</p><p>add al, ah</p><p>A. 9680H  B. 968AH   C. 962AH   D. 952AH</p><ol start="22"><li>关于8086CPU，下列说法错误的是（  ）。</li></ol><p>A. 是16位结构的CPU，其能够一次性处理传输暂时存储的信息的最大长度是16bit</p><p>B. 采用“段地址×16 + 偏移地址 &#x3D; 物理地址”的方式生成存储单元的地址</p><p>C. 执行push指令和pop指令时，8086CPU从SS:SP中得到栈顶的地址</p><p>D. 在编程时，可将长度为1KB的一组地址连续，起始地址为32的倍数的内存单元当成栈空间来使用。</p><ol start="23"><li>此时ax的值为00C5H，执行完“add al,85H”后，ax中的值是多少？（  ）</li></ol><p>A.0158H  B.014AH  C.0058H  D.004AH</p><ol start="24"><li>关于汇编语言中“段”的概念，以下说法错误的是（  ）。</li></ol><p>A.用mov、add、sub等指令通过偏移地址访问data段中的数据前，应将data段的段地址放在ds中。</p><p>B.一个段，可以既是数据段，又是桟段。</p><p>C.一个段，不可以既是代码段，又是数据段。</p><p>D.一个段中的内容对CPU来说是指令还是数据，关键在于对相关寄存器的设置。</p><ol start="25"><li>8086PC机一个段的最大长度为（  ）。</li></ol><p>A.64Byte  B.64Kbit  C.1MB  D.64KB</p><ol start="26"><li>以下关于8086CPU的栈机制的说法，错误的是（  ）。</li></ol><p>A.任意时刻，SS:SP指向栈顶元素。</p><p>B.retf指令不会引起栈空间超界。</p><p>C.push和pop实质上是一种内存传送指令。</p><p>D.8086CPU的栈机制，没有对避免栈空间超界提供支持。</p><ol start="27"><li>设置10000H～1FFFFH的内存空间为栈段，初始状态栈是空的，此时，SS、SP的值是（  ）。</li></ol><p>A.SS&#x3D;1000H、SP&#x3D;FFFEH        B.SS&#x3D;0H、SP&#x3D;FFFEH</p><p>C.SS&#x3D;1000H、SP&#x3D;0              D.SS&#x3D;2000H、SP&#x3D;0</p><ol start="28"><li>完成同指令XCHG AX ,BX 相同功能的指令或指令序列是（  ）</li></ol><p>A、 MOV AX,BX</p><p>B、 MOV BX,AX</p><p>C、 PUSH AX</p><p>POP BX</p><p>D、 MOV CX,AX</p><p>MOV AX,BX</p><p>  MOV BX,CX</p><ol start="29"><li>堆栈段段寄存器是（）</li></ol><p>A、 CS       B、 DS       C、 SS       D、 ES</p><ol start="30"><li>堆栈指针寄存器是（）</li></ol><p>A、 BP       B、 SP       C、 SS       D、 IP</p><ol start="31"><li>执行一次PUSH指令，SP寄存器将（ ）</li></ol><p>A、 加1          B、 减1          C、 加2          D、 减2</p><ol start="32"><li>执行一次POP指令，SP寄存器将（ ）</li></ol><p>A、 加1          B、 减1          C、 加2          D、 减2</p><ol start="33"><li>关于8086CPU堆栈，以下说法不正确的是（  ）</li></ol><p>A、 操作对象是字                       B、 堆栈的长度是没有限制</p><p>C、 任何时刻，SS:SP指向栈顶元素      D、 堆栈位于内存中</p><ol start="34"><li>下面指令正确的是（ ）</li></ol><p>A、 POP AX          B、 POP 126CH      C、 PUSH AL         D、 PUSH AX,BX</p><ol start="35"><li>8086系统中，一个堆栈最大可以设置为多少？（）</li></ol><p>A、 1MB         B、 1KB          C、 64KB          D、 64MB</p><ol start="36"><li>如果要将20000h~21001h这段空间设置为堆栈，初始状态栈是空的，应该选择程序段（）。</li></ol><p>A、MOV SS,20000H</p><p>MOV SP,21001H</p><p>B、MOV AX,2000H</p><p>MOV SS,AX</p><p>MOV SP,1001H</p><p>C、 MOV AX,2000H</p><p>MOV SS,AX</p><p>MOV SP,1002H</p><p>D、 MOV AX,2000H</p><p>MOV SS,AX</p><p>MOV SP,1000H</p><ol start="37"><li>设 SP初值为2000H，执行指令”PUSH AX”后，SP的值是（）</li></ol><p>A、 1FFFH             B、1998H         C、 2002H          D、1FFEH</p><ol start="38"><li>在debug中，用“d 1000：0 0f”查看内存，结果如下。</li></ol><p>1000:0000  89 85 4C ED 38 7B F8 10 -29 8D 44 9D 3E 75 A8 20</p><p>若DS&#x3D;1000H，AX&#x3D;0，那么汇编指令“MOV  AL,[0008H]”执行完后AX 的值为</p><p>A、 0H     B、 2900H         C、 0029H        D、 0010H</p><ol start="39"><li>在debug中，用“d 1000：0 0f”查看内存，结果如下。</li></ol><p>1000:0000  89 85 4C ED 38 7B F8 10 -29 8D 44 9D 3E 75 A8 20</p><p>DS&#x3D;1000H，AX&#x3D;0，那么汇编指令“MOV  AX,[0008H]”执行完后AX 的值为</p><p>A、 1029H        B、 298DH        C、 2910H        D、 8D29H</p><ol start="40"><li>在debug中，用“d 1000：0 0f”查看内存，结果如下。</li></ol><p>1000:0000  89 85 4C ED 38 7B F8 10 -29 8D 44 9D 3E 75 A8 20</p><p>1000:0010  79 87 C4 EF 25 66 F7 40 -A9 BD C4 5D 6E 7F A1 2B</p><p>1000:0020  81 15 4D ED 83 B7 8F 1A -89 7D B6 9C 3E 73 A2 21</p><p>执行前DS&#x3D;0，AX&#x3D;0，BX&#x3D;0，那么执行下列汇编指令，完后AX 的值为（   ）</p><p>MOV AX,1002H</p><p>MOV DS,AX</p><p>MOV AX,[0]</p><p>A、 8589H        B、 8779H        C、 1581H        D、 8985H</p><ol start="41"><li>在debug中，用“d 1000：0 0f”查看内存，结果如下。</li></ol><p>1000:0000  89 85 4C ED 38 7B F8 10 -29 8D 44 9D 3E 75 A8 20</p><p>1000:0010  79 87 C4 EF 25 66 F7 40 -A9 BD C4 5D 6E 7F A1 2B</p><p>1000:0020  81 15 4D ED 83 B7 8F 1A -89 7D B6 9C 3E 73 A2 21</p><p>执行前DS&#x3D;0，AX&#x3D;0，BX&#x3D;0，那么执行下列汇编指令，完后AX 的值为（   ）</p><p>MOV AX,1000H</p><p>MOV DS,AX</p><p>MOV AX,[0]</p><p>A、 8589H        B、 8779H        C、 1581H        D、 8985H</p><ol start="42"><li><p>有以下几条指令（debug下的指令格式）：</p><p>mov ax,1000</p><p>mov ss,ax</p><p>mov sp,0100</p><p>mov ax,5CCA</p><p>push ax</p><p>指令“push ax”执行后，sp的值和修改的内存单元的地址是（  ）。</p></li></ol><p>A. 0100H，1000H：0100H   B. 00feH，1000H：00feH  C. 0100，1000：0100  D. 98，1000：98</p><ol start="43"><li>如果将10000H~1FFFFH这段内存空间当做是栈空间，假设SS&#x3D;1000H，则下列说法正确的是（）。</li></ol><p>A.栈空的时候，SP的值为FFFEH     B.栈满的时候，SP的值为0</p><p>C.这段栈空间的大小为4KB       D.使用这段栈空间，有可能会出现栈越界</p><ol start="44"><li>给定段地址为1001h，则8086CPu可以寻址到物理地址为（  ）的内存单元。</li></ol><p>A.0   B.20000H    C.10000H     D.20010H</p><ol start="45"><li>CPU传递到地址总线上的地址是（  ）。</li></ol><p>A.逻辑地址   B.偏移地址  C.物理地址   D.段地址</p><ol start="46"><li>关于8086CPU的几个寄存器，正确的说法是（  ）。</li></ol><p>A.可将BX当成两个8位寄存器，在偏移地址范围为0~255时，可以用“mov ax,[bl]”来实现将内存中的数据读到ax中</p><p>B.可以用“byte ptr”实现将SI当成两个8位寄存器使用</p><p>C.可将AX、BX、CX、DX当成8个8位寄存器使用</p><p>D.AX、ah、al是不同的寄存器，指令“add al,bl”的执行不会影响AX的值</p><ol start="47"><li>下列与8086CPU寻址相关的说法，错误的是（  ）。</li></ol><p>A.8086CPU有20根地址总线，它的寻址能力为1MB</p><p>B.一个物理地址可以对应多个段地址与偏移地址</p><p>C.因为段寄存器是16位，所以一个段最大为64KB</p><p>D.CPU内部有一个能合成20位地址的地址加法器</p><ol start="48"><li>以下指令执行后，SP的值为（  ）。</li></ol><p>mov sp,0</p><p>push ss</p><p>A.0   B.0fffeh    C.2    D.内存ss：0处的数据的值</p><ol start="49"><li>用debug的e命令向b810：0010处写入数据，接着用d命令查看，发现b810：0010处并没有刚刚写入的数据，其原因是（  ）。</li></ol><p>A.此处用于存储系统时间，一直在自动更新</p><p>B.debug存在延时，第二次查看即可看到用e命令写入的数据</p><p>C.此处处于ROM空间，不可以被改变</p><p>D.此处处于显存空间，当屏幕刷新时，此处的数据被更新了</p><ol start="50"><li>8086CPU中，如果某内存单元的物理地址为4FCE0，其段地址和偏移地址一定不会是（  ）。</li></ol><p>A.4FC0：00E0 B.4CE0：2EE0 C.40CE：0F00 D.40C0：F0E0</p><ol start="51"><li>以下指令执行后，AX寄存器的值是（  ）。</li></ol><p>mov ax,017ch</p><p>add al,0b4h</p><p>A.0130H      B.0230H      C.012FH      D.022FH</p><h4 id="答案与解析-1"><a href="#答案与解析-1" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>076B:0,和075A:0110是等价的，自己算算就知道了</li><li>8086CPU的寻址范围为 <code>12340H</code> 到 <code>2233fH</code>。</li><li>给定段地址 <code>101H</code>，8086CPU可以寻址到地址为 &#96;10000H</li><li>8位寄存器包括 <code>BL</code>。其他选项如 <code>AX</code>、<code>CS</code>、<code>DI</code> 都是16位寄存器。</li><li>16位寄存器包括 <code>AX</code>。其他选项如 <code>BL</code>、<code>CH</code>、<code>DL</code> 都是8位寄存器。</li><li>正确的说法是 <code>AX寄存器不能分为两个8位的寄存器</code>。其他选项不正确，因为 <code>BP</code> 和 <code>CS</code> 不能分为两个8位的寄存器，而 <code>PSW</code> 是一个特殊的寄存器，用于存放标志位，不是通用寄存器。</li><li>错误的指令是 <code>MOV AL,1000</code>。因为 <code>AL</code> 是8位寄存器，不能直接加载16位的立即数。</li><li>错误的指令是 <code>MOV BX,AL</code>。因为 <code>BX</code> 是16位寄存器，不能直接从8位寄存器 <code>AL</code> 获取数据。</li><li>正确的指令是 <code>MOV AX，100</code>。</li><li>执行这5条指令后，CPU会修改IP 6次。这是因为每次修改指令指针 <code>IP</code> 或代码段寄存器 <code>CS</code> 都会导致IP的修改。</li><li>代码段寄存器是 <code>CS</code>。</li><li>指令指针寄存器是 <code>IP</code>。</li><li>在debug中，查看、修改CPU的寄存器内容是 <code>R</code> 命令。</li><li>在debug中，查看内存中的内容是 <code>D</code> 命令。</li><li>在debug中，修改内存中的内容是 <code>E</code> 命令。</li><li>在debug中，执行CS、IP指向的内存单元处的指令是 <code>T</code> 命令。</li><li>存储单元 <code>45A0：7CB9H</code> 的物理地址为 <code>4D6B9H</code>。这是通过将段地址 <code>45A0H</code> 乘以16（即左移4位）然后加上偏移地址 <code>7CB9H</code> 得到的。</li><li>8086CPU中，任意时刻，CPU将 <code>CS、IP</code> 指向的内容当作指令来执行。</li><li>这道题选c，t命令是单步中断，并不是一次只执行一个指令</li><li>对于8086CPU，错误的指令是 <code>mov ds,0</code>。因为 <code>DS</code> 是段寄存器，不能直接用立即数进行赋值。</li><li>执行这些指令后，寄存器 <code>AX</code> 的值为 <code>962AH</code>。首先，<code>mov ax, 0095h</code> 将 <code>AX</code> 设置为 <code>0095H</code>。接着，<code>mov ah, 95h</code> 将 <code>AH</code> 设置为 <code>95H</code>，但由于 <code>AH</code> 是 <code>AX</code> 的高8位，因此 <code>AX</code> 实际上变成了 <code>9595H</code>。最后，<code>add al, ah</code> 将 <code>AL</code>（即 <code>AX</code> 的低8位）和 <code>AH</code> 相加，结果为 <code>12AH</code>，最后 <code>AX</code> 的值为 962AH&#96;。</li><li>关于8086CPU，错误的说法是 <code>D. 在编程时，可将长度为1KB的一组地址连续，起始地址为32的倍数的内存单元当成栈空间来使用</code>。8086CPU的栈空间没有特定的起始地址要求，只要保证栈空间的连续性和正确设置栈指针即可。</li><li><code>AX</code> 的初始值为 <code>00C5H</code>，执行 <code>add al, 85H</code> 后，<code>AX</code> 中的值是 <code>014AH</code>。这是因为 <code>AL</code>（<code>AX</code> 的低8位）原本是 <code>C5H</code>，加上 <code>85H</code> 后得到 <code>14AH</code>，<code>AH</code>（<code>AX</code> 的高8位）保持不变。</li><li>关于汇编语言中“段”的概念，错误的说法是 <code>C. 一个段，不可以既是代码段，又是数据段</code>。在汇编语言中，一个段可以同时用作代码段和数据段。</li><li>8086PC机一个段的最大长度为 <code>64KB</code>。</li><li>选B，retf是利用了堆栈的，原因自己看书!</li><li>设置 <code>10000H～1FFFFH</code> 的内存空间为栈段，初始状态栈是空的，此时，<code>SS</code>、<code>SP</code> 的值是 <code>SS=1000H</code>、<code>SP=FFFEH</code>。</li><li>完成同指令 <code>XCHG AX, BX</code> 相同功能的指令或指令序列是 <code>D. MOV CX, AX; MOV AX, BX; MOV BX, CX</code>。这组指令首先将 <code>AX</code> 的值暂存到 <code>CX</code>，然后将 <code>AX</code> 和 <code>BX</code> 交换，最后将暂存的值从 <code>CX</code> 恢复到 <code>BX</code>。</li><li>堆栈段段寄存器是 <code>SS</code>。</li><li>堆栈指针寄存器是 <code>SP</code>。</li><li>执行一次 <code>PUSH</code> 指令，<code>SP</code> 寄存器将 <code>减2</code>。</li><li>执行一次 <code>POP</code> 指令，<code>SP</code> 寄存器将 <code>加2</code>。</li><li>关于8086CPU堆栈，不正确的说法是 <code>B. 堆栈的长度是没有限制</code>。实际上，堆栈的长度是有限的，取决于可用内存的大小。</li><li>下面指令正确的是 <code>A. POP AX</code>。</li><li>8086系统中，一个堆栈最大可以设置为 <code>64KB</code>。</li><li>选c，sp的值要比栈底大1，细节自己看书</li><li>设 <code>SP</code> 初值为 <code>2000H</code>，执行指令 “PUSH AX” 后，<code>SP</code> 的值是 <code>1FFEH</code>。这是因为 <code>AX</code> 是一个字，所以 <code>PUSH AX</code> 将 <code>AX</code> 的值压入栈，<code>SP</code> 减少2。</li><li>0029H</li><li>8D29H</li><li>1581H,1002H与1000:20等价，自己看看在哪个位置就行</li><li>在 <code>debug</code> 中，用 “d 1000：0 0f” 查看内存，结果如下。执行前 <code>DS=0</code>，<code>AX=0</code>，<code>BX=0</code>，那么执行下列汇编指令后 <code>AX</code> 的值为 <code>8589H</code>。这是因为 <code>MOV AX, 1000H</code> 将 <code>AX</code> 设置为 <code>1000H</code>，然后 <code>MOV DS, AX</code> 将数据段寄存器 <code>DS</code> 设置为 <code>1000H</code>。接着 <code>MOV AX,[0]</code> 将 <code>[0]</code> 处的值加载到 <code>AX</code> 中，即 <code>8589H</code>。</li><li>指令 “push ax” 执行后，<code>SP</code> 的值和修改的内存单元的地址是 <code>B. 00feH，1000H：00feH</code>。这是因为 <code>SP</code> 在执行 <code>push ax</code> 指令前为 <code>0100H</code>，执行后 <code>SP</code> 减1变为 <code>00feH</code>。修改的内存单元地址为 <code>1000H：00feH</code>，因为 <code>SS</code> 为 <code>1000H</code>，<code>SP</code> 为 <code>00feH</code>。</li><li>如果将 <code>10000H～1FFFFH</code> 这段内存空间当做是栈空间，假设 <code>SS=1000H</code>，则正确的说法是  <code>D. 使用这段栈空间，有可能会出现栈越界</code>。</li><li>给定段地址为 <code>1001h</code>，则8086CPU可以寻址到物理地址为 <code>10000H</code> 的内存单元。</li><li>CPU传递到地址总线上的地址是 <code>C. 物理地址</code>。</li><li>C.可将AX、BX、CX、DX当成8个8位寄存器使用</li><li>下列与8086CPU寻址相关的说法，错误的是 <code>C. 因为段寄存器是16位，所以一个段最大为64KB</code></li><li>以下指令执行后，<code>SP</code> 的值为 <code>A. 0</code>。这是因为 <code>mov sp,0</code> 将 <code>SP</code> 设置为 <code>0</code>，然后 <code>push ss</code> 将 <code>SS</code> 的值压入栈，由于 <code>SP</code> 已经是 <code>0</code>，所以栈溢出，<code>SP</code> 保持不变。</li><li>用 <code>debug</code> 的 <code>e</code> 命令向 <code>b810：0010</code> 处写入数据，接着用 <code>d</code> 命令查看，发现 <code>b810：0010</code> 处并没有刚刚写入的数据，其原因是 <code>D. 此处处于显存空间，当屏幕刷新时，此处的数据被更新了</code>。</li><li>8086CPU中，如果某内存单元的物理地址为 <code>4FCE0</code>，其段地址和偏移地址一定不会是 <code>D. 40C0：F0E0</code>。这是因为 <code>40C0H</code> 不是 <code>4FCE0</code> 的有效段地址，且 <code>F0E0</code> 不是 <code>4FCE0</code> 的有效偏移地址。</li><li>0230H，选B</li></ol><h3 id="第4-6章"><a href="#第4-6章" class="headerlink" title="第4~6章"></a>第4~6章</h3><ol><li>一个汇编源程序，从写出到最后被CPU执行，依次经历了哪几步？（  ）</li></ol><p>A.编译、加载、连接、执行    B.加载、编译、连接、执行</p><p>C.连接、编译、加载、执行    D.编译、连接、加载、执行</p><ol start="2"><li>关于编译和连接，错误的说法是（  ）。</li></ol><p>A.编译产生的*.obj文件不能在操作系统下直接运行</p><p>B.连接产生的*.exe文件里面没有伪指令</p><p>C.编译可以检查出语法错误</p><p>D.连接可以检查出逻辑错误</p><ol start="3"><li><p>源程序中有如下两个按先后顺序定义的段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a segment </span><br><span class="line">db 1,2,3,4,5,6,7,8 </span><br><span class="line">a ends </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b segment  </span><br><span class="line">db 1,2,3,4,5,6,7,8 </span><br><span class="line">b ends </span><br></pre></td></tr></table></figure><p>如果a段中“1” 这个数据的物理地址是X，则b段中“1”这个数据的物理地址是（  ）。</p><p>A. X   B. X+1   C. X+16    D. X+64</p></li><li><p>Debug加载程序后，假设PSP的段地址为SA，偏移地址为0，则程序的起始地址是（ ）。</p></li></ol><p>A. SA×16H  B. SA×16   C. (SA+16H)×16H   D. (SA+16)×16</p><ol start="5"><li>下列关于汇编语言源程序的说法，错误的是（ ）</li></ol><p>A. 一个汇编语言源程序从写出到执行需经过.编写.asm文件→将.asm文件编译为.obj文件→将.obj文件连接成.exe文件→.exe文件执行。</p><p>B. 在汇编语言源程序中，包含三种指令：汇编指令、伪指令、其他符号。</p><p>C. 在汇编语言源程序中，不由编译器执行的伪指令有对应的机器指令。</p><p>D. 在汇编语言源程序中，汇编指令是有对应机器码的指令，其所对应的机器指令由CPU执行。</p><pre><code>``assembly       mov ax,4c00h       Int 21h       ``</code></pre><p>CPU执行完这两条指令后，（  ）。</p><p>A. 返回到DOS   B. 返回到DEBUG   C. 返回到COMMOND    D. 前三个选项都不对</p><ol start="7"><li>下列说法正确的是（  ）。</li></ol><p>A. 代码段中的信息都会被当做指令执行</p><p>B. CS：IP指向过的指令一定被CPU执行过</p><p>C. 用Debug的t命令，一次只能执行一条汇编指令</p><p>D. 通过“ASSUME”建立的段与段寄存器之间的关联是编译器要处理的</p><ol start="8"><li>执行下面的指令后，正确的结果是（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov al,198</span><br><span class="line"></span><br><span class="line">and al, 01010011B </span><br><span class="line"></span><br><span class="line">or al,01010101B</span><br></pre></td></tr></table></figure><p>A. al &#x3D; 57   B. al &#x3D; 57H   C. al &#x3D; 42    D. al &#x3D; 42H</p><ol start="9"><li>需要使用DS的指令是（  ）。</li></ol><p>A. mov ax,[bp]  B. inc word ptr [bx]   C. add al,cl   D. and [bp],al</p><ol start="10"><li><pre><code class="assembly">data segmentdd 1234hdata ends<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data段中的数据1234h在内存中的存储情况为（  ）。</span><br><span class="line"></span><br><span class="line">A. 12 34 00 00   B. 34 12 00 00   C. 00 00 12 34   D. 00 00 34 12</span><br><span class="line"></span><br><span class="line">11. BIOS存储在下列哪种硬件中？（  ）</span><br><span class="line"></span><br><span class="line">A.   RAM  B.ROM  C.CPU  D.CMOS</span><br><span class="line"></span><br><span class="line">12. 主板生产日期存储在下列哪种硬件中？（  ）</span><br><span class="line"></span><br><span class="line">A.RAM  B.ROM  C.CPU  D.CMOS</span><br><span class="line"></span><br><span class="line">13. 用 [di]、[bp]的方式访问内存时，8086CPU默认的段寄存器依次是（  ）。</span><br><span class="line"></span><br><span class="line">A.ds、es   B.ds、ss  C.ss、ds  D.es、ss</span><br><span class="line"></span><br><span class="line">14. 在debug中查看内存，显示如下：</span><br><span class="line"></span><br><span class="line">073F：0000   CD 20 3E A7 00 EA FD FF-AD DE 4F 03 A3 01 8A 03</span><br><span class="line"></span><br><span class="line">073F：0010   A3 01 17 03 A3 01 92 01-01 01 01 00 02 FF FF FF</span><br><span class="line"></span><br><span class="line">073FH：0013H处的字型数据是（  ）。</span><br><span class="line"></span><br><span class="line">A.007AH   B.03A3H  C.A303H   D.0317H</span><br><span class="line"></span><br><span class="line">15. 对于8086CPU，正确的指令是（ ）。</span><br><span class="line"></span><br><span class="line">A.mov ax,[bp+dx]    B.mov ax,ds.[bp+bx]</span><br><span class="line"></span><br><span class="line">C.mov ax,ss：[si][di]  D.mov ax,cs.6[si]</span><br><span class="line"></span><br><span class="line">16. 可以修改CX的指令是（  ）。</span><br><span class="line"></span><br><span class="line">A.jmp  B.div  C.shl  D.jcxz</span><br><span class="line"></span><br><span class="line">17. 关于标号，错误的说法是（  ）。</span><br><span class="line"></span><br><span class="line">A.数据标号表示了内存单元的地址和长度。</span><br><span class="line"></span><br><span class="line">B.后边加“：”的地址标号，只能在代码段中使用。</span><br><span class="line"></span><br><span class="line">C.应用assume将指令中的数据标号所在的段，与一个段寄存器联系起来，这样，使用数据标号的指令，就可以从段寄存器中得到所用数据标号的段地址。</span><br><span class="line"></span><br><span class="line">D.可以将一个标号集合存储在直接定址表中。</span><br><span class="line"></span><br><span class="line">18. 关于PSP，错误的说法是（  ）。</span><br><span class="line"></span><br><span class="line">A.这个程序设置(CS)*16+(IP)= PSP所在内存空间的首地址。</span><br><span class="line"></span><br><span class="line">```assembly</span><br><span class="line">assume cs：code</span><br><span class="line">code segment </span><br><span class="line">start： mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line">mov word ptr es：[200h],0</span><br><span class="line">mov es：[202h],ds</span><br><span class="line">jmp dword ptr es：[200h]</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>B.PSP共有256个字节。</p><p>C.DOS通过PSP来与其所加载的程序进行通信。</p><p>D.用debug加载一个其功能是设置(ds)&#x3D;(cs)的程序后，即用a命令写且用T命令运行以下程序段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,ds</span><br><span class="line">sub ax,10</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><p>之后用“d ds：0 ff”，可对PSP所在的内存空间进行查看。</p><ol start="19"><li>以下指令执行后，ax的值是（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,6776h</span><br><span class="line"></span><br><span class="line">add al,90h</span><br><span class="line"></span><br><span class="line">add ah,90h</span><br></pre></td></tr></table></figure><p>A.6806H  B.F806H   C.F706H    D.6706H</p><ol start="20"><li>以下指令执行后，al的值是多少？（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov al,01100011b</span><br><span class="line"></span><br><span class="line">and al,00111011b</span><br><span class="line"></span><br><span class="line">or al,00111011b</span><br></pre></td></tr></table></figure><p>A.00100011B   B.00111011B   C.01111011B   D.前三个选项都不对。</p><ol start="21"><li>以下程序运行时，源程序的指令中，CPU执行的第一条指令是？（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assume cs：a</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">mov ax,20h</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a segment</span><br><span class="line"></span><br><span class="line">mov bx,30h</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b segment</span><br><span class="line"></span><br><span class="line">mov bx,40h</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>A.mov ax,20h   B.mov bx,30h  C.mov bx,40h    D.以上选项都不对</p><ol start="22"><li>对于8086CPU，正确的指令是（  ）。</li></ol><p>A.INC WORD PTR DS：[0]      B.MOV ES：[0],DS：[0]</p><p>C.MOV AX,[BX+BP]         D.ADD CS,AX</p><ol start="23"><li>按照地址从低到高的顺序排列，双字型数据16在内存中如何存储？（  ）</li></ol><p>A.00 00 10 00    B.00 00 00 10</p><p>C.00 10 00 00    D.10 00 00 00</p><ol start="24"><li>不可能出现在可执行文件中的是（  ）。</li></ol><p>A.机器码    B.伪指令  C.源程序中定义的数据  D.JMP指令中的地址</p><ol start="25"><li>关于在程序中使用内存空间，不正确的说法是（  ）。</li></ol><p>A.可以通过定义段的方式给程序分配安全的内存空间</p><p>B.DOS和应用程序一般不会使用0.200~0.2FF这段空间</p><p>C.使用安全的内存空间，不会影响DOS操作系统和其他合法程序的运行</p><p>D.使用MOV指令时，不用担心损坏系统数据</p><ol start="26"><li>以下指令中，可以被CPU执行的指令是（  ）。</li></ol><p>A.SEGMENT   B.ASSUME   C.STI    D.END</p><ol start="27"><li>CPU在读取指令时，实际读到的是什么？（  ）</li></ol><p>A.伪指令和汇编指令所对应的字符串</p><p>B.用汇编语言写的源程序中的信息</p><p>C.由一系列二进制位组成的信息</p><p>D.汇编指令所对应的字符串</p><ol start="28"><li>对于8086CPU，错误的指令是（  ）。</li></ol><p>A.mov ax,ds    B.push [bx]     C.inc [bx]     D.add bp,2</p><ol start="29"><li>对于8086CPU，下列关于段的说法，错误的是（  ）。</li></ol><p>A.一个段的起始地址必须是16的整数倍</p><p>B.在源程序中定义一个段，在运行程序时，CPU不会因此定义而知道这个段的大小。</p><p>C.一块内存空间可以既是代码段，又是数据段。</p><p>D.CPU将某个段用做栈，是因为assume指令将其与SS寄存器相关联</p><ol start="30"><li>（  ）的功能与“mov al,’d’”的 功能相同。</li></ol><p>A.mov ax,’d’   B.mov al,’a’+3   C.mov al,’A’+3   D.or al,’d’</p><ol start="31"><li>关于汇编语言中的指令，正确的说法是（  ）。</li></ol><p>A.汇编语言中的标号属于伪指令</p><p>B.汇编指令一定有对应的机器码</p><p>C.伪指令由编译器识别，编译器将其转化为对应的机器码</p><p>D.“+”一般会被编译成add指令</p><ol start="32"><li>以下程序运行时，“sub ax,masm”执行后，ax的值是（  ）。</li></ol><p>assume cs：code</p><p>masm segment</p><p>dw 5 dup(‘a’,’b’,’c’)</p><p>masm ends</p><p>code segment</p><p>start： mov ax,code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sub ax,masm</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><p>code ends</p><p>end start</p><p>A.15    B.1    C.2   D.3</p><ol start="33"><li>关于debug的使用，错误的说法是（  ）。</li></ol><p>A.Debug将程序加载到内存后，不执行任何命令前，IP的值一定为零</p><p>B.通过debug可以查看标志寄存器某些位的值</p><p>C.Debug将程序加载到内存后，不执行任何命令前，CX的值有可能是1024</p><p>D.T命令有可能一次执行一条以上的指令</p><ol start="34"><li>关于标号，下列说法正确的是（  ）。</li></ol><p>A.   地址标号和数据标号都可以在jmp后使用</p><p>B.   后面带“：”的标号，用在代码段中是地址标号，用在数据段中是数据标号</p><p>C.   用在代码段中的数据标号只表示内存单元的地址</p><p>D.   在and与or指令中不可用地址标号</p><p>E.   前几个选项都不对</p><ol start="35"><li>汇编语言中不包括哪个元素？（  ）</li></ol><p>A.汇编指令</p><p>B.机器指令</p><p>C.伪指令</p><p>D.“+”、“-”、“*”、“&#x2F;”等符号</p><ol start="36"><li>对于编译、连接、运行，错误的说法是（  ）。</li></ol><p>A.伪指令在编译的过程中被编译器执行了</p><p>B.使用masm编译器进行编译，只能生成目标文件</p><p>C.可执行文件中包含程序和描述信息</p><p>D.DOS提供的command程序可以将可执行文件中的程序加载进内存</p><ol start="37"><li>以下说法中，错误的是（  ）。</li></ol><p>A.在用masm.exe编译的汇编语言的源程序中，end和ends都属于伪指令</p><p>B.在debug中调试一个程序，在用p命令依次执行程序中的“mov ax,4c00h”与</p><p>“int 21h”两条指令后，屏幕上显示“Program terminated normally”，可说明此</p><p>时程序已返回到DOS</p><p> C.用于程序返回的相关指令是CPU来执行的</p><p> D.对于程序返回，DOS提供了相应的中断例程</p><ol start="38"><li>用debug写几条指令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,20</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,[1]</span><br></pre></td></tr></table></figure><p>  之后查看内存，显示如下：</p><p>0：200 80 00 70 00 60 00 ……</p><p>接着用t命令执行这几条指令，“mov ax,[1]”执行后，AX的值是多少？（  ）</p><p> A.7000H      B.0070H      C.1            D.0080H</p><ol start="39"><li><p>以下指令执行后，AX的值是多少？（  ）</p><p>mov ax,20</p><p>mov es,ax</p><p>mov byte ptr es：[0],80h</p><p>mov byte ptr es：[1],00h</p><p>mov byte ptr es：[2],70h</p><p>mov byte ptr es：[3],00h<br>mov ax,es：[1]</p></li></ol><p>  A.7000H           B.0070H           C.1            D.0080H</p><ol start="40"><li><p>汇编语言源程序中的“dw”、“db”、“dd”等指令属于（  ）。</p><p>A.汇编指令        B.伪指令     C.机器指令        D.标号</p></li><li><p>对于程序的执行过程，错误的说法是（  ）。</p><p>A.通过command将程序加载进内存后，command将根据可执行文件中的描述信息，设置CS.IP指向第一条要执行的指令</p><p>B.通过debug将程序加载进内存后，用r命令查看CX的值，可看到与程序的长度相关的信息</p><p>C.通过debug将程序加载进内存后，DS指向程序的数据段，CS指向程序的代码段</p><p>D.在源程序中用end指令，可以决定程序加载后IP寄存器的值</p></li><li><p>下列对于程序段前缀（PSP）的描述，错误的是（  ）。</p></li></ol><p>A.PSP占256个字节的地址空间</p><p>B.DOS通过PSP与被加载的程序通信</p><p>C.用debug将程序载入内存后，PSP与代码段的段地址一致，偏移地址相差100h</p><p>D.用debug将程序载入内存后，可用“d ds：0 ff”查看PSP的全部内容</p><ol start="43"><li>下面汇编语言源程序中的指令可以通过编译的是（  ）。</li></ol><p>A. mov al,2000  B. push [0]  C. add al,100h  D. mov dx,1000h</p><ol start="44"><li>下列说法正确的是（  ）。</li></ol><p>A. Push、pop指令通过修改ss：sp的值来操作栈中的数据</p><p>B. 栈空时，ss：sp指向栈底</p><p>C. 栈满以后，如果继续向其中压入数据，会覆盖栈顶之后的高地址内存单元</p><p>D. 栈满以后，如果继续向其中压入数据，不一定会覆盖其地址比栈顶的地址更低的内存单元</p><ol start="45"><li>其所传送的数据在内存中的指令是（  ）。</li></ol><p>A. pop ax  B. mov ax,bx  C. mov ax,0  D. in al,20h</p><ol start="46"><li>以下程序加载后，在执行前，(ds)&#x3D;0a21h。对于此时的寄存器与程序的相关情况，错误的说法是（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assume cs：code,ds：data</span><br><span class="line"></span><br><span class="line">  data segment</span><br><span class="line"></span><br><span class="line">  db ’1975’</span><br><span class="line"></span><br><span class="line">  data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah</span><br><span class="line"></span><br><span class="line">mov ax,0</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mov cx,8</span><br><span class="line"></span><br><span class="line">s： add ax,cs：[bx]</span><br><span class="line"></span><br><span class="line">add bx,2</span><br><span class="line"></span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">  mov ax,4c00h</span><br><span class="line"></span><br><span class="line">  int 21h</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>A. 程序的起始段地址为0a31h</p><p>B. (cs)&#x3D;0a31h，(ip)&#x3D;0</p><p>C. ds的值不是data段的段地址</p><p>D. “mov ax,0”的机器码的内存地址是0a31H：0020H</p><ol start="47"><li>masm和debug默认的进制分别是（  ）。</li></ol><p>A.十六进制和十进制    B.十进制和二进制</p><p>C.十进制和十六进制    D.二进制和十六进制</p><ol start="48"><li>补全这段程序，使其执行后，(bx)&#x3D;3。（  ）</li></ol><p>mov bx,1</p><p>mov cx,___</p><p>loop s1</p><p>mov bx,2</p><p>s1： inc bx</p><p>A. 0   B. 1  C. 2  D. 3</p><h4 id="答案与解析-2"><a href="#答案与解析-2" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>D.编译、连接、加载、执行</li><li>D.连接可以检查出逻辑错误</li><li>C. X+16</li><li>D. (SA+16)×16</li><li>C. 在汇编语言源程序中，不由编译器执行的伪指令有对应的机器指令</li><li>A. 返回到DOS</li><li>C. 用Debug的t命令，一次只能执行一条汇编指令</li><li>B. al &#x3D; 57H</li><li>B。bp这个寄存器对应的段寄存器不是DS</li><li>B. 34 12 00 00</li><li>B.ROM</li><li>B。ROM</li><li>B.ds、ss</li><li>B.03A3H</li><li>A.mov ax,[bp+dx]</li><li>C.shl</li><li>C.应用assume将指令中的数据标号所在的段，与一个段寄存器联系起来，这样，使用数据标号的指令，就可以从段寄存器中得到所用数据标号的段地址。</li><li>A.这个程序设置(CS)16+(IP)&#x3D; PSP所在内存空间的首地址。</li><li>B.F806H</li><li>B.00111011B</li><li>CPU执行的第一条指令是 mov ax,20h1.</li><li>对于8086CPU，正确的指令是 INC WORD PTR DS:[0]</li><li>双字型数据16在内存中的存储方式是 00 00 00 10</li><li>不可能出现在可执行文件中的是 伪指令</li><li>关于在程序中使用内存空间，不正确的说法是 使用MOV指令时，不用担心损坏系统数据</li><li>以下指令中，可以被CPU执行的指令是 STI</li><li>CPU在读取指令时，实际读到的是 由一系列二进制位组成的信息</li><li>对于8086CPU，错误的指令是 mov ax,ds</li><li>对于8086CPU，下列关于段的说法，错误的是 CPU将某个段用做栈，是因为assume指令将其与SS寄存器相关联</li><li>功能与“mov al,’d’”的 功能相同的是 mov al,’a’+310</li><li>关于汇编语言中的指令，正确的说法是 汇编指令一定有对应的机器码</li><li>以下程序运行时，“sub ax,masm”执行后，ax的值是15</li><li>关于debug的使用，错误的说法是 Debug将程序加载到内存后，不执行任何命令前，IP的值一定为零</li><li>关于标号，下列说法正确的是 前几个选项都不对</li><li>汇编语言中不包括哪个元素？答案是 “+”、“-”、“*”、“&#x2F;”等符号</li><li>对于编译、连接、运行，错误的说法是 伪指令在编译的过程中被编译器执行了</li><li>以下说法中，错误的是 在用masm.exe编译的汇编语言的源程序中，end和ends都属于伪指令</li><li>用debug写几条指令后，“mov ax,1”执行后，AX的值是 0070H</li><li>以下指令执行后，AX的值是 0080H</li><li>汇编语言源程序中的“dw”、“db”、“dd”等指令属于 伪指令</li><li>通过debug将程序加载进内存后，DS指向程序的数据段，CS指向程序的代码段（DS指向程序的psp，执行装填指令才有正确的段地址）</li><li>下列对于程序段前缀（PSP）的描述，错误的是 用debug将程序载入内存后，PSP与代码段的段地址一致，偏移地址相差100h</li><li>下面汇编语言源程序中的指令可以通过编译的是D</li><li>C. 栈满以后，如果继续向其中压入数据，会覆盖栈顶之后的高地址内存单元</li><li>其所传送的数据在内存中的指令是 mov ax,025.</li><li>D. “mov ax,0”的机器码的内存地址是0a31H：0020H</li><li>masm和debug默认的进制分别是 十进制和十六进制</li><li>补全这段程序，使其执行后，(bx)&#x3D;3的答案是 2</li></ol><h3 id="第7-8章（寻址方式）"><a href="#第7-8章（寻址方式）" class="headerlink" title="第7-8章（寻址方式）"></a>第7-8章（寻址方式）</h3><ol><li>以下寻址方式中，属于相对基址变址寻址的是（  ）。</li></ol><p>A. [bx+si+idata]    B. [bx+di]    C. [bp+si]    D. [bx]</p><ol start="2"><li>可在基址变址寻址或寄存器间接寻址中，用作偏移地址寄存器的是（  ）。</li></ol><p>A. ax，bx，cx，dx    B. ds，es，cs，ss</p><p>C. sp，bp，ip，bx    D. si，di，bp，bx</p><ol start="3"><li>用“dd 5 dup (1,2,3,4)”说明的数据，在程序运行时，共占用（  ）个字节。</li></ol><p>A. 4  B. 20  C. 40  D. 80</p><ol start="4"><li>对于8086CPU，错误的指令是（  ）。</li></ol><p>A. mov ax,[bp+si]  B. mov ax,[bx]  C. mov ax,2[si]  D. mov al,[dx]</p><ol start="5"><li>下列寻址方式属于基址变址寻址的是（  ）。</li></ol><p>A. [di]  B. [bx+idata]  C. [bx+di]  D. [bp+di+idata]</p><ol start="6"><li>“mov word ptr [bx+si],1”采用的寻址方式为（  ）。</li></ol><p>A.寄存器间接寻址 B.寄存器相对寻址 C.基址变址寻址     D.相对基址变址寻址</p><ol start="7"><li>用div指令进行除法运算，除数为16位时，余数存放在（  ）中。</li></ol><p>A.AX   B.AH  C.AL   D.DX</p><ol start="8"><li>若AX&#x3D;1000H，CL&#x3D;90H，则执行指令DIV CL之后，AX&#x3D;（  ）。</li></ol><p>A.401CH    B.001CH   C.0040H   D.1C40H</p><ol start="9"><li>以下关于8086CPU的div指令的说法，错误的是（  ）。</li></ol><p>A.被除数可以放在寄存器中，也可以放在内存单元中。</p><p>B.若结果的商大于al或ax所能存储的最大值，将引发CPU内部的除法溢出错误。</p><p>C.可以重写0号中断处理程序，使得程序可以处理除法溢出的情况。</p><p>D.可使用div指令编写一个计算32位被除数&#x2F;8位除数的子程序。</p><ol start="10"><li>执行以下指令后，AX的值是（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov al,96h  </span><br><span class="line"></span><br><span class="line">mov bl,12h</span><br><span class="line"></span><br><span class="line">mul bl</span><br></pre></td></tr></table></figure><p>A. 1152h 　　　　  B. 0a8ch</p><p>C. 0a82h 　　　   D. 0f88ch</p><ol start="11"><li>以下指令执行后，AX的值是多少？（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ah,1</span><br><span class="line">mov al,10h</span><br><span class="line">mov bl,2</span><br><span class="line">mul bl</span><br></pre></td></tr></table></figure><p>  A.0220H      B.2000H      C.0020H       D.0120H</p><ol start="12"><li>下列指令中（  ）可以实现，将AX寄存器中的最低3位清0</li></ol><p>A、 OR  AX,0FFF8H</p><p>B、 AND AX,0FFF8H</p><p>C、 AND AX,0FFF7H</p><p>D、 AND AX,0FFFBH</p><ol start="13"><li>下列指令中（  ）可以实现，将AX寄存器中的D3和D7位置1</li></ol><p>A、 XOR  AX,08H</p><p>B、 OR AX,08H</p><p>C、 OR AX,88H</p><p>D、 XOR AX,88H</p><ol start="14"><li>下列指令中（  ）可以实现，将AX寄存器中的最高3位取反</li></ol><p>A、 NOT AX</p><p>B、 AND AX,1FFFH</p><p>C、 XOR  AX,0E000H</p><p>D、 OR  AX,0E000H</p><ol start="15"><li>数据段中有如下定义</li></ol><p>  X1 DB 1,2,3,4,5,6,7,8</p><p>  X2  DW  1,2,3,4,5,6,7,8</p><p>以下指令中错误的是（   ）</p><p>A、 MOV   X1,100</p><p>B、 MOV  AX,X1</p><p>C、 MOV AX,X2</p><p>D、 MOV X2,100</p><ol start="16"><li>数据段中有如下定义</li></ol><p>  X1 DB 1,2,3,4,5,6,7,8</p><p>  X2  DW 1,2,3,4,5,6,7,8</p><p>以下指令中正确的是（   ）</p><p>A、 MOV   X1,1000</p><p>B、 MOV  AX,X1</p><p>C、 MOV AH,X2</p><p>D、 MOV X2,1000</p><ol start="17"><li>数据段中有如下定义</li></ol><p>  X1 DB 1,2,3,4,5,6,7,8,9,10</p><p>  X2 DW 100</p><p>执行完下面的程序段之后，DX的值是（   ）。</p><p>   MOV  CX,10</p><p>   MOV  DX,X2</p><p>S:  MOV  BX,CX</p><p>   MOV  AL,X1[BX]</p><p>   MOV  AH,0</p><p>   ADD  DX,AX</p><p>   DEC  CX</p><p>   LOOP  S</p><p>A、 124      B、 224      C、 155      D、 255</p><ol start="18"><li>下列指令序列不能够实现把内存地址0:202h中的字节数据送入al功能的是______•</li></ol><p>A、 mov ax,0</p><p>mov ds,ax</p><p>mov bx,202h</p><p>mov al,[bx]</p><p>B、 mov ax,0</p><p>mov ds,ax</p><p>mov bp,202h</p><p>mov al,[bp]</p><p>C、 mov ax,0</p><p>mov ds,ax</p><p>mov bx,200h</p><p>mov al,[bx+2]</p><p>D、 mov ax,0</p><p>mov ds,ax</p><p>mov bp,200h</p><p>mov al,ds:[bp+2]</p><ol start="19"><li>下列指令中，正确的是（ ）</li></ol><p>A、 MOV AX,[BX+BP]          B、MOV AX,[BX+SI]</p><p>C、 MOV  AL,[SI+DI]      D、 MOV  AL,[SI+DX]</p><ol start="20"><li>下列指令中，错误的是（ ）</li></ol><p>A、 MOV AX,[BX+SI]      B、 MOV AX,[BX+DI]</p><p>C、 MOV  AL,[SI+DI]      D、 MOV  AL,[SI+BP]</p><ol start="21"><li>下列指令中，正确的是（  ）</li></ol><p>A、 MOV DS:[BP+BX],AH       B、 ADD  [BX],100</p><p>C、 MOV  [SI],AL         D、 MOV  [SI],100</p><ol start="22"><li>下列指令中，错误的是（  ）</li></ol><p>A、 MOV DS:[BP+SI],AH        B、ADD  WORD PTR [BX],100</p><p>C、 MOV  [SI],AL              D、 MOV  [SI],100</p><ol start="23"><li>下列指令中，错误的是（  ）</li></ol><p>A.MOV DS:[BP+SI],AH          B.ADD  WORD PTR [SI],100</p><p>C.MOV  [SI],AL                 D.MOV  [SI],[DI]</p><ol start="24"><li>下列哪个程序段可以实现将987*6 ？ （  ）</li></ol><p>A、 MOV  AX,987</p><p>MOV BX,6</p><p>MUL  AX,BX</p><p>B、 MOV  AX,987</p><p>MOV BX,6</p><p>MUL  BX</p><p>C、 MOV  AX,987</p><p>MOV BL,6</p><p>MUL  BL</p><p>D、 MOV  AL,6</p><p>MOV BX,987</p><p>MUL  BX</p><ol start="25"><li>下列哪个程序段可以实现将987&#x2F;30 ？ （  ）</li></ol><p>A、 MOV  AX,987</p><p>MOV BX,30</p><p>DIV  BX</p><p>B、 MOV  DX,987</p><p>MOV BL,30</p><p>DIV  BL</p><p>C、 MOV  AX,987</p><p>MOV BL,30</p><p>DIV  BL</p><p>D、 以上选项都不对</p><ol start="26"><li>执行下列程序段</li></ol><p>MOV  AX,87</p><p>MOV BX,6</p><p>MUL  BX</p><p> 去 （  ）寄存器查看结果</p><p>A、 AX       B、BX        C、DX        D、 DX存放结果高16位，AX存放结果低16位</p><ol start="27"><li>执行下列程序段</li></ol><p>MOV  AX,87</p><p>MOV BL,6</p><p>MUL  BL</p><p> 去 （  ）寄存器查看结果</p><p>A、 AX</p><p>B、 BX</p><p>C、 AL</p><p>D、 DX存放结果高16位，AX存放结果低16位</p><ol start="28"><li>数据段中有如下定义：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> DATA1 DB  1,2,3,4</span><br><span class="line">DB  5,6,7,8</span><br><span class="line"></span><br><span class="line"> DB  9,10,11,12</span><br><span class="line"></span><br><span class="line"> DB  1,2,3,4</span><br></pre></td></tr></table></figure><p>执行下列程序段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   MOV  BX,0</span><br><span class="line"></span><br><span class="line">   MOV SI,0</span><br><span class="line"></span><br><span class="line">   MOV CX,4</span><br><span class="line"></span><br><span class="line">   MOV AL,0</span><br><span class="line"></span><br><span class="line">S:  ADD  AL,DATA1[BX][SI]</span><br><span class="line"></span><br><span class="line">   INC SI</span><br><span class="line"></span><br><span class="line">   ADD  BX,4</span><br><span class="line"></span><br><span class="line">   LOOP  S</span><br></pre></td></tr></table></figure><p> AL寄存器的结果是（   ）</p><p>A、 10       B、 16       C、 24       D、 22</p><ol start="29"><li>数据段中有如下定义：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> DATA1 DB  1,2,3,4</span><br><span class="line">DB  5,6,7,8</span><br><span class="line"></span><br><span class="line">DB  9,10,11,12</span><br><span class="line"></span><br><span class="line">DB  1,2,3,4</span><br></pre></td></tr></table></figure><p>执行下列程序段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOV  BX,0</span><br><span class="line">MOV SI,0</span><br><span class="line">MOV CX,4</span><br><span class="line">MOV AL,0</span><br><span class="line">S:  ADD  AL,DATA1[BX][SI]</span><br><span class="line">INC SI</span><br><span class="line">INC BX</span><br><span class="line">LOOP  S</span><br></pre></td></tr></table></figure><p> AL寄存器的结果是（   ）</p><p>A、 10       B、 16       C、 24       D、 22</p><ol start="30"><li>数据段中有如下定义：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> DATA1 DB  1,2,3,4</span><br><span class="line">DB  5,6,7,8</span><br><span class="line"></span><br><span class="line">DB  9,10,11,12</span><br><span class="line"></span><br><span class="line">DB  1,2,3,4</span><br></pre></td></tr></table></figure><p>执行下列程序段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   MOV  BX,0</span><br><span class="line"></span><br><span class="line">   MOV SI,0</span><br><span class="line"></span><br><span class="line">   MOV CX,4</span><br><span class="line"></span><br><span class="line">   MOV AL,0</span><br><span class="line"></span><br><span class="line">S:  ADD  AL,DATA1[BX+SI]</span><br><span class="line"></span><br><span class="line">   ADD  AL,DATA1[BX+4+SI]</span><br><span class="line"></span><br><span class="line">   INC SI</span><br><span class="line">   LOOP  S</span><br></pre></td></tr></table></figure><p> AL寄存器的结果是（   ）</p><p>A、 10       B、 16       C、 52       D、 36</p><ol start="31"><li>有如下定义，说法正确的是（  ）。</li></ol><p> X DW  5  DUP (1,2,3)</p><p>A、 总共定义了15个字节          B、 总共定义了3个字节</p><p>C、 总共定义了5个字节       D、 总共定义了30个字节</p><ol start="32"><li>有如下定义，说法正确的是（  ）。</li></ol><p> X DB  3  DUP (1,2 DUP(3))</p><p>A、 相当于  X  DB  1，2，3</p><p>B、 相当于   X  DB  1，2，3，1，2，3，1，2，3</p><p>C、 相当于  X  DB  1，3，3，1，3，3，1，3，3</p><p>D、相当于  X  DB  1，2，2，1，2，2，1，2，2</p><ol start="33"><li>有如下定义，说法正确的是（  ）。</li></ol><p> X DW  5  DUP (1,3 dup（2）)</p><p>A、 总共定义了10个字节          B、 总共定义了20个字节</p><p>C、 总共定义了30个字节           D、 总共定义了40个字节</p><h4 id="答案与解析-3"><a href="#答案与解析-3" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>A. [bx+si+idata]</li><li>D. si，di，bp，bx</li><li>D. 80,dd占4个字节，一共有20个数字，因此4*20&#x3D;80</li><li>D. dx不作为寻址的寄存器</li><li>C. [bp+di]</li><li>C.基址变址寻址</li><li>D.DX,顺带一提，商存在AX寄存器</li><li>B.001CH</li><li>A.被除数只能放寄存器，除数可以放reg和内存单元，具体细节可以看书上8.7节</li><li>这题选B，0a8ch，十六进制乘法不懂可以自己上网搜索</li><li>D.0120H</li><li>B、 AND AX,0FFF8H</li><li>C、 OR AX,88H</li><li>C、 XOR AX,0E000H,将指定位取反优先考虑异或，这是个做题技巧捏</li><li>B、 X2是一个8位字单元，不能直接送到16位的AX寄存器</li><li>C</li><li>B、 224</li><li>B、 bp寄存器对应的段寄存器是ss，只设置ds是没用的</li><li>B、MOV AX,[BX+SI]</li><li>C、 MOV AL,[SI+DI]</li><li>B、 ADD [BX],100</li><li>D、 MOV [SI],100</li><li>D.MOV [SI],[DI].si和di不能同时出现，bp和bx也是</li><li>B、</li><li>C、 MOV AX,987 MOV BL,30 DIV BL</li><li>D、 DX存放结果高16位，AX存放结果低16位</li><li>D、 AX</li><li>C、 24</li><li>B、 16</li><li>D、 36</li><li>D、 总共定义了30个字节</li><li>C、 相当于 X DB 1，3，3，1，3，3，1，3，3</li><li>D、 总共定义了40个字节</li></ol><h3 id="第9-10章"><a href="#第9-10章" class="headerlink" title="第9-10章"></a>第9-10章</h3><ol><li><p>CPU在执行“call标号” 时，相当于执行（  ）。</p><p>A.   push IP ； jmp far ptr 标号</p><p>B.   push  CS ； push IP ； jmp far ptr 标号</p><p>C. push IP ； jmp near ptr 标号</p><p>D. push  CS ； push IP ； jmp near ptr 标号</p></li><li><p>使用call和ret指令，我们可以实现汇编语言编程中的模块化设计。以下描述中错误的是（  ）。</p><p>A. 可以用call和ret指令实现多个子程序。</p><p>B. 可以通过多个相互联系、功能独立的子程序来解决一个复杂的问题。</p><p>C. 对于通用的子程序，最好加上详细的注释。</p><p>D. 用汇编语言进行程序设计，子程序一定要用call和ret来实现。</p></li><li><p>以下程序执行后，AX的值为（  ）。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,4</span><br><span class="line">CALL S</span><br><span class="line"></span><br><span class="line">NOP</span><br><span class="line">S：</span><br><span class="line"> MOV AX,OFFSET S</span><br><span class="line"></span><br><span class="line">MOV BP,SP</span><br><span class="line"></span><br><span class="line">SUB AX,[BP]</span><br></pre></td></tr></table></figure><p>A.0    B.1   C.2    D.3</p><ol start="4"><li>对于根据位移进行跳转的jmp指令，跳转的位移是在什么时候计算的？（ ）</li></ol><p>A. 编译  B. 连接  C. 运行  D. 编译或运行</p><ol start="5"><li>可修改cs和ip的指令是（  ）。</li></ol><p>A. jmp ax  B. jmp far ptr s  C. loop  D. ret</p><ol start="6"><li>“jmp word ptr [bx]”进行的是（  ）。</li></ol><p>A.   段内近转移   B.段间近转移 C.段内短转移 D.段间短转移</p><ol start="7"><li>“jmp word ptr [bx]”修改寄存器是（  ）。</li></ol><p>A.IP B. BP     C.CS D.CS和IP</p><ol start="8"><li>哪个指令的跳转范围可以与其它三个不同？（  ）</li></ol><p>A.jmp   B.jcxz   C.loop   D.je</p><ol start="9"><li>下列说法正确的是（  ）。</li></ol><p>A.   iret指令可以描述为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">popf</span><br><span class="line">pop cs</span><br><span class="line">pop ip</span><br></pre></td></tr></table></figure><p>B.   mov al,1</p><p>add al,0ffh</p><p>上面两条指令执行后，(AX)&#x3D;0</p><p>C.   用debug进行调试时，用p命令可以一次执行多条汇编指令</p><p>D.   call指令不能通过位移进行跳转</p><ol start="10"><li><p>关于loop指令，错误的说法是（  ）。</p><p>A.loop指令的跳转范围是-128~127</p><p>B.CX&#x3D;10时，执行loop指令，IP的值一定减小</p><p>C.CX&#x3D;0时，执行loop指令后，CX&#x3D;0ffffh</p><p>D.CX&#x3D;1时，执行loop指令，IP的值不变</p></li><li><p>假设sp&#x3D;0010h，则执行哪条指令，sp的值会减小？（  ）</p></li></ol><p>A.IRET   B.JMP 标号   C.RETF   D.CALL 标号</p><ol start="12"><li>在debug中，用“d 1000：0”查看内存，显示如下.</li></ol><p>1000：0000  69 76 65 20 25 63 20 61-6E 64 20 70 72 65 73 73</p><p>1000：0010  20 3C 45 4E 54 45 52 3E-0A 00 6B 00 41 62 6F 75</p><p>1000：0020  74 20 74 6F 20 67 65 6E-65 72 61 74 65 20 2E 45</p><p>接着，即写且执行以下指令：</p><p>mov ax,1000</p><p>mov ds,ax</p><p>jmp DWORD PTR [2]</p><p>之后，cs：ip的值依次是（  ）。</p><p>A.6325：2065  B.6520：2563  C.2065：7669    D.6520：2567</p><ol start="13"><li>关于转移指令，错误的说法是（  ）。</li></ol><p>A.进行段内短转移时，jmp指令对应的机器码中没有转移的目的地址。</p><p>B.进行段间转移时，jmp指令对应的机器码中有转移的目的地址。</p><p>C.进行段内短转移时，IP的修改范围是0~255。</p><p>D.loop指令也是转移指令。</p><ol start="14"><li><p>读取，执行哪条指令CPU会修改两次IP？（  ）</p><p>A.push   B.pushf   C.ret    D.mov</p></li><li><p>在debug中用t命令执行下列指令，可观察到的现象是（  ）。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">内存地址     汇编指令</span><br><span class="line"> 076e：0      mov ax,5</span><br><span class="line"></span><br><span class="line"> 076e：3      call ax</span><br><span class="line"></span><br><span class="line"> 076e：5      inc ax</span><br><span class="line"></span><br><span class="line"> 076e：6      mov bp,sp</span><br><span class="line"></span><br><span class="line"> 076e：8      jmp word ptr [bp]</span><br></pre></td></tr></table></figure><p> A.循环执行mov ax,5   和call ax</p><p>B.循环执行call ax到jmp word ptr [bp]</p><p>C.循环执行inc ax到jmp word ptr [bp]</p><p>D.ss：bp指向处的数据未知，因而跳转到未知内存处，结果不可预测</p><ol start="16"><li><p>用一条指令补全程序，使这个程序可以返回。（  ）<br>assume cs：code<br>data segment<br>dd 4 dup (0)<br>data ends<br>code segment<br>s：<br>mov ax,4c00h<br>int 21h<br>code ends</p><p>assume cs：a<br>a segment<br>start：<br>a ends<br>end start</p></li></ol><p>A.jmp s    B.loop s   C.jmp far ptr s    D.jmp near ptr s</p><ol start="17"><li>读取执行下面的指令之后，CPU总共修改了几次IP的值？（  ）</li></ol><p>SUB AX,AX</p><p>RETF</p><p>A.1   B.2   C.3    D.4</p><ol start="18"><li>8086CPU读取、执行指令的过程是（  ）。</li></ol><p>①从CS：IP指向的内存空间读取指令，将指令放入指令缓冲器</p><p>②执行指令，转到步骤①</p><p>③IP指向下一条指令</p><p>A.① ②</p><p>B.① ③ ②</p><p>C.若指令是转移指令，过程为① ③ ②，不是则过程为① ②</p><p>D.若指令是转移指令，过程为① ②，不是则过程为① ③ ②</p><ol start="19"><li>有以下定义</li></ol><p>DATA SEGMENT</p><p> X1 DB 5 DUP (1，2，3)</p><p> X2 DW 1</p><p> X3 DW 1000H</p><p>DATA ENDS</p><p>执行下面的程序段后，CX的值为（  ）</p><p>  MOV  AX,DATA</p><p>  MOV  DS,AX</p><p>  MOV  CX,OFFSET X3</p><p>A、 15</p><p>B、 16</p><p>C、 17</p><p>D、 18</p><ol start="20"><li>用Debug查看内存，结果如下：</li></ol><p>2000:1000 04 05 60 BE 00 06 00 00 00 ……</p><p>则此时，CPU执行指令：</p><p>mov ax,2000H</p><p>mov es,ax</p><p>jmp dword ptr es:[1002H]</p><p>后，说法正确的是（   ）</p><p>A、 (CS)&#x3D;2000H，(IP)&#x3D;1002h</p><p>B、 (CS)&#x3D;BE60H，(IP)&#x3D;0600H</p><p>C、 (CS)&#x3D;60BEH，(IP)&#x3D;0006H</p><p>D、 (CS)&#x3D;0600H，(IP)&#x3D;BE60H</p><ol start="21"><li>有以下定义</li></ol><p>DATA SEGMENT</p><p> X1 DB 5 DUP (1，2，3)</p><p> X2 DW 1</p><p> X3 DW 1000H</p><p>DATA ENDS</p><p>执行下面的程序段后，CX的值为（  ）</p><p>  MOV  AX,DATA</p><p>  MOV  DS,AX</p><p>  MOV  BX,OFFSET X3</p><p>  MOV  CX,[BX]</p><p>A、 18</p><p>B、 17</p><p>C、 1</p><p>D、 1000H</p><ol start="22"><li>关于指令 JMP SHORT 标号，说法正确的是</li></ol><p>A、 执行该指令，修改CS和IP一次</p><p>B、 执行该指令，修改IP一次</p><p>C、 执行该指令，修改IP两次</p><p>D、 执行该指令，修改IP三次</p><ol start="23"><li>关于指令 JMP SHORT 标号，说法正确的是</li></ol><p>A、 执行该指令，（IP）&#x3D;（IP）+8位位移量</p><p>B、 执行该指令，（IP）&#x3D;（IP）+16位位移量</p><p>C、 执行该指令，（IP）&#x3D;（IP）+标号所在段中的偏移地址</p><p>D、 执行该指令，（IP）&#x3D;标号所在段中的偏移地址</p><ol start="24"><li>关于指令 JMP NEAR PTR 标号，说法正确的是</li></ol><p>A、 执行该指令，（IP）&#x3D;（IP）+8位位移量</p><p>B、 执行该指令，（IP）&#x3D;（IP）+16位位移量</p><p>C、 执行该指令，（IP）&#x3D;（IP）+标号所在段中的偏移地址</p><p>D、 执行该指令，（IP）&#x3D;标号所在段中的偏移地址</p><ol start="25"><li>关于指令 JMP FAR PTR 标号，说法正确的是</li></ol><p>A、 执行该指令，（IP）&#x3D;（IP）+8位位移量</p><p>B、 执行该指令，（IP）&#x3D;（IP）+16位位移量</p><p>C、 执行该指令，（IP）&#x3D;（IP）+标号所在段中的偏移地址</p><p>D、 执行该指令，（IP）&#x3D;标号所在段中的偏移地址</p><ol start="26"><li>下列指令中，没有修改CS的是（   ）</li></ol><p>A、 JMP  AX</p><p>B、 JMP  FAR PTR  S1</p><p>C、 JMP DWORD PTR  DS:[0]</p><p>D、 JMP DWORD PTR [BX]</p><ol start="27"><li>下列指令中，同时修改CS和IP的是（   ）</li></ol><p>A、 JMP  AX</p><p>B、 JMP  NEAR PTR  S1</p><p>C、 JMP WORD PTR  DS:[0]</p><p>D、 JMP DWORD PTR [BX]</p><h4 id="答案与解析-4"><a href="#答案与解析-4" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>C.call只改变IP的值</li><li>D. 用汇编语言进行程序设计，子程序一定要用call和ret来实现。这个不一定，你自己用call本质上就是使用了jmp和push指令，你直接用jmp，push和call是在功能上是等价的</li><li>A. 0</li><li>A. 编译</li><li>B. jmp far ptr s</li><li>A. 段内近转移</li><li>A.段内转移只修改IP</li><li>A. jmp.这里你必须知道一个信息，所有有条件转移的指令都是短转移，jmp是无条件的，因此只有他最与众不同</li><li>A. iret指令可以描述为：popf；pop cs；pop ip</li><li>C. CX&#x3D;0时，执行loop指令后，CX&#x3D;0ffffh</li><li>D. CALL 标号</li><li>A. 6325:2065</li><li>C. 进行段内短转移时，IP的修改范围是0~255</li><li>C. ret</li><li>D. ss：bp指向处的数据未知，因而跳转到未知内存处，结果不可预测</li><li>A. jmp s</li><li>C. 3次.Sub修改一次，RETF修改两次</li><li>B. ① ③ ②</li><li>B. 16</li><li>D. (CS)&#x3D;BE60H，(IP)&#x3D;0600H</li><li>D.1000H</li><li>B. 执行该指令，修改IP一次1</li><li>A. 执行该指令，（IP）&#x3D;（IP）+8位位移量</li><li>B. 执行该指令，（IP）&#x3D;（IP）+16位位移量</li><li>D. 执行该指令，（IP）&#x3D;标号所在段中的偏移地址</li><li>A. JMP AX</li><li>D. JMP DWORD PTR [BX]</li></ol><h3 id="第11章"><a href="#第11章" class="headerlink" title="第11章"></a>第11章</h3><ol><li><p>以下指令执行后，of和cf的值是（  ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0</span><br><span class="line">push ax</span><br><span class="line">popf</span><br><span class="line">mov ax,0ffffh</span><br><span class="line">inc ax </span><br></pre></td></tr></table></figure><p>A. of&#x3D;0，cf&#x3D;0</p><p>B. of&#x3D;1，cf&#x3D;0</p><p>C. of&#x3D;0，cf&#x3D;1</p><p>D. of&#x3D;1，cf&#x3D;1</p></li><li><p>以下指令执行后，sf、cf、zf、of的值分别是（  ）。<br><code>mov ax,0ea04h  sub ax,4ae0h  </code></p><p>A. 0，1，0，1</p><p>B. 1，1，0，0</p><p>C. 1，0，0，0</p><p>D. 1，0，1，0</p></li><li><p>可以改变标志寄存器的值的指令是（  ）。<br>A.PUSHF   B.MOV AX,AX     C.SHL AX,CL   D.JCXZ</p></li><li><p>可改变SF和ZF的值的指令是（  ）。<br>A.JE NEXT   B.IN AL,20H   C.PUAH AX   D.SHL AX,1</p></li><li><p>不会影响标志寄存器的值的指令是（  ）。<br>A.adc ax,bx   B.cmp cx,ax   C.inc ax    D.jmp word ptr [bx]</p></li><li><p>可使if&#x3D;1的指令是（  ）。</p><p>A.sti   B.cld   C.std   D.shr</p></li><li><pre><code class="assembly">mov al,62hadd al,63h<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   这两条指令执行后，cf\of的值是（  ）。</span><br><span class="line"></span><br><span class="line">   A. cf=0，of=0 B. cf=0，of=1  C. cf=1，of=0  D. cf=1，of=1</span><br><span class="line">8. 下面对标志位的描述，正确的是（  ）。</span><br><span class="line"></span><br><span class="line">   A. 可以用栈指令改变标志位的值</span><br><span class="line"></span><br><span class="line">   B. Cmp、pushf指令都可能会对标志位的值产生影响</span><br><span class="line"></span><br><span class="line">   C. 可以通过判断cmp指令执行后的sf位是否为1知道两个数的大小</span><br><span class="line"></span><br><span class="line">   D. 传送指令.移位指令对标志位的值无影响</span><br><span class="line">9. 执行JNB指令时，（  ），则进行跳转。</span><br><span class="line"></span><br><span class="line">   A.CF=1且ZF=1         B.CF=0或ZF=1    C.CF=0或ZF=0 D.CF=0</span><br><span class="line">10. 下面的程序执行后，PF、SF、CF、OF的值分别为（  ）。</span><br><span class="line"></span><br><span class="line">    MOV AX,0FF80H</span><br><span class="line"></span><br><span class="line">    ADD AL,0F0H</span><br><span class="line"></span><br><span class="line">    A.PF=1 SF=1 CF=1 OF=1      B.PF=0 SF=1 CF=1 OF=1</span><br><span class="line"></span><br><span class="line">    C.PF=0 SF=0 CF=1 OF=1      D.PF=1 SF=0 CF=0 OF=0</span><br><span class="line">11. 下面的程序执行后，PF、SF、CF、OF、ZF的值分别为（  ）。</span><br><span class="line"></span><br><span class="line">    MOV AX,0FF80H</span><br><span class="line"></span><br><span class="line">    XOR AX,AX</span><br><span class="line"></span><br><span class="line">    A.PF=1 SF=1 CF=1 OF=1 ZF=0      B.PF=0 SF=1 CF=1 OF=1 ZF=0</span><br><span class="line"></span><br><span class="line">    C.PF=0 SF=0 CF=1 OF=1 ZF=1      D.PF=1 SF=0 CF=0 OF=0 ZF=1</span><br><span class="line">12. 下列与标志寄存器相关的说法，错误的是（  ）。</span><br><span class="line"></span><br><span class="line">    A.标志寄存器可以通过栈指令访问</span><br><span class="line"></span><br><span class="line">    B.当al=0ffh，执行“inc al”，将影响cf的值</span><br><span class="line"></span><br><span class="line">    C.算数运算指令不会影响df标志位</span><br><span class="line"></span><br><span class="line">    D.根据无符号数的比较结果进行转移的条件转移指令，检测的是zf.cf的值</span><br><span class="line">13. 对于标志寄存器相关位的描述，错误的是（ ）。</span><br><span class="line"></span><br><span class="line">    A.   mov al,1</span><br><span class="line"></span><br><span class="line">    add al,127</span><br><span class="line"></span><br><span class="line">    结果为128（80H）,SF为1，超出了-128~127的范围，所以OF为1，这两条指令执行后，OF=1，发生溢出；虽然逻辑结果为正，但SF却为1</span><br><span class="line"></span><br><span class="line">    B.   mov al,1</span><br><span class="line"></span><br><span class="line">        add al,0ffh</span><br><span class="line"></span><br><span class="line">    结果为100h，保留00H,CF=1，正数1和负数-1相加，不会溢出，OF=0。这两条指令执行后，OF=0，CF=1</span><br><span class="line"></span><br><span class="line">    C.“inc ax”不影响标志寄存器的CF位</span><br><span class="line"></span><br><span class="line">    D.   S：mov ax,8f00h</span><br><span class="line"></span><br><span class="line">        cmp ax,5 ；</span><br><span class="line"></span><br><span class="line">    标志寄存器不改变，保留原值，执行中断子程序，执行中间可能会影响标志寄存器这段程序执行过程中，SF一直为1</span><br><span class="line">14. 下列指令，一定不会使标志寄存器发生变化的是（ ）。</span><br><span class="line"></span><br><span class="line">    A.int 21h      B.jmp ax  C.cmp ax,bx  D.sub ax,ax</span><br><span class="line">15. 如果AL=75H，则执行ADD AL,0F0H之后，OF、CF的值是（  ）。</span><br><span class="line"></span><br><span class="line">    A.OF=1，CF=0   B.OF=0，CF=0  C.OF=0，CF=1    D.OF=1，CF=1</span><br><span class="line">16. 以下哪个选项中的指令执行后，zf=1，pf=1？（  ）</span><br><span class="line"></span><br><span class="line">    A.mov ax,1   B.mov ax,1   C.mov ax,1    D.mov ax,1</span><br><span class="line"></span><br><span class="line">    add ax,2    and ax,0    sub ax,2     or ax,0</span><br><span class="line">17. 以下哪个选项中的指令执行后，cf=1,of=1？（  ）</span><br><span class="line"></span><br><span class="line">    A.mov al,98      add al,99</span><br><span class="line">    B.mov al,0f0H  add al,88H</span><br><span class="line">    C.mov al,0f0H  add al,78H</span><br><span class="line">    D.mov al,68H   add al,1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18. 关于串传送指令，错误的说法是（  ）。</span><br><span class="line"></span><br><span class="line">    A.只用一条movsb指令，即可以将一个内存单元里的数据传送到另一个内存单元</span><br><span class="line"></span><br><span class="line">    B.movsb指令执行后，SI与DI的值可能会增加，也可能会减小</span><br><span class="line"></span><br><span class="line">    C.传送可以以字节为单位进行，也可以以字为单位进行</span><br><span class="line"></span><br><span class="line">    D.如果在执行“movsb”之前，CX的值是10，“movsb”将重复执行10次</span><br><span class="line">19. 关于串传送指令，正确的说法是（  ）。</span><br><span class="line"></span><br><span class="line">    A. movsb指令，将一个ds:di指向内存单元里的字节传送到es:si内存单元中</span><br><span class="line"></span><br><span class="line">    B. 如果DF=1，则movsb指令执行后，SI会增加1</span><br><span class="line"></span><br><span class="line">    C.传送可以只能以字节为单位进行</span><br><span class="line"></span><br><span class="line">    D. rep和 movsb配合使用，可以传送一批数据。</span><br><span class="line">20. 对于8086CPU的标志寄存器，下列说法错误的是（  ）。</span><br><span class="line"></span><br><span class="line">    A.标志寄存器是16位的</span><br><span class="line"></span><br><span class="line">    B.无法通过一条汇编指令将标志寄存器的所有位都更新</span><br><span class="line"></span><br><span class="line">    C.这个寄存器中的有些位没有任何含义</span><br><span class="line"></span><br><span class="line">    D.cmp指令能够改变标志寄存器的值</span><br><span class="line"></span><br><span class="line">#### 答案与解析</span><br><span class="line"></span><br><span class="line">1. D. of=1，cf=1</span><br><span class="line">2. C. 1，0，0，0</span><br><span class="line">3. A.PUSHF</span><br><span class="line">4. D.SHL AX,1</span><br><span class="line">5. D.jmp word ptr [bx]1</span><br><span class="line">6. A.sti</span><br><span class="line">7. C. cf=1，of=0</span><br><span class="line">8. A. 可以用栈指令改变标志位的值</span><br><span class="line">9. B.JNB大于或等于转移.</span><br><span class="line">10. B.PF=0 SF=1 CF=1 OF=1</span><br><span class="line">11. D.PF=1 SF=0 CF=0 OF=0 ZF=1</span><br><span class="line">12. B.当al=0ffh，执行“inc al”，将影响cf的值</span><br><span class="line">13. D</span><br><span class="line">14. B.jmp ax</span><br><span class="line">15. D.OF=1，CF=1</span><br><span class="line">16. B.mov ax,1 and ax,0</span><br><span class="line">17. B.mov al,0f0H add al,88H</span><br><span class="line">18. A.只用一条movsb指令，即可以将一个内存单元里的数据传送到另一个内存单元</span><br><span class="line">19. D. rep和 movsb配合使用，可以传送一批数据。</span><br><span class="line">20. B.无法通过一条汇编指令将标志寄存器的所有位都更新.这个自己看书，在第11章有</span><br><span class="line"></span><br><span class="line">### 第12章及之后</span><br><span class="line"></span><br><span class="line">1. 中断向量表中存放的是（  ）。</span><br><span class="line"></span><br><span class="line">A. 中断类型码      B. 中断处理程序的入口地址</span><br><span class="line"></span><br><span class="line">C. 中断处理程序     D. 断点地址</span><br><span class="line"></span><br><span class="line">2. 中断向量占（  ）字节。</span><br><span class="line"></span><br><span class="line">A. 1      B. 2        C. 3     D. 4</span><br><span class="line"></span><br><span class="line">3. 使用call和ret指令，我们可以实现汇编语言编程中的模块化设计。以下描述中错误的是（  ）。</span><br><span class="line"></span><br><span class="line">   A. 可以用call和ret指令实现多个子程序。</span><br><span class="line"></span><br><span class="line">   B. 可以通过多个相互联系.功能独立的子程序来解决一个复杂的问题。</span><br><span class="line"></span><br><span class="line">   C. 对于通用的子程序，最好加上详细的注释。</span><br><span class="line"></span><br><span class="line">   D. 用汇编语言进行程序设计，子程序一定要用call和ret来实现。</span><br><span class="line">4. 以下指令执行后，al和cf的值分别是（  ）。</span><br><span class="line"></span><br><span class="line">```assembly</span><br><span class="line">mov al,00000001B</span><br><span class="line">mov cx,109h</span><br><span class="line">shl al,cl</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>A. 29 ，1   B. 29 ，0   C. 0，1   D. 0，0</p><ol start="5"><li>已知（AX）&#x3D;2，则能实现（AX）&#x3D;（AX）*8的程序段是（  ）。</li></ol><p>A.SHL AX,3      B.SHR AX,3</p><p>C.MOV CL,3      D.MOV CL,3</p><p>SHL AX,CL       SHR AX,CL</p><ol start="6"><li>关于shl与shr，正确的说法是（  ）。</li></ol><p>A.shl用0补充最高位。</p><p>B.shr将一个寄存器或内存单元中的数据向左移动。</p><p>C.移出的bit的值是0，shl与shr不影响CF。</p><p>D.shr用0补充最高位。</p><ol start="7"><li>其逻辑不是实现 (ax)&#x3D;(ax)*10的程序段是（  ）。</li></ol><p>A. shl ax,1</p><p>mov bx,ax</p><p>mov cl,2</p><p>shl ax,cl</p><p>add ax,bx</p><p>B. mov bx,ax</p><p>shl ax,1</p><p>shl bx,1</p><p>shl bx,1</p><p>add ax,ax</p><p>add ax,bx</p><p>C. mov bx,ax</p><p>mov cl,3</p><p>shl ax,cl</p><p>shl bx,1</p><p>add ax,bx</p><p>D. mov cl,3</p><p>shl ax,cl</p><p>mov bx,ax</p><p>mov cl,2</p><p>shr bx,cl</p><p>add ax,bx</p><ol start="8"><li>现在想要判断AL的值是否是某个正整数的2^n（n是正整数）次方，若al&#x3D;10000110b，那么至少需要移位几位，通过cf的值可判断出结果？（  ）</li></ol><p>A.1           B.2           C.3           D.4</p><ol start="9"><li>中断向量表中存放的是（ ）。</li></ol><p>A.中断类型码  B.断点地址   C.中断处理程序  D.中断处理程序的入口地址</p><ol start="10"><li>可以实现将ax的值增大2倍的是（  ）。</li></ol><p>A. mul 2   B. mul ax,2   C. shl ax,1  D. shr ax,1</p><ol start="11"><li>对于8086CPU，正确的指令是（  ）。</li></ol><p>A. inc cx,1    B. shl ax,2   C. and [bp],al    D. mov [bx][bp],ax</p><ol start="12"><li>对于在debug中使用t命令，正确的说法是（  ）。</li></ol><p>A.可触发单步中断   B.将执行完整个程序   C.只能执行一条指令</p><p>D.在依次执行完“mov ax,4c00h”、“int 21h”这两条指令后，程序返回</p><ol start="13"><li>mov ax,4c00h</li></ol><p>int 21h</p><p>这段程序的作用是（ ）。</p><p>A.   调用21h号中断例程的4c00h号功能</p><p>B.   告诉编译器程序到此结束</p><p>C.   返回DOS</p><p>D.   前三个选项都不对</p><ol start="14"><li><p>正确的说法是（ ）。</p><p>A.可用这段代码读取CMOS中的年份信息</p><p>mov al,9</p><p>in 70h,al</p><p>out al,71h</p><p>B.在移位指令中，可以用bl存储大于1的移位数</p><p>C.用shl指令对al进行移位，要注意对ah的值的影响;</p><p>D.十进制数码的ASCII码&#x3D;十进制数码的BCD码+30h ；</p><p>E.后面有“：”的地址标号能够写在所有段内</p><p>F.数据标号只能写在数据段内</p></li></ol><h4 id="答案与解析-5"><a href="#答案与解析-5" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li>中断向量表中存放的是 <strong>中断处理程序的入口地址</strong>正确答案: <strong>B</strong></li><li>中断向量占 <strong>4</strong> 字节，正确答案: <strong>D</strong></li><li>错误的描述是 <strong>用汇编语言进行程序设计，子程序一定要用call和ret来实现</strong>。因为子程序也可以通过其他方式实现，例如使用跳转指令。正确答案: <strong>D</strong></li><li>执行后，<code>al</code>的值为 <strong>0</strong>，<code>cf</code>的值为 <strong>1</strong>。因为 <code>cl</code>的值为 <code>109h</code>，即 <code>1001001b</code>，表示左移 <code>1001001</code>位，这会将 <code>al</code>中的 <code>1</code>左移出去，导致 <code>al</code>变为 <code>0</code>，并且最后一位移入 <code>cf</code>。正确答案: <strong>C</strong></li><li>能实现 <code>(AX) = (AX) * 8</code> 的程序段是 <strong>SHL AX,3</strong>。正确答案: <strong>A</strong></li><li>关于 <code>shl</code>与 <code>shr</code>，正确的说法是 <strong>shr用0补充最高位</strong>。正确答案: <strong>D</strong></li><li>这道题的题目可能有点问题，<br>A等价于AX * 6<br>B等价于AX * 8<br>C等价于AX * 10<br>D等价于AX * 64</li><li>判断 <code>AL</code>的值是否是某个正整数的 <code>2^n</code>次方，若 <code>al=10000110b</code>，至少需要移位 <strong>4</strong> 位，通过 <code>cf</code>的值可判断出结果。正确答案: <strong>D</strong></li><li>中断向量表中存放的是 中断处理程序的入口地址。正确答案: <strong>D</strong></li><li>可以实现将 <code>ax</code>的值增大2倍的是 <strong>shl ax,1</strong>。正确答案: <strong>C</strong></li><li>对于8086CPU，正确的指令是 <strong>shl ax,2</strong>。正确答案: <strong>B</strong></li><li>这道题选<strong>A</strong>,t命令指的是单步中断，并不是执行一条指令</li><li>mov ax,4c00h int 21h&#96; 这段程序的作用是 <strong>返回DOS</strong>正确答案: <strong>C</strong></li><li>正确的说法是 <strong>十进制数码的ASCII码&#x3D;十进制数码的BCD码+30h</strong>。正确答案: <strong>D</strong></li></ol><h2 id="二-用一条指令写出实现下列指明的功能"><a href="#二-用一条指令写出实现下列指明的功能" class="headerlink" title="二.用一条指令写出实现下列指明的功能"></a>二.用一条指令写出实现下列指明的功能</h2><ol><li>截取BL寄存器的低4位。</li><li>将AX寄存器高4位清0。</li><li>将CX 寄存器D14位设置为1，其余位保持不变。</li><li>将AL中的低4位代码变反，而其高4位代码不变。</li><li>测试AL最低位是否为1。</li><li>完成将AX清零，并使标志位CF清零。</li><li>AX的内容加1。要求不影响CF。</li><li>传送25H到AL寄存器。</li><li>AL内容乘以BL内容。</li><li>AX内容乘以BX内容。</li><li>将AL寄存器值乘2 。</li><li>AX寄存器的值入栈保存。</li><li>把堆栈栈顶数据出栈存入BX寄存器中</li><li>标志寄存器的值入栈保存。</li><li>把堆栈弹出数据送入标志寄存器中</li><li>将BL寄存器值减1。</li><li>将BL寄存器值加1。</li><li>把数0A0H与AL寄存器的内容相加,并把结果送回AL中。</li><li>把数0A0H、AL寄存器和进位标志相加,并把结果送回AL中。</li><li>把AX寄存器的值减去数789AH，并把结果送回AX中。</li><li>把AX寄存器的值减去数789AH和借位，并把结果送回AX中。</li><li>用寄存器BX和SI的基址变址寻址方式，把存储器中的一个字节与AL寄存器的内容相加，并保存在AL寄存器中。</li><li>用BX和位移量0B2H的寄存器相对寻址方式把一个字和CX寄存器的内容相加,并把结果送回内存中。</li><li>调用7CH中断</li><li>把DF标志设置为1</li><li>把DF标志清0</li><li>把IF标志设置为1</li><li>把IF标志清0</li><li>当CX为0时，跳转到名为S1的标号处</li><li>当上条运算指令结果为正数时，跳转到名为S1的标号处</li><li>当上条运算指令结果为负数时，跳转到名为S2的标号处</li></ol><h4 id="答案与解析-6"><a href="#答案与解析-6" class="headerlink" title="答案与解析"></a>答案与解析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">and bl, 0Fh</span><br><span class="line">and ax, 0FFFh</span><br><span class="line">or cx, 4000h</span><br><span class="line">xor al, 0Fh</span><br><span class="line">test al, 1</span><br><span class="line">xor ax, ax</span><br><span class="line">inc ax</span><br><span class="line">mov al, 25h</span><br><span class="line"> mul bl</span><br><span class="line">mul bx</span><br><span class="line">shl al, 1</span><br><span class="line">push ax</span><br><span class="line">pop bx</span><br><span class="line">pushf</span><br><span class="line">popf</span><br><span class="line">dec bl</span><br><span class="line">inc bl</span><br><span class="line">add al, 0A0h</span><br><span class="line">adc al, 0A0h</span><br><span class="line">sub ax, 789Ah</span><br><span class="line">sbb ax, 789Ah</span><br><span class="line">add al, [bx+si]</span><br><span class="line">add [bx+0B2h], cx</span><br><span class="line">int 7Ch</span><br><span class="line">std</span><br><span class="line">cld</span><br><span class="line">sti</span><br><span class="line">cli</span><br><span class="line">jcxz S1</span><br><span class="line">jns S1</span><br><span class="line">js S2</span><br></pre></td></tr></table></figure><h2 id="三-程序分析"><a href="#三-程序分析" class="headerlink" title="三.程序分析"></a>三.程序分析</h2><ol><li>以下程序计算2^8，选一个数据补全程序。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assume cs：code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start： mov ax,2</span><br><span class="line">         mov  cx,_____</span><br><span class="line">    s：  add ax,ax</span><br><span class="line">         loop s</span><br><span class="line">         mov  ax,4c00h</span><br><span class="line">         int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>A. 8   B. 7   C. 4   D. 128</p><ol start="2"><li>如下程序执行后，AX&#x3D;（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> assume cs：code </span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start： mov ax,2</span><br><span class="line">         mov  bx,2</span><br><span class="line"></span><br><span class="line">         mov  cx,0</span><br><span class="line">s： add ax,bx</span><br><span class="line">         loop s</span><br><span class="line">         mov  ax,4c00h</span><br><span class="line">         int  21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>A. 2    B. 4    C. 0FFFEH   D. 0FFFCH</p><ol start="3"><li>以下指令执行后，10000H~10006H内存单元中的内容是（  ）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,1000H </span><br><span class="line">MOV DS,AX </span><br><span class="line">MOV BX,0000H </span><br><span class="line">MOV AX,3E88H </span><br><span class="line">MOV [BX],AX </span><br><span class="line">INC BX </span><br><span class="line">INC BX </span><br><span class="line">MOV [BX],AH </span><br><span class="line">MOV AH,0 </span><br><span class="line">INC BX </span><br><span class="line">MOV [BX],AX </span><br><span class="line">INC BX </span><br><span class="line">MOV [BX],AX </span><br><span class="line">MOV AX,DS：[1] </span><br><span class="line">INC BX </span><br><span class="line">INC BX </span><br><span class="line">MOV [BX],AX</span><br></pre></td></tr></table></figure><p>A.88H,3EH,3EH,88H,88H,00H,3EH</p><p>B.88H,3EH,3EH,88H,00H,88H,00H</p><p>C.88H,3EH,3EH,88H,00H,3EH,3EH</p><p>D.88H,3EH,3EH,88H,88H,3EH,3EH</p><ol start="4"><li>补全以下程序，计算00101000h-00202000h的值，并将计算结果的高位保存在AX中，低位保存在BX中。（ ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,0010H</span><br><span class="line">MOV BX,1000H</span><br><span class="line">___________</span><br><span class="line">___________</span><br></pre></td></tr></table></figure><p>A.SUB BX,2000H   B.SBB BX,2000H</p><p>SUB AX,0020H     SUB AX,0020</p><p>C.SUB BX,2000H   D.SBB BX,2000H</p><p>SBB AX,0020H    SBB AX,0020H</p><ol start="5"><li>补全程序，使其可以实现.SUM&#x3D;字符串STR中的所有BYTE型数据的和。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   ASSUME CS：CODE,ES：DATA</span><br><span class="line"></span><br><span class="line">DATA SEGMENT</span><br><span class="line"></span><br><span class="line">    STR  DB &#x27;NULL POINTER ASSIGNMENT.&#x27;</span><br><span class="line"></span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">    SUM  DW   0</span><br><span class="line">START：MOV AX,DATA</span><br><span class="line"></span><br><span class="line">         MOV  ____,AX</span><br><span class="line"></span><br><span class="line">         MOV  SI,0</span><br><span class="line"></span><br><span class="line">         MOV  CX,24</span><br><span class="line"></span><br><span class="line">S：MOV AL,STR[SI]</span><br><span class="line"></span><br><span class="line">         ADD  ____,AL</span><br><span class="line"></span><br><span class="line">         ADC  BYTE PTR SUM[1],0</span><br><span class="line"></span><br><span class="line">         LOOP S</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">         MOV  AX,4C00H</span><br><span class="line"></span><br><span class="line">         INT  21H</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line"></span><br><span class="line">END START  </span><br></pre></td></tr></table></figure><p>A.DS，SUM[2]       B.ES，SUM[2]</p><p>C.ES，BYTE PTR SUM[0]  D.DS，BYTE PTR SUM[0]</p><ol start="6"><li>以下程序实现将data段中的大写字母转换为小写，小写字母转换为大写。补全程序。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> ASSUME CS：CODE</span><br><span class="line"></span><br><span class="line">DATA SEGMENT</span><br><span class="line">         DB &quot;heLLo&quot;</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line"></span><br><span class="line">START：MOV AX,DATA</span><br><span class="line">         MOV  DS,AX</span><br><span class="line"></span><br><span class="line">         MOV  BX,0</span><br><span class="line">         MOV  CX,5</span><br><span class="line">S：ADD BYTE PTR [BX],00100000B ；加上20h，大写变小写，小写多加</span><br><span class="line">         AND  BYTE PTR [BX],_________ ；</span><br><span class="line"></span><br><span class="line">         OR   BYTE PTR [BX],01100000B  ；D6D5位置1</span><br><span class="line"></span><br><span class="line">         INC  BX</span><br><span class="line"></span><br><span class="line">         LOOP S</span><br><span class="line"></span><br><span class="line">         MOV  AX,4C00H</span><br><span class="line"></span><br><span class="line">         INT  21H</span><br><span class="line">CODE ENDS</span><br><span class="line"></span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>A.01H   B.00H   C.80H   D.7FH    E.前几个选项都不对</p><ol start="7"><li>下面的程序统计1000：0处的32个字节型整数中，其值在[-64,-16]中的数据的个数，结果存在DX中。补全这个程序。（ ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000h</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">mov dx,0</span><br><span class="line"></span><br><span class="line">mov cx,32</span><br><span class="line"></span><br><span class="line">s：  mov al,0</span><br><span class="line"></span><br><span class="line">________</span><br><span class="line"></span><br><span class="line">cmp al,16</span><br><span class="line"></span><br><span class="line">________</span><br><span class="line"></span><br><span class="line">cmp al,64</span><br><span class="line"></span><br><span class="line">________</span><br><span class="line"></span><br><span class="line">inc dx</span><br><span class="line"></span><br><span class="line">s0： inc bx</span><br><span class="line"></span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p>A.   or al,[bx]；jmp ax；shr al,1</p><p>B.   add al,[bx]；jnb s0；jna s0</p><p>C.   and al,[bx]；je s0；je s</p><p>D.   sub al,[bx]；jb s0；ja s0</p><p>E． 前几个选项都不对。</p><ol start="8"><li><p>补全程序，使其可以实现将“assembly”复制到0：200处的内存空间中。（  ）</p><p>assume cs：code,ds：data<br>  data segment<br>   db ‘assembly’<br>   data ends<br> code segment</p><p> start： mov ax,data</p><p> mov ds,ax</p><p> mov si,___</p><p> mov ax,0</p><p> mov es,ax</p><p> mov di,___</p><p> mov cx,___</p><p> std</p><p> rep movsw</p><p> mov ax,4c00h</p><p> int 21h<br>  code ends<br>  end start</p></li></ol><p>A.6，206h，4</p><p>B.8，208h，4</p><p>C.0，200h，8</p><p>D.0，200h，4</p><ol start="9"><li>补全程序，使其可以实现(AX)&#x3D;2^10。（  ）</li></ol><p> mov ax,2</p><p>mov cx,___<br>s： add ax,ax</p><p>   loop s</p><p>A.8           B.9           C.10               D.11</p><ol start="10"><li>以下程序执行后，ax的值是（  ）。</li></ol><p>assembly<br>mov ax,0<br>push ax</p><p> popf ;标志寄存器值为0</p><p> mov ax,0fff0h</p><p> add ax,88h ;结果是0078H，OF&#x3D;0,SF&#x3D;0,ZF&#x3D;0,PF&#x3D;1,CF&#x3D;1</p><p> Pushf  ;标志寄存器压入堆栈</p><p> pop ax ;栈顶弹出一个字到ax，即标志寄存器值</p><p> and al,11000101b ;保留AX的D7（sf） D6（zf） D2（pf） D0（cf）位，其余清0</p><p> and ah,10001000b ;保留AX的D15（0） D11（of）位，其余清0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参考.标志寄存器</span><br><span class="line"></span><br><span class="line">15   14   13   12   11   10   9    8    7    6    5    4     3    2    1    0</span><br><span class="line"></span><br><span class="line">                   OF  DF  IF   TF   SF   ZF       AF          PF       CF</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A. 1h   B. 804h  C. 5h    D. 前三个选项都不对</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">11.   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```assembly</span><br><span class="line"> assume cs：code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line"></span><br><span class="line">          db 16 dup(0)</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start： mov ax,stack</span><br><span class="line">         mov  ss,ax</span><br><span class="line"></span><br><span class="line">         mov  sp,16</span><br><span class="line">         mov  ax,sp</span><br><span class="line"></span><br><span class="line">         push cs</span><br><span class="line"></span><br><span class="line">         call s</span><br><span class="line"></span><br><span class="line">         sub  ax,sp</span><br><span class="line"></span><br><span class="line">s：pop ax</span><br><span class="line">         mov  ax,4c00h</span><br><span class="line"></span><br><span class="line">         int  21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>这个程序加载到内存后，其一段程序所在的内存空间的情况如下：</p><p>内存地址  机器码   所对应的源程序中的指令</p><p>1000：0008 8BC4    mov ax,sp</p><p>1000：000A 0E     push cs</p><p>1000：000B E80200   call s</p><p>1000：000E 2BC4    sub ax,sp</p><p>1000：0010 58    s：pop ax</p><p>执行这个程序，“pop ax”执行后，ax的值为（ ）。</p><p>A. 8h   B. 0bh  C. 0eh  D. 1000h  E. 2  F. 10h</p><ol start="12"><li>以下程序计算(345-333)^2，结果存在dx.ax中。补全这个程序。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> assume cs：code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start： mov ax,333</span><br><span class="line"></span><br><span class="line">         push ax</span><br><span class="line"></span><br><span class="line">         mov  ax,345</span><br><span class="line"></span><br><span class="line">         push ax</span><br><span class="line"></span><br><span class="line">         call calc</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         mov  ax,4c00h</span><br><span class="line"></span><br><span class="line">         int  21h</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">calc： push bp</span><br><span class="line"></span><br><span class="line">         mov  bp,sp</span><br><span class="line"></span><br><span class="line">         mov  ax,_____</span><br><span class="line"></span><br><span class="line">         sub  ax,_____</span><br><span class="line"></span><br><span class="line">         mov  bp,ax</span><br><span class="line"></span><br><span class="line">         mul  bp</span><br><span class="line"></span><br><span class="line">         pop  bp</span><br><span class="line"></span><br><span class="line">         ret  4</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>A.[bp+6]，[bp+8]    B.[bp+4]，[bp+6]</p><p>C.[bp+2]，[bp+4]    D.[bp+4]，[bp+2]</p><ol start="13"><li>以下程序统计0f123：0处的32个字节中，大小在(15，100]的数据的个数，结果存在dx中。补全这个程序。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0f123h</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">mov dx,0</span><br><span class="line"></span><br><span class="line">mov cx,32</span><br><span class="line"></span><br><span class="line">s： mov al,[bx]</span><br><span class="line"></span><br><span class="line">cmp al,15</span><br><span class="line"></span><br><span class="line">_________</span><br><span class="line"></span><br><span class="line">cmp al,100</span><br><span class="line"></span><br><span class="line">_________</span><br><span class="line"></span><br><span class="line">inc dx</span><br><span class="line"></span><br><span class="line">s0：inc bx</span><br><span class="line"></span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><ol start="14"><li>以下程序统计0f123：0处的32个字节中，大小在(-100，0）的数据的和，结果存在dx中。补全这个程序。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0f123h</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov dx,0</span><br><span class="line">mov cx,32</span><br><span class="line">s： mov al,[bx]</span><br><span class="line">_________</span><br><span class="line">cmp al,-100</span><br><span class="line">_________</span><br><span class="line">cmp al,0</span><br><span class="line"></span><br><span class="line">_________</span><br><span class="line"></span><br><span class="line">add dx，ax</span><br><span class="line"></span><br><span class="line">s0：inc bx</span><br><span class="line"></span><br><span class="line">  loop s</span><br></pre></td></tr></table></figure><ol start="15"><li>以下程序执行到(cx)&#x3D;0时，CPU几次修改IP？（ ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov cx,2</span><br><span class="line"></span><br><span class="line">s ax,bx</span><br><span class="line"></span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p> A. 3   B. 5    C. 6   D. 7   E. 8   F. 9</p><ol start="16"><li>用debug查看内存，结果如下.</li></ol><p> 2000：0200 00 01 02 03 04 05 06 07-08 09 0A 0B 0C 0D 0E 0F</p><p>2000：0210 10 11 12 13 14 15 16 17-18 19 1A 1B 1C 1D 1E 1F</p><p>下面的程序执行后，ax、cx、dx中的内容依次是（  ）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1fffh</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ss,ax</span><br><span class="line"></span><br><span class="line">mov bx,210h</span><br><span class="line"></span><br><span class="line">mov sp,bx</span><br><span class="line"></span><br><span class="line">mov ax,[bx] </span><br><span class="line"></span><br><span class="line">mov cx,[bx+12h]</span><br><span class="line"></span><br><span class="line">pop dx</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>A.未知，未知，未知      B.0100h，1312h，未知</p><p>C.0001h，1213h，1415h     D.0100h，1312h，0100h</p><ol start="17"><li>补全程序，使其可以实现.累加a处的8个数据，结果存在b处的双字中。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">assume cs：code,ds：data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">a dw 1,2,3,4,5,6,7,8</span><br><span class="line"></span><br><span class="line">b dd 0</span><br><span class="line"></span><br><span class="line">c dw a,b</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>A. start： mov ax,data</p><p>mov ds,ax</p><p>mov si,0</p><p>mov cx,8</p><p>s： mov ax,a[si]</p><p>add b[0],ax</p><p>adc b[2],ax</p><p>add si,2</p><p>loop s</p><p>B. start： mov si,0</p><p>mov cx,8</p><p>s： mov ax,a[si]</p><p>add word ptr b[0],ax</p><p>adc word ptr b[2],0</p><p>add si,1</p><p>loop s</p><p>C. start： mov ax,seg a</p><p>mov ds,ax</p><p>mov si,0</p><p>mov cx,8</p><p>s： mov ax,a[si]</p><p>mov bx,offset b</p><p>   add word ptr[bx],ax</p><p>adc word ptr 2[bx],0</p><p>add si,2</p><p>loop s</p><p>D. start： mov ax,data</p><p>mov ds,ax</p><p>mov si,0</p><p>mov cx,8</p><p>s： mov ax,a[si]</p><p>mov bx,word ptr c[0]</p><p>add word ptr [bx],ax</p><p>mov bx,word ptr c[2]</p><p>adc word ptr[bx],0</p><p>add si,2</p><p>loop s</p><ol start="18"><li>补全程序，使其可以实现.将data段中的字符串转化为大写。（  ）</li></ol><p>assume cs：code</p><p>data segment</p><p>db ‘conversation’,0</p><p>data ends</p><p>code segment</p><p>start：</p><p>mov ax,data</p><p>mov ds,ax</p><p>mov si,0</p><p>mov cx,12</p><p>call capital</p><p>mov ax,4c00h</p><p>int 21h</p><p>capital：</p><p>……</p><p>code ends</p><p>end start</p><p>A.   or byte ptr [si],00100000b</p><p>inc si</p><p>loop capital</p><p>ret</p><p>B.   mov cl,[si]</p><p>mov ch,0</p><p>jcxz ok</p><p>sub word ptr [si],20h</p><p>inc si</p><p>inc si</p><p>jmp short capital</p><p>ok： ret</p><p>C.     mov cl,11011111b</p><p>s： push cx</p><p>and byte ptr [si],cl</p><p>inc si</p><p>pop cx</p><p>loop s</p><p>ok： ret</p><p>D.   mov cl,[si]</p><p>mov ch,0</p><p>inc cx</p><p>loop ok</p><p>ret</p><p>ok： and byte ptr [si],11011111b</p><p>inc si</p><p>jmp capital</p><ol start="19"><li>以下程序中所有的转移指令的机器码都是两个字节。用一条指令补全程序，使其可以由代码段中的程序段返回。（  ）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> assume cs：code</span><br><span class="line">code segment</span><br><span class="line">         mov           ax,4c00h</span><br><span class="line">         int           21h</span><br><span class="line">start：</span><br><span class="line">         nop</span><br><span class="line">         nop</span><br><span class="line">         push          cs</span><br><span class="line">         pop           ds</span><br><span class="line">         mov           si,offset o</span><br><span class="line">         mov           di,offset start</span><br><span class="line">         mov           ax,ds：[si]</span><br><span class="line">         mov           ds：[di],ax</span><br><span class="line">         mov           cx,-2</span><br><span class="line">s：</span><br><span class="line">         jcxz          start</span><br><span class="line">         _____________</span><br><span class="line"></span><br><span class="line">o： loop s</span><br><span class="line">code ends</span><br><span class="line">  end start</span><br></pre></td></tr></table></figure><p>A.add cx,2(机器码：83H C1H 02H)</p><p>B.add cx,1(机器码：83H C1H 01H)</p><p>C.inc cx(机器码：41H)</p><p>D.以上都不对</p><ol start="20"><li>用debug查看内存单元，结果如下。则执行以下程序，ax的值是多少？（  ）</li></ol><p>1100：F000 BE 00 06 00 6A 22</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,2000H</span><br><span class="line"></span><br><span class="line">MOV DS,AX</span><br><span class="line"></span><br><span class="line">MOV BX,0000H</span><br><span class="line"></span><br><span class="line">MOV SI,0</span><br><span class="line"></span><br><span class="line">MOV AX,2[BX][SI]  </span><br><span class="line"></span><br><span class="line">INC SI</span><br><span class="line"></span><br><span class="line">ADD AX,2[BX][SI]   </span><br><span class="line"></span><br><span class="line">INC SI</span><br><span class="line"></span><br><span class="line">MOV DI,SI</span><br><span class="line"></span><br><span class="line">SUB AX,2[BX][DI]  </span><br></pre></td></tr></table></figure><p>A.9C06H    B.479CH   C.7006H   D.8C70H</p><ol start="21"><li>下面的程序执行后，AX中的数值为多少？</li></ol><p>内存地址 机器码 汇编指令</p><p>1000:0 B8 00 00 MOV AX,0</p><p>1000:3 E8 01 00 CALL S</p><p>1000:6 40 INC AX</p><p>1000:7 58 S:POP AX</p><ol start="22"><li>下面的程序执行后，AX中的数值为多少？</li></ol><p>内存地址 机器码 汇编指令</p><p>1000:0 B8 00 00 MOV AX,0</p><p>1000:3 9A 09 00 00 10 CALL FAR PTR S</p><p>1000:8 40 INC AX</p><p>1000:9 58 S:POP AX</p><p>ADD AX,AX</p><p>POP BX</p><p>ADD AX,BX</p><ol start="23"><li>下面的程序执行后，AX中的数值为多少？</li></ol><p>内存地址 机器码 汇编指令</p><p>1000:0 B8 06 00 MOV AX,6</p><p>1000:2 FF D0 CALL AX</p><p>1000:5 40 INC AX</p><p>1000:6 MOV BP,SP</p><p>ADD AX,[BP]</p><ol start="24"><li>程序如下。</li></ol><p>ASSUME CS:CODE</p><p>DATA SEGMENT</p><p>？</p><p>DATA ENDS</p><p>CODE SEGMENT</p><p>START: MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV BX,0</p><p>JMP WORD PTR [BX+1]</p><p>CODE ENDS</p><p>END START</p><p>若要使程序中的JMP指令执行后，CS:IP指向程序的第一条指令，在DATA段中应该定义哪些数据?</p><ol start="25"><li>程序如下。</li></ol><p>ASSUME CS:CODE,DS:DATA</p><p>DATA SEGMENT</p><p>DD 12345678H</p><p>DATA ENDS</p><p>CODE SEGMENT</p><p>START: MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV BX,0</p><p>MOV [BX],_______</p><p>MOV [BX+2],_________</p><p>JMP DWORD PTR DS:[0]</p><p>CODE ENDS</p><p>END START</p><p>补全程序，使JMP指令执行后，CS:IP指向程序的第一条指令。</p><ol start="26"><li>用DEBUG查看内存，结果如下：</li></ol><p>2000:1000 BE 00 06 00 00 00 ……</p><p>则此时，CPU执行指令：</p><p>MOV AX,2000H</p><p>MOV ES,AX</p><p>JMP DWORD PTR ES:[1000H]</p><p>后，(CS)&#x3D;? , (IP)&#x3D;?</p><ol start="27"><li>补全下面的程序，统计F000:0处32个字节中，大小在[32,128]的数据的个数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0f000h</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">mov dx,0</span><br><span class="line"></span><br><span class="line">mov cx,32</span><br><span class="line"></span><br><span class="line">s:mov al,[bx]</span><br><span class="line"></span><br><span class="line">cmp al,32</span><br><span class="line"></span><br><span class="line">_________</span><br><span class="line"></span><br><span class="line">cmp al,120</span><br><span class="line"></span><br><span class="line">__________</span><br><span class="line"></span><br><span class="line">inc dx</span><br><span class="line"></span><br><span class="line">s0:inc bx</span><br><span class="line"></span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><ol start="28"><li>补全下面的程序，统计F000:0处32个字节中，大小在(-32,32)的数据的个数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0f000h</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">mov dx,0</span><br><span class="line"></span><br><span class="line">mov cx,32</span><br><span class="line"></span><br><span class="line">s:mov al,[bx]</span><br><span class="line"></span><br><span class="line">cmp al,32</span><br><span class="line"></span><br><span class="line">__________</span><br><span class="line"></span><br><span class="line">cmp al,120</span><br><span class="line"></span><br><span class="line">___________</span><br><span class="line"></span><br><span class="line">inc dx</span><br><span class="line"></span><br><span class="line">s0:inc bx</span><br><span class="line"></span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p>(1) 程序如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start: mov ax,data</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">jmp word ptr [bx+1]</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>若要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令，在data段中应该定义哪些数据?</p><p>(2) 程序如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">dd 12345678h</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start: mov ax,data</span><br><span class="line"></span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">_______________________</span><br><span class="line"></span><br><span class="line">________________________</span><br><span class="line"></span><br><span class="line">jmp dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>补全程序，使jmp指令执行后，CS:IP指向程序的第一条指令。</p><p>(3)用Debug查看内存，结果如下：</p><p>2000:1000 BE 00 06 00 00 00 ……</p><p>则此时，CPU执行指令：</p><p>mov ax,2000H</p><p>mov es,ax</p><p>jmp dword ptr es:[1000H]</p><p>后，(CS)&#x3D;? , (IP)&#x3D;?</p><h4 id="答案与解析-7"><a href="#答案与解析-7" class="headerlink" title="答案与解析"></a>答案与解析</h4><ol><li><p>正确答案是 B. 7。2^1 *2^7&#x3D;2^8,所以循环7次就行</p></li><li><p>AX的初始值是2，BX也是2。程序中没有循环，因此AX的值不会改变。正确答案是 A. 2。</p></li><li><p>C.88H,3EH,3EH,88H,00H,3EH,3EH。</p></li><li><p>正确的指令是 D. SBB BX,2000H 和 SBB AX,0020H。</p></li><li><p>正确答案是 D. DS，BYTE PTR SUM[0]。</p></li><li><p>正确的指令是 AND BYTE PTR [BX],7FH。</p></li><li><p>正确的指令是 D. sub al,[bx]；jb s0；ja s0。</p></li><li><p>正确答案是 C.0，200h，8。</p></li><li><p>正确答案是 B.9。</p></li><li><p>答案是 B. 804h1。</p></li><li><p>答案是 A. 8h。</p></li><li><p>答案是 C. [bp+2]，[bp+4]。</p></li><li><p>答案是 jg s0 和 jle s0</p></li><li><p>答案是 test al, al 和 jge s0。</p></li><li><p>答案是 C. 66。</p></li><li><p>答案是 C. 0001h，1213h，1415h7。</p></li><li><p>正确的答案是 <strong>D</strong>。</p></li><li><p>对于第18题，正确的答案是 <strong>C</strong>。</p></li><li><p>对于第19题，正确的答案是 <strong>A</strong>。</p></li><li><p><code>ax</code>寄存器的值是 <strong>D.8C70H</strong>。</p><p>后面的都是程序设计，懒得弄了，自己看吧</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>教材中的检测点</li><li>实验1~实验九</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QtDesign预览的效果与程序运行结果不一致的解决方法</title>
      <link href="/2024/10/09/QtDesign%E9%A2%84%E8%A7%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/10/09/QtDesign%E9%A2%84%E8%A7%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>使用Qt designer软件设计出来的界面，与转换成python程序运行出来的结果不一致，具体看下图</p><h3 id="Qt-designer预览结果"><a href="#Qt-designer预览结果" class="headerlink" title="Qt designer预览结果"></a>Qt designer预览结果</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/QtDesign%E9%A2%84%E8%A7%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20241009215433588.png" alt="image-20241009215433588"></p><h3 id="程序运行出来的结果"><a href="#程序运行出来的结果" class="headerlink" title="程序运行出来的结果"></a>程序运行出来的结果</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/QtDesign%E9%A2%84%E8%A7%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20241009215458231.png" alt="image-20241009215458231"></p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>我自己的电脑是2560*1600分辨率的屏幕，采用的是200%的缩放比例，出现这种情况是Windows在高dpi下的老毛病了，常见的现象就是应用程序的各个组件缩放不正常。什么是高dpi以及缩放之类的问题，这里不做探讨，有兴趣的读者可以自己去了解。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在程序中加入这一行代码，它的作用是启动应用程序的高dpi缩放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/QtDesign%E9%A2%84%E8%A7%88%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20241009220239777.png" alt="image-20241009220239777"></p><h3 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h3><p>请勿用以下的方法启动高dpi缩放，高dpi缩放必须在app创建之前启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling,<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">程序会出现以下的提示</span></span><br><span class="line"><span class="string">Attribute Qt::AA_EnableHighDpiScaling must be set before QCoreApplication is created.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验14</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p> 访问CMOS RAM 编程：以“年&#x2F;月&#x2F;日 时:分:秒”的格式，显示当前的日期、时间。（课本实验14）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">    time  db &#x27;yy/mm/dd hh:mm:ss$&#x27;    ;int 21h 显示字符串，要求以$结尾</span><br><span class="line">    table db 9,8,7,4,2,0             ;各时间量的存放单元</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,data</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  si,offset table</span><br><span class="line">          mov  di,offset time</span><br><span class="line">          mov  cx,6</span><br><span class="line">    s:    </span><br><span class="line">          push cx</span><br><span class="line">          mov  al,ds:[si]         ;读端口</span><br><span class="line">          out  70h,al</span><br><span class="line">          in   al,71h</span><br><span class="line">          mov  ah,al</span><br><span class="line">          mov  cl,4</span><br><span class="line">          shr  ah,cl              ;将压缩BCD码分为两个BCD码</span><br><span class="line">          and  al,00001111b</span><br><span class="line">          add  ah,30h             ;变为字符</span><br><span class="line">          add  al,30h</span><br><span class="line">          mov  ds:[di],ah</span><br><span class="line">          mov  ds:[di+1],al       ;写进time</span><br><span class="line">          inc  si</span><br><span class="line">          add  di,3</span><br><span class="line">          pop  cx</span><br><span class="line">          loop s</span><br><span class="line">          mov  ah,0</span><br><span class="line">          mov  bh,0</span><br><span class="line">          mov  dh,10              ;置光标于10行40列</span><br><span class="line">          mov  dl,40</span><br><span class="line">          int  10h</span><br><span class="line">          mov  dx,offset time</span><br><span class="line">          mov  ah,9               ;显示字符串</span><br><span class="line">          int  21h</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/0cd2df99c2406ab45828f10aa8877789.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验13</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>编写、应用中断例程（课本实验13）</p><ol><li>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0:200处。</li></ol><p>参数：(dh)&#x3D;行号，(dl)&#x3D;列号，(cl)&#x3D;颜色，ds:si指向字符串首地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">         db &#x27;welcome to masm!&#x27;,0</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,cs</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  si,offset dp</span><br><span class="line">          mov  ax,0</span><br><span class="line">          mov  es,ax</span><br><span class="line">          mov  di,200h</span><br><span class="line">          mov  cx,offset dpend-offset dp    ;安装中断例程</span><br><span class="line">          cld</span><br><span class="line">          rep  movsb</span><br><span class="line">          mov  word ptr es:[7ch*4],200h</span><br><span class="line">          mov  word ptr es:[7ch*4+2],0      ;设置中断向量表</span><br><span class="line"></span><br><span class="line">          mov  dh,10</span><br><span class="line">          mov  dl,10</span><br><span class="line">          mov  cl,2</span><br><span class="line">          mov  ax,data</span><br><span class="line">          mov  ds,ax                        ;测试int 7ch</span><br><span class="line">          mov  si,0</span><br><span class="line">          int  7ch</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">    dp:   </span><br><span class="line">          mov  al,160</span><br><span class="line">          mul  dh</span><br><span class="line">          add  dl,dl</span><br><span class="line">          mov  dh,0</span><br><span class="line">          add  ax,dx</span><br><span class="line">          mov  di,ax</span><br><span class="line">          mov  ax,0b800h</span><br><span class="line">          mov  es,ax</span><br><span class="line">    ;中断例程</span><br><span class="line">    s:    </span><br><span class="line">          mov  al,ds:[si]</span><br><span class="line">          mov  ah,0</span><br><span class="line">          cmp  ax,0</span><br><span class="line">          je   f</span><br><span class="line">          mov  ah,cl</span><br><span class="line">          mov  es:[di],ax</span><br><span class="line">          inc  si</span><br><span class="line">          inc  di</span><br><span class="line">          inc  di</span><br><span class="line">          jmp  s</span><br><span class="line">    f:    </span><br><span class="line">          iret</span><br><span class="line">    dpend:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/85c8948aed7ec9ebebd14f6dcaf9dbd9.png"></p><ol start="2"><li>编写并安装int 7ch中断例程，功能为完成loop指令的功能。</li></ol><p>参数：(cx)&#x3D;循环次数，(bx)&#x3D;位移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,cs</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  si,offset lp</span><br><span class="line">            mov  ax,0</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  di,200h</span><br><span class="line">            mov  cx,offset lpend-offset lp      ;安装中断例程</span><br><span class="line">            cld</span><br><span class="line">            rep  movsb</span><br><span class="line">            mov  word ptr es:[7ch*4],200h</span><br><span class="line">            mov  word ptr es:[7ch*4+2],0        ;设置中断向量表</span><br><span class="line"></span><br><span class="line">            mov  ax,0b800h</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  di,160*12</span><br><span class="line">            mov  bx,offset s-offset se</span><br><span class="line">            mov  cx,80</span><br><span class="line">      s:    </span><br><span class="line">            mov  byte ptr es:[di],&#x27;!&#x27;           ;测试int 7ch</span><br><span class="line">            add  di,2</span><br><span class="line">            int  7ch</span><br><span class="line">      se:   </span><br><span class="line">            nop</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">      lp:   </span><br><span class="line">            push bp</span><br><span class="line"></span><br><span class="line">            dec  cx</span><br><span class="line">            jcxz f</span><br><span class="line">            mov  bp,sp</span><br><span class="line">            add  [bp+2],bx                      ;中断例程</span><br><span class="line">      f:    </span><br><span class="line">            pop  bp</span><br><span class="line">            iret</span><br><span class="line">      lpend:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/8187d1147530d827096bdfdbae71b1d5.png"></p><ol start="3"><li>下面的程序，分别在屏幕的第2、4、6、8行显示四句英文诗，补全程序。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    s1:   db   &#x27;Good,better,best,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s2:   db   &#x27;Never let it rest,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s3:   db   &#x27;Till good is better,&#x27;,&#x27;$&#x27;</span><br><span class="line">    s4:   db   &#x27;And better,best.&#x27;,&#x27;$&#x27;</span><br><span class="line">    s:    dw   offset s1,offset s2,offset s3,offset s4</span><br><span class="line">    row:  db   2,4,6,8</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,cs</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  bx,offset s</span><br><span class="line">          mov  si,offset row</span><br><span class="line">          mov  cx,4</span><br><span class="line">    ok:   mov  bh,0</span><br><span class="line">          mov  dh,[si]</span><br><span class="line">          mov  dl,0</span><br><span class="line">          mov  ah,2</span><br><span class="line">          int  10h</span><br><span class="line">          mov  dx,[bx]</span><br><span class="line">          mov  ah,9</span><br><span class="line">          int  21h</span><br><span class="line">          inc  si</span><br><span class="line">          add  bx,2</span><br><span class="line">          loop ok</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/5d454baece004d82f6ab48e86b52442f.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验12</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>实验内容、程序清单及运行结果</li></ol><p>编写0号中断的处理程序（课本实验12）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/0bd263fd521760fbda9f9f7efb9b8e3e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    start:  </span><br><span class="line">            mov  ax,cs</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  si,offset do</span><br><span class="line">            mov  ax,0</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  di,200h</span><br><span class="line">            mov  cx,offset doend-offset do    ;安装中断例程</span><br><span class="line">            cld</span><br><span class="line">            rep  movsb</span><br><span class="line">            mov  word ptr es:[0],200h</span><br><span class="line">            mov  word ptr es:[2],0            ;设置中断向量表</span><br><span class="line">            mov  dx,0ffffh</span><br><span class="line">            mov  bx,1                         ;测试一下</span><br><span class="line">            div  bx</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">    do:     jmp  short dostart</span><br><span class="line">            db   &#x27;divide error!&#x27;</span><br><span class="line">    dostart:</span><br><span class="line">            mov  ax,0</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  si,202h</span><br><span class="line">            mov  ax,0b800h</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  di,160*10+80</span><br><span class="line">            mov  cx,13</span><br><span class="line">    s:      </span><br><span class="line">            mov  al,ds:[si]</span><br><span class="line">            mov  ah,2</span><br><span class="line">            mov  es:[di],ax</span><br><span class="line">            inc  si</span><br><span class="line">            inc  di</span><br><span class="line">            inc  di</span><br><span class="line">            loop s</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">    doend:  nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/015871ef9381c6cfe90d4239e8a30dd5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验10和11</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>编写子程序（课本实验10）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a2402e6d03f370daaa7946fde77581ad.png" alt="图形用户界面, 文本, 应用程序, 电子邮件 描述已自动生成"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack,ds:data</span><br><span class="line">data segment</span><br><span class="line">         db &#x27;Welcome to masm!&#x27;,0</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">          db 16 dup(0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start:   </span><br><span class="line">             mov  ax,stack</span><br><span class="line">             mov  ss,ax</span><br><span class="line">             mov  sp,10H</span><br><span class="line">             mov  ax,data</span><br><span class="line">             mov  ds,ax</span><br><span class="line">             mov  si,0             ;初始化</span><br><span class="line">             mov  dh,16</span><br><span class="line">             mov  dl,16</span><br><span class="line">             mov  cl,2             ;行号，列号以及颜色</span><br><span class="line">             call show_str</span><br><span class="line">             mov  ax,4c00h</span><br><span class="line">             int  21H</span><br><span class="line">    show_str:</span><br><span class="line">             mov  ax,0B800H</span><br><span class="line">             mov  es,ax            ;es指向显存地址</span><br><span class="line">             mov  al,00A0H         ;每行00A0字节</span><br><span class="line">             mul  dh               ;计算出行偏移量</span><br><span class="line">             push ax</span><br><span class="line">             mov  al,2             ;计算出列偏移量</span><br><span class="line">             mul  dl</span><br><span class="line">             pop  di               ;偏移地址=行偏移量+列偏移量</span><br><span class="line">             add  di,ax            ;存在di中</span><br><span class="line">    start_f: </span><br><span class="line">             push cx               ;颜色入栈</span><br><span class="line">             mov  cx,0</span><br><span class="line">             mov  cl,[si]          ;取得字符</span><br><span class="line">             jcxz end_f            ;判断是否为末位0</span><br><span class="line">             mov  es:[di],cl       ;低位存下字符</span><br><span class="line">             inc  di               ;指向高位</span><br><span class="line">             pop  cx               ;颜色出栈</span><br><span class="line">             mov  es:[di],cl       ;高位存下颜色</span><br><span class="line">             inc  di               ;指向显存下一个字</span><br><span class="line">             inc  si               ;指向下一个字符</span><br><span class="line">             jmp  short start_f</span><br><span class="line">    end_f:   </span><br><span class="line">             pop  cx               ;取出栈中cx后RET</span><br><span class="line">             RET</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/59c8f546e4ef13322137b1a8aee31e3b.png"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/28867fabeeec4cfe56e08518e2606883.png" alt="一些文字和图片的手机截图 描述已自动生成"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack,ds:data</span><br><span class="line">data segment</span><br><span class="line">    num  dw 123,12666,1,8,3,38</span><br><span class="line">    str  db 10 dup(0)             ;保存转化为ascii码后的字符串</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">          db 32 dup(0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start:   </span><br><span class="line">             mov  ax,stack</span><br><span class="line">             mov  ss,ax</span><br><span class="line">             mov  sp,20H</span><br><span class="line">             mov  ax,data</span><br><span class="line">             mov  ds,ax</span><br><span class="line">             mov  si,0</span><br><span class="line">             mov  cx,6</span><br><span class="line">             mov  bx,16            ;在第几行显示</span><br><span class="line">    s:       </span><br><span class="line">             mov  ax,[si]</span><br><span class="line">             push cx               ;保存循环状态</span><br><span class="line">             push si               ;保存指向第几个数</span><br><span class="line">             push bx               ;存下行数</span><br><span class="line">             mov  si,0             ;调用子程序dtoc</span><br><span class="line">             call dtoc             ;将ax的数值转化为字符串保存在str中</span><br><span class="line">             pop  bx               ;取出行数</span><br><span class="line">             mov  dh,bl            ;行数</span><br><span class="line">             mov  dl,16            ;列数</span><br><span class="line">             mov  cl,2</span><br><span class="line">             mov  si,offset str    ;字符串的开始位置</span><br><span class="line">             call show_str         ;调用子程序show_str</span><br><span class="line">             inc  bx               ;行数加一</span><br><span class="line">             pop  si</span><br><span class="line">             add  si,2             ;读取下一个数字</span><br><span class="line">             pop  cx</span><br><span class="line">             loop s</span><br><span class="line">             mov  ax,4c00h</span><br><span class="line">             int  21H</span><br><span class="line">    dtoc:    </span><br><span class="line">             mov  bx,10            ;除数</span><br><span class="line">             mov  dx,0             ;余数</span><br><span class="line">             div  bx</span><br><span class="line">             add  dx,30H           ;转为ascii码</span><br><span class="line">             push dx               ;存下余数</span><br><span class="line">             inc  si               ;记录长度</span><br><span class="line">             mov  cx,ax</span><br><span class="line">             jcxz end_d            ;被除数为零结束</span><br><span class="line">             jmp  short dtoc</span><br><span class="line">    end_d:   </span><br><span class="line">             mov  cx,si</span><br><span class="line">             mov  si,0</span><br><span class="line">    p:       pop  ax               ;将栈中的余数取出</span><br><span class="line">             mov  [str+si],al      ;保存到str中</span><br><span class="line">             inc  si</span><br><span class="line">             loop p</span><br><span class="line">             mov  al,0</span><br><span class="line">             mov  [str+si],al      ;str最后一位为0</span><br><span class="line">             RET</span><br><span class="line">    show_str:</span><br><span class="line">             mov  ax,0B800H</span><br><span class="line">             mov  es,ax            ;es指向显存地址</span><br><span class="line">             mov  al,00A0H         ;每行00A0字节</span><br><span class="line">             mul  dh               ;计算出行偏移量</span><br><span class="line">             push ax</span><br><span class="line">             mov  al,2             ;计算出列偏移量</span><br><span class="line">             mul  dl</span><br><span class="line">             pop  di               ;偏移地址=行偏移量+列偏移量</span><br><span class="line">             add  di,ax            ;存在di中</span><br><span class="line"></span><br><span class="line">    start_f: </span><br><span class="line">             push cx               ;颜色入栈</span><br><span class="line">             mov  cx,0</span><br><span class="line">             mov  cl,[si]          ;取得字符</span><br><span class="line">             jcxz end_f            ;判断是否为末位0</span><br><span class="line">             mov  es:[di],cl       ;低位存下字符</span><br><span class="line">             inc  di               ;指向高位</span><br><span class="line">             pop  cx               ;颜色出栈</span><br><span class="line">             mov  es:[di],cl       ;高位存下颜色</span><br><span class="line">             inc  di               ;指向显存下一个字</span><br><span class="line">             inc  si               ;指向下一个字符</span><br><span class="line">             jmp  short start_f</span><br><span class="line">    end_f:   </span><br><span class="line">             pop  cx               ;取出栈中cx后RET</span><br><span class="line">             RET</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/e7b9a2ab3a07b840f055dd65e06938f5.png"></p><ol start="2"><li>编写子程序（课本实验11）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/6639d91e80885cb9a347e67c1fd1ae5c.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">         db &quot;Beginner&#x27;s All-purpose Symbolic Instruction Code.&quot;,0</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">    begin:  </span><br><span class="line">            mov  ax,data</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  si,0</span><br><span class="line">            call letterc          ;调用子程序</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">    letterc:</span><br><span class="line">            mov  ax,0</span><br><span class="line">            mov  al,[si]          ;复制字符到al</span><br><span class="line">            mov  cx,ax</span><br><span class="line">            jcxz end_l            ;为0则结束</span><br><span class="line">            mov  bx,si</span><br><span class="line">            inc  si               ;指向下一个字符</span><br><span class="line">            cmp  ax,97</span><br><span class="line">            jb   letterc          ;小于&#x27;a&#x27;则跳过</span><br><span class="line">            cmp  ax,122</span><br><span class="line">            ja   letterc          ;大于&#x27;z&#x27;则跳过</span><br><span class="line">            sub  al,32</span><br><span class="line">            mov  [bx],al          ;转换为大写后覆盖保存</span><br><span class="line">            jmp  short letterc</span><br><span class="line">    end_l:  </span><br><span class="line">            RET</span><br><span class="line">code ends</span><br><span class="line">end begin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/9c58b6a03e2a929a2864e7f1181b249a.png"></p><ol start="3"><li>编写子程序</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;名称：strcpy</span><br><span class="line">;功能：将ds:si开始存放的字符串str1复制到将es:di开始存放的字符串str2中，str1将以0结尾，复制包括结束标记。调用时保证str2的空间大于str1。</span><br><span class="line">;参数：ds:si开始存放的字符串str1，es:di开始存放的字符串str2</span><br><span class="line">;返回： 无</span><br><span class="line">strcpy PROC</span><br><span class="line">    PUSH CX ; 保存CX寄存器的值</span><br><span class="line">    MOV CX, 0FFFFh ; 设置CX计数器为最大值</span><br><span class="line">    MOV AL, [SI] ; 将str1中的字符读入AL寄存器</span><br><span class="line">    MOV [DI], AL ; 将AL中的字符写入str2中</span><br><span class="line">    INC SI ; 指向str1中的下一个字符</span><br><span class="line">    INC DI ; 指向str2中的下一个字符</span><br><span class="line">    LOOPNZ strcpy ; 继续复制，直到str1中的字符为0或者复制完成</span><br><span class="line">    POP CX ; 恢复CX寄存器的值</span><br><span class="line">    RET ; 返回</span><br><span class="line">strcpy ENDP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验8和9</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>分析一个奇怪的程序（课本实验8）</li></ol><p>贴入代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assueme cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">             mov ax,4c00h</span><br><span class="line">             int 21h</span><br><span class="line">      start: mov ax,0</span><br><span class="line">      s:     nop</span><br><span class="line">             nop</span><br><span class="line">             mov di,offset s</span><br><span class="line">             mov si,offset s2</span><br><span class="line">             mov ax,cs:[si]</span><br><span class="line">             mov cs:[di],ax</span><br><span class="line">      s0:    jmp short s</span><br><span class="line">      s1:    mov ax,0</span><br><span class="line">             int 21h</span><br><span class="line">             mov ax,0</span><br><span class="line">      s2:    jmp short s1</span><br><span class="line">             nop</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>首先用debug跟踪程序的每一步运行,看到程序能从start处开始执行</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/183c43f7af8293d75b17de450a23576e.png"></p><p>将s和s2程序段的偏移地址送到DI和SI寄存器中</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/5cfb4572449bbdbd70ee797f825be456.png"></p><p>将s2的内容复制到s处</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a1f278074ab492219e547e6a077b3660.png"></p><p>继续执行代码跳转到代码段s处</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ce03822ae7222a655d60b8c7977744f5.png"><br>此时s的代码段修改到cs:0</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/97c2d971e2eeec81177b2f05caf66b36.png"></p><p>执行cs:0处的代码，程序正确返回</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/18cef3a255c9393821450f3772788560.png"></p><p>结论：</p><p>该程序可以正确返回</p><ol start="2"><li>根据材料编程（课本实验9）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/89d98646d4156c62da229baeb32bfa69.png" alt="文本, 信件 描述已自动生成"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/85d1648f3b818e0bd74a3a17b65ca046.png" alt="文本, 信件 描述已自动生成"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/d3841707ffdea72811080dceb27657c1.png" alt="文本 描述已自动生成"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data, ds:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">           db &#x27;welcome to masm!&#x27;</span><br><span class="line">           db 02h,24h,71h             ;三个颜色</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">            dw 8 dup(0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,data</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  ax,0b800h          ;es显示缓存区段</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  ax,stack</span><br><span class="line">            mov  ss,ax</span><br><span class="line">            mov  sp,10h</span><br><span class="line">            mov  bx,780h            ;第12-14行,第12行开始</span><br><span class="line">            mov  cx,3               ;写三行</span><br><span class="line">            mov  si,10h             ;指向颜色</span><br><span class="line">      s1:   </span><br><span class="line">            push cx                 ;入栈，保存循环与颜色状态</span><br><span class="line">            push si</span><br><span class="line">            mov  ah,[si]            ;取出当前行颜色，存在ah</span><br><span class="line">            mov  si,64              ;每行160字节，内容16字节，第64字节居中</span><br><span class="line">            mov  di,0</span><br><span class="line">            mov  cx,16</span><br><span class="line">      s2:   </span><br><span class="line">            mov  al,[di]            ;取出当前字母，保存在al</span><br><span class="line">            inc  di                 ;指向下一个字母</span><br><span class="line">            mov  es:[bx+si],ax      ;将ah的颜色与al的字母一起复制到缓存区段</span><br><span class="line">            add  si,2               ;下一个字母</span><br><span class="line">            loop s2</span><br><span class="line"></span><br><span class="line">            add  bx,00a0h           ;下一行</span><br><span class="line">            pop  si                 ;出栈</span><br><span class="line">            inc  si                 ;下一个颜色</span><br><span class="line">            pop  cx                 ;恢复循环状态</span><br><span class="line">            loop s1</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/26ebf5154f47deb70e01aa5a112ee27d.png"></p><ol start="3"><li>有个sc1的字节数组，长度为32，请统计其中0的个数，并将统计结果存入zero中。</li></ol><p>sc1 db 12,18,45,0,56， ……</p><p>Zero db ？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ss:stack, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">      ;32字节，共10个0</span><br><span class="line">      sc1  db 12,18,45,0,56,8,0,57,0,85,53,</span><br><span class="line">176,120,194,0,161,171,0,227,0,12,0,</span><br><span class="line">58,0,105,0,0,99,12,169,2,151</span><br><span class="line">      Zero db 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">            dw 8 dup(0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">      f:    add  ds:[Zero],1      ;0的个数加一</span><br><span class="line">            jmp  s1               ;跳转回到循环中s1处</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,data</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  ax,stack</span><br><span class="line">            mov  ss,ax</span><br><span class="line">            mov  sp,10h           ;初始化数据段和栈段</span><br><span class="line">            mov  bx,0             ;指向sc1字节数组中各个字节</span><br><span class="line">            mov  cx,32            ;循环检查32次</span><br><span class="line">      s:    push cx               ;保存循环状态</span><br><span class="line">            mov  cx,0</span><br><span class="line">            mov  cl,[bx]          ;将bx指向字节复制到cx中</span><br><span class="line">            jcxz f                ;检查cx是否为0，跳转到代码段f处</span><br><span class="line">      s1:   inc  bx               ;指向下一个字节</span><br><span class="line">            pop  cx               ;恢复循环状态</span><br><span class="line">            loop s</span><br><span class="line">            mov  ax,4c00H</span><br><span class="line">            int  21H</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前，计数值为0：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/981546fe10d062c29f54b2207fc92f6b.png"></p><p>程序运行后：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/e2560a62d3ab660abacaecc112300230.png"></p><p>计数值为0A，转成成十进制就是10，说明数据中0的个数有十个</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验7</title>
      <link href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/"/>
      <url>/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>课本实验7 寻址方式在数据化数据访问中的应用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/6f99d53e84dcd5b92e88c59fdc4ab013.png"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/f8ef2c44c9269a5cb81fcfd25f764f40.png"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/c5dd4c031e73e6e2555d6255005a030e.png"></p><p>解答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">      ;1B</span><br><span class="line">           db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;,&#x27;1984&#x27;,&#x27;1985&#x27;</span><br><span class="line">           db &#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;,&#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">      ;4B</span><br><span class="line">           dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514,345980</span><br><span class="line">           dd 590827,803530,1183000,1843000,2758000,3753000,4649000,5937000</span><br><span class="line">      ;2B</span><br><span class="line">           dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">           dw 11542,14430,15257,17800</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">            dw 0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line">table segment</span><br><span class="line">            db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br><span class="line">;总体思路，分两个循环来进行，第一个循环是将数据段中的年份，收入复制到table段中，</span><br><span class="line">;第二个循环是复制雇员数并计算出人均收入，然后再将结果复制到table段中</span><br><span class="line">code segment</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,data</span><br><span class="line">            mov  es,ax</span><br><span class="line">            mov  si,0</span><br><span class="line">            mov  ax,table</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  di,0</span><br><span class="line">            mov  ax,stack</span><br><span class="line">            mov  ss,ax</span><br><span class="line">            mov  sp,16</span><br><span class="line">            mov  bx,0</span><br><span class="line">            mov  cx,21</span><br><span class="line">      ;es 表示数据段的内容，ds表示table段的内容，</span><br><span class="line">      s0:   </span><br><span class="line">            mov  ax,es:[si]</span><br><span class="line">            mov  ds:[di+bx],ax</span><br><span class="line">            add  si,2</span><br><span class="line">            add  di,2</span><br><span class="line">            mov  ax,es:[si]</span><br><span class="line">            mov  ds:[di+bx],ax</span><br><span class="line">            mov  ax,es:[si+82]</span><br><span class="line">            mov  ds:[bx+di+3],ax</span><br><span class="line">            mov  ax,es:[si+84]</span><br><span class="line">            mov  ds:[bx+di+5],ax</span><br><span class="line">            add  si,2</span><br><span class="line">            mov  di,0</span><br><span class="line">            add  bx,16                      ;将偏移地址变成下一行</span><br><span class="line">            loop s0</span><br><span class="line">            mov  bx,0</span><br><span class="line">            mov  si,168                     ;雇员数的偏移地址</span><br><span class="line">            mov  di,5                       ;收入的偏移地址</span><br><span class="line">            mov  cx,21</span><br><span class="line">      s1:   </span><br><span class="line">            mov  ax,es:[si]</span><br><span class="line">            mov  ds:[bx+di+5],ax</span><br><span class="line">            mov  ax,ds:[bx+di]</span><br><span class="line">            mov  dx,ds:[bx+di+2]</span><br><span class="line">            div  word ptr ds:[bx+di+5]</span><br><span class="line">            mov  ds:[bx+di+8],ax</span><br><span class="line">            add  si,2</span><br><span class="line">            add  bx,16</span><br><span class="line">            loop s1</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前的table段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/81474095daa45629c9eae4b87d9688fb.png"></p><p>程序运行后的table段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/60ef741563a58249b59472c69817027b.png"></p><ol start="2"><li>数据段的第一个串为学生本人的姓名拼音小写，转变为大写字母后存入它后面的数据区。例如</li></ol><p>DATA SEGEMENT</p><p>NAME1 DB ‘liweihua’</p><p>NAME2 DB 8 DUP (0)</p><p>DATA ENDS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line">data segment</span><br><span class="line">      name1 db &#x27;liweihua&#x27;</span><br><span class="line">      name2 db 8 dup (0)</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">            dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,data              ;初始化栈段和数据段</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  ax,stack</span><br><span class="line">            mov  ss,ax</span><br><span class="line">            mov  sp,10h</span><br><span class="line">            mov  si,offset name1</span><br><span class="line">            mov  bx,offset name2</span><br><span class="line">            sub  bx,si                ;name1 - name2 得到name1长度</span><br><span class="line">            mov  cx,bx                ;循环name1的长度次数</span><br><span class="line">      s:    mov  al,[si]              ;将 ds:si 复制到al</span><br><span class="line">            and  al,11011111B         ;与运算，将小写转变为大写</span><br><span class="line">            mov  [bx+si],al           ;存到name2处数据段</span><br><span class="line">            inc  si                   ;si自增，指向下一个字母</span><br><span class="line">            loop s</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21H</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3f82efc8152788df165efd113604afd4.png"></p><p>程序运行后结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/c93953468dd2db62cb8d9dc6eba984fe.png"></p><ol start="3"><li>定义下面的4行4列矩阵数组，要求将上三角的所有元素累加，结果存入SUM。</li></ol><p>X1   DB 10，20，30，40</p><p>DB 20，30，40,50</p><p>DB 30，40,50,60</p><p>DB 40，50，60，70</p><p>SUM DW 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ds:data</span><br><span class="line">DATA segment</span><br><span class="line">           DB 10,20,30,40</span><br><span class="line">           DB 20,30,40,50</span><br><span class="line">           DB 30,40,50,60</span><br><span class="line">           DB 40,50,60,70</span><br><span class="line">      SUM  DW 0</span><br><span class="line">DATA ENDS</span><br><span class="line">codesg segment</span><br><span class="line">      START: </span><br><span class="line">             MOV  ax,DATA</span><br><span class="line">             MOV  ds,ax              ;将DS指向DATA段</span><br><span class="line">             mov  ax,0</span><br><span class="line">             mov  bx,0</span><br><span class="line">             mov  dx,0</span><br><span class="line">             mov  di,4               ;矩阵有4列</span><br><span class="line">             mov  cx,4               ;矩阵有4行，外循环为4次</span><br><span class="line">      s:     push cx                 ;将CX入栈</span><br><span class="line">             mov  si,0               ;SI表示列</span><br><span class="line">             mov  cx,di              ;内循环每次少加一个数（列），每次少循环一次</span><br><span class="line">      s0:    mov  dl,ds:[bx+si]      ;将矩阵上三角每行从第一个数放入DL中</span><br><span class="line">             add  ax,dx              ;AX=AX+DX,将数字相加后放入AX中</span><br><span class="line">             inc  si                 ;进行下一列的操作</span><br><span class="line">             loop s0</span><br><span class="line">             sub  di,1               ;内循环每次少加一个数（列），每次少循环一次</span><br><span class="line">             add  bx,5               ;指向矩阵上三角每行第一个数</span><br><span class="line">             pop  cx                 ;将CX出栈</span><br><span class="line">             loop s</span><br><span class="line">             mov  [SUM],ax           ;将相加的结果存入SUM中</span><br><span class="line">             MOV  AH,4CH</span><br><span class="line">             INT  21H</span><br><span class="line">CODESG ENDS</span><br><span class="line">END START</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/02802651f52c950f9ae630a966cb93f0.png"></p><p>程序运行后：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ff408c7aa14f7bed7ace9380e965f376.png"></p><p>这个结果与手算的结果相一致，因此程序运行正确</p><ol start="4"><li>杨辉三角</li></ol><p>创建一个10行16列的字节数组，并按照杨辉三角的数学规律给数组赋值。杨辉三角形状如下：</p><p>1</p><p>1 1</p><p>1 2 1</p><p>1 3 3 1</p><p>1 4 6 4 1</p><p>1 5 10 10 5 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ss:stack, ds:data</span><br><span class="line">data segment</span><br><span class="line">      ;声明一段10行16列首列数字为1的二维数组</span><br><span class="line">      array db 10 dup( 1, 15 dup(0) )</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">            dw 8 dup(0)</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">      start:</span><br><span class="line">            mov  ax,data</span><br><span class="line">            mov  ds,ax</span><br><span class="line">            mov  ax,stack</span><br><span class="line">            mov  ss,ax</span><br><span class="line">            mov  sp,10h            ;初始化数据段和栈段</span><br><span class="line">            mov  ax,1              ;ax用于保存每行需要计算的次数，从第二行需要计算一次开始，每行增加一次</span><br><span class="line">            mov  bx,0              ;bx用于定位行，从第一行开始</span><br><span class="line">            mov  cx,9              ;循环9次计算剩余9行</span><br><span class="line">      ;设正在计算的数字为(i,j)</span><br><span class="line">      s1:   push cx                ;保存第一层循环的状态</span><br><span class="line">            mov  cx,ax             ;第二层循环的次数(即为该行所需计算的数字个数)</span><br><span class="line">            mov  si,0              ;si用于行中的定位，从第一个字节开始</span><br><span class="line">      s2:   mov  dx,[bx+si]        ;复制(i-1,j-1)到dx</span><br><span class="line">            add  dx,[bx+si+1]      ;dx加上(i-1,j)</span><br><span class="line">            add  bx,16             ;bx移动到下一行,即 i+=1</span><br><span class="line">            add  si,1              ;si移动到下一个字,即 j+=1</span><br><span class="line">            mov  [bx+si],dx        ;将dx复制到(i,j)</span><br><span class="line">            sub  bx,16             ;bx移动到上一行,即 i-=1 ,计算下一个数字</span><br><span class="line">            loop s2</span><br><span class="line">            add  bx,16             ;bx移动到下一行,即 i+=1 ,计算下一行的数字</span><br><span class="line">            inc  ax                ;ax自增，下一行要计算的数量比上一行多1个</span><br><span class="line">            pop  cx                ;恢复第一层循环的状态</span><br><span class="line">            loop s1</span><br><span class="line">            mov  ax,4c00h</span><br><span class="line">            int  21H</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前，数据段为全0</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/bcf6e58e5167211e9a087f1dae19988e.png"></p><p>程序运行后</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/1ec24bbb942524c40d7616df37f3e8c9.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验6</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>编程完成问题7.9中的程序，要求使用至少两种不同的寻址方式实现。</li></ol><p>编程，将 datasg 段中每个单词的前 4 个字母改为大写字母。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg,ss:stacksg</span><br><span class="line">stacksg segment</span><br><span class="line">            dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line">datasg segment</span><br><span class="line">           db &#x27;1. display      &#x27;</span><br><span class="line">           db &#x27;2. brows        &#x27;</span><br><span class="line">           db &#x27;3. replace      &#x27;</span><br><span class="line">           db &#x27;4. modify       &#x27;</span><br><span class="line">datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">    start: </span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一种方法采用基址变址寻址法进行解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line">stacksg segment</span><br><span class="line">            dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line">datasg segment</span><br><span class="line">           db &#x27;1. display      &#x27;</span><br><span class="line">           db &#x27;2. brows        &#x27;</span><br><span class="line">           db &#x27;3. replace      &#x27;</span><br><span class="line">           db &#x27;4. modify       &#x27;</span><br><span class="line">datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">    start: </span><br><span class="line">    ;初始化数据段与栈段</span><br><span class="line">           mov  ax,datasg</span><br><span class="line">           mov  ds,ax</span><br><span class="line">           mov  ax,stacksg</span><br><span class="line">           mov  ss,ax</span><br><span class="line">           mov  sp,10H</span><br><span class="line">    ;将数据段作为一个4*16的二维数组</span><br><span class="line">           mov  bx,0            ;将bx初始化为0，用于定位二维数组的第一维</span><br><span class="line">           mov  cx,4            ;循环4次，修改四行数据</span><br><span class="line">    s:     push cx              ;将cx入栈，保存第一层循环的状态</span><br><span class="line">           mov  cx,4            ;将cx赋值为4，改写每行数据的四个数据</span><br><span class="line"> ;si赋值为3，用于定位数组的第二维，3指向第一个小写字母</span><br><span class="line">           mov  si,</span><br><span class="line">    ;嵌套第二层循环</span><br><span class="line">    s1:    mov  al,[bx+si]      ;取出小写字母，使用 [bx+si] 的寻址方式</span><br><span class="line">           and  al,11011111b    ;与运算，运算结果为对应的大写字母</span><br><span class="line">           mov  [bx+si],al      ;将运算结果送回数据段</span><br><span class="line">           inc  si              ;si自增，指向下一个字母</span><br><span class="line">           loop s1</span><br><span class="line">    ;嵌套的第二次循环结束</span><br><span class="line">           pop  cx              ;还原cx的状态到第一层循环</span><br><span class="line">           add  bx,16           ;bx加16，指向下一行</span><br><span class="line">           loop s</span><br><span class="line">           mov  ax,4c00h</span><br><span class="line">           int  21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行程序前：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3ee1fea74568f09fba854b31e81bda24.png"></p><p>运行程序后：<br><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/001833584411b33d804ef8039343fdb4.png"></p><p>第二种方法采用相对基址变址寻址法进行解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line">stacksg segment</span><br><span class="line">            dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line">datasg segment</span><br><span class="line">           db &#x27;1. display      &#x27;</span><br><span class="line">           db &#x27;2. brows        &#x27;</span><br><span class="line">           db &#x27;3. replace      &#x27;</span><br><span class="line">           db &#x27;4. modify       &#x27;</span><br><span class="line">datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">    start: </span><br><span class="line">           mov  ax,datasg</span><br><span class="line">           mov  ds,ax</span><br><span class="line">           mov  ax,stacksg</span><br><span class="line">           mov  ss,ax</span><br><span class="line">           mov  sp,10H</span><br><span class="line">           mov  bx,0</span><br><span class="line">           mov  cx,4</span><br><span class="line">    s:     push cx</span><br><span class="line">           mov  cx,4</span><br><span class="line">           mov  si,0            ;无需初始化si指向第一个字母</span><br><span class="line">    s1:    mov  al,[bx+si+3]    ;使用 [bx+si+idata] 寻址方式</span><br><span class="line">           and  al,11011111b</span><br><span class="line">           mov  [bx+si+3],al    ;使用 [bx+si+idata] 寻址方式</span><br><span class="line">           inc  si</span><br><span class="line">           loop s1</span><br><span class="line">           pop  cx</span><br><span class="line">           add  bx,16</span><br><span class="line">           loop s</span><br><span class="line">           mov  ax,4c00h</span><br><span class="line">           int  21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行程序前：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ace084094c647d04edd3d57f67a181b5.png"></p><p>运行程序后：<br>                            <img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3783c0c04f2b775d6f2936007833314f.png"></p><ol start="2"><li>有如下定义</li></ol><p>DATA SEGMENT</p><p>DW 1,1,18 DUP (0)</p><p>DATA SEGMENT</p><p>请编写程序将裴波那契数列的前20项补充完整。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line">stacksg segment</span><br><span class="line">            dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line">datasg segment</span><br><span class="line">           dw 20 dup(0)</span><br><span class="line">datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">    start: </span><br><span class="line">    ;初始化数据段和栈段</span><br><span class="line">           mov  ax,datasg</span><br><span class="line">           mov  ds,ax</span><br><span class="line">           mov  ax,stacksg</span><br><span class="line">           mov  ss,ax</span><br><span class="line">           mov  sp,10H</span><br><span class="line">    ;输入斐波那契函数的前两项</span><br><span class="line">           mov  ax,1</span><br><span class="line">           mov  ds:[0],ax</span><br><span class="line">           mov  ds:[2],ax</span><br><span class="line">    ;将斐波那契函数的前两项入栈</span><br><span class="line">           push ax</span><br><span class="line">           push ax</span><br><span class="line">           mov  cx,18         ;计算前二十位</span><br><span class="line">           mov  bx,4          ;从第三个字开始存储计算结果</span><br><span class="line">    ;设当前计算第i项</span><br><span class="line">    s:     mov  dx,0          ;初始化dx用于计算</span><br><span class="line">           pop  ax            ;将i-1项出栈</span><br><span class="line">           pop  dx            ;将i-2项出栈</span><br><span class="line">           add  dx,ax         ;i-1项与i-2项相加</span><br><span class="line">           push ax            ;将i-1项入栈</span><br><span class="line">           push dx            ;将i项入栈</span><br><span class="line">           mov  ds:[bx],dx    ;将计算结果存入数据段</span><br><span class="line">           add  bx,2          ;bx自增,i++,偏移量指向下一个字</span><br><span class="line">           loop s</span><br><span class="line">           mov  ax,4c00h</span><br><span class="line">           int  21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前数据段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/aaf1d9792f2f0ae2cbb8cf9c5682e3c4.png"></p><p>程序运行后数据段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/c1eba182512325b62c03a981fe82794a.png"></p><p>数列1到20项的十进制分别为：1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 ，</p><ol start="3"><li>猴子第一天摘下若干个桃子，当即吃了一半，不过瘾，又多吃了一个；第二天，吃剩下的桃子的一半，还不过瘾，又多吃了一个；以后每天都吃前一天剩下的一半多一个，到第十天，只剩下一个桃子。求这十天猴子每天拥有的桃子个数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg,ss:stacksg,ds:datasg</span><br><span class="line">stacksg segment</span><br><span class="line">               dw 0,0,0,0,0,0,0,0</span><br><span class="line">stacksg ends</span><br><span class="line">datasg segment</span><br><span class="line">              dw 16 dup(0)</span><br><span class="line">datasg ends</span><br><span class="line">codesg segment</span><br><span class="line">       start: </span><br><span class="line">       ;初始化数据段和栈段</span><br><span class="line">              mov  ax,datasg</span><br><span class="line">              mov  ds,ax</span><br><span class="line">              mov  ax,stacksg</span><br><span class="line">              mov  ss,ax</span><br><span class="line">              mov  sp,10H</span><br><span class="line">              mov  ax,1</span><br><span class="line">              mov  si,18            ;偏移量指向第10个字</span><br><span class="line">              mov  ds:[si],ax       ;存下第十天的数量</span><br><span class="line">              push ax               ;将第十天的数量入栈</span><br><span class="line">              mov  cx,9             ;循环9次计算前九天的数量</span><br><span class="line">       s:     sub  si,2             ;si减2，指向上一个字</span><br><span class="line">              pop  ax               ;将前一天的数量出栈</span><br><span class="line">              inc  ax</span><br><span class="line">              mov  dx,ax</span><br><span class="line">              add  dx,ax            ;前一天的数量加一后乘以2得到结果</span><br><span class="line">              push dx               ;将计算结果入栈用于下一次计算</span><br><span class="line">              mov  ds:[si],dx       ;存下结果</span><br><span class="line">              loop s</span><br><span class="line">              mov  ax,4c00h</span><br><span class="line">              int  21H</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行前数据段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/51b30b1e73d6218a574ae932c3d7a250.png"></p><p>程序运行后数据段：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/aa7c8164a7853bf789e52364652c5fdb.png"></p><p>将上图数据段的内容翻译成十进制可得桃子数量分别是</p><p>1534 766 382 190 94 46 22 10 4 1</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验5</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><h3 id="一将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"><a href="#一将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。" class="headerlink" title="一将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"></a>一将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">data segment</span><br><span class="line">         dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">        dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start:mov  ax,stack</span><br><span class="line">          mov  ss,ax</span><br><span class="line">          mov  sp,16</span><br><span class="line">          mov  ax,data</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          push ds:[0]</span><br><span class="line">          push ds:[2]</span><br><span class="line">          pop  ds:[2]</span><br><span class="line">          pop  ds:[0]</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ol><li>CPU执行程序，程序返回前，data段中的数据不变 。</li></ol><p>执行前：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4ac4df65a88e988abe7c06e9dcee919c.png"></p><p>执行后：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ecb4c872cb1e3e05020b31d683b8c4df.png"></p><ol start="2"><li>CPU执行程序，程序返回前，CS&#x3D;0E26，SS&#x3D;0E25，DS&#x3D;0E24 。（根据自己系统回答)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/9f8509afceae5960e8a86c5fb39316a0.png"></p><ol start="3"><li>设程序加载后，CODE段的段地址为X，则DATA段的段地址为 X-2 ，STACK段的段地址为 X-1 。</li></ol><h3 id="二-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"><a href="#二-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。" class="headerlink" title="二 将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。"></a>二 将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">data segment</span><br><span class="line">         dw 0123h,0456h</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">          dw 0,0</span><br><span class="line">stack ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,stack</span><br><span class="line">          mov  ss,ax</span><br><span class="line">          mov  sp,16</span><br><span class="line">          mov  ax,data</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          push ds:[0]</span><br><span class="line">          push ds:[2]</span><br><span class="line">          pop  ds:[2]</span><br><span class="line">          pop  ds:[0]</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ol><li>CPU执行程序，程序返回前，data段中的数据为多少？</li></ol><p>答：参照下图</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/323e21cc83477ed2d3cfd129d9f5862f.png"><br>2. CPU执行程序，程序返回前，CS&#x3D;, SS&#x3D;, DS&#x3D;</p><p>答：参照下图</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a64068050760194b4ac403db654e3e05.png"><br>3. 程序加载后，code段地址设为X，则data段地址为(x-2),stack段的段地址为(X-1).</p><ol start="4"><li>对于如下定义的段：<br> name segment<br> ……<br> name ends<br> 如果段中数据位N个字节，程序加载后，该段实际占据空间为：<strong>（N&#x2F;16）\16</strong></li></ol><h3 id="三-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题"><a href="#三-将下面的程序编译连接，用Debug加载、跟踪，然后回答问题" class="headerlink" title="三 将下面的程序编译连接，用Debug加载、跟踪，然后回答问题"></a>三 将下面的程序编译连接，用Debug加载、跟踪，然后回答问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,stack</span><br><span class="line">          mov  ss,ax</span><br><span class="line">          mov  sp,16</span><br><span class="line">          mov  ax,data</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          push ds:[0]</span><br><span class="line">          push ds:[2]</span><br><span class="line">          pop  ds:[2]</span><br><span class="line">          pop  ds:[0]</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">data segment</span><br><span class="line">         dw 0123h,0456h</span><br><span class="line">data ends</span><br><span class="line">stack segment</span><br><span class="line">          dw 0,0</span><br><span class="line">stack ends</span><br><span class="line">end start</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol><li>CPU执行程序，程序返回前，data段中的数据为多少？</li></ol><p>答：参照下图</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/993125d908084b23592298ddcc9fdaf2.png"></p><ol start="2"><li>CPU执行程序，程序返回前，CS&#x3D;,SS&#x3D;, DS&#x3D;___.</li></ol><p>答：参照下图</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/184bab6fb1396022f5e2959ab37c8e45.png"></p><ol start="3"><li>程序加载后，code段地址设为X，则 data 段地址为(x+3)，stack段的段地址为(X+4)。</li></ol><h3 id="四如果将1、2、3题中的最后一条伪指令“end-start”改为“end”-也就是说不指明程序的入口-，则那个程序仍然可以正确执行？请说明原因。"><a href="#四如果将1、2、3题中的最后一条伪指令“end-start”改为“end”-也就是说不指明程序的入口-，则那个程序仍然可以正确执行？请说明原因。" class="headerlink" title="四如果将1、2、3题中的最后一条伪指令“end start”改为“end”(也就是说不指明程序的入口)，则那个程序仍然可以正确执行？请说明原因。"></a>四如果将1、2、3题中的最后一条伪指令“end start”改为“end”(也就是说不指明程序的入口)，则那个程序仍然可以正确执行？请说明原因。</h3><ul><li>答案：只有 3 题中程序可以正确的执行</li><li>原因：只有 3 题是在内存中可执行代码在最前面</li></ul><h3 id="五编写-code-段中的代码，将-a段-和-b段-数据依次相加，结果存入c段"><a href="#五编写-code-段中的代码，将-a段-和-b段-数据依次相加，结果存入c段" class="headerlink" title="五编写 code 段中的代码，将 a段 和 b段 数据依次相加，结果存入c段"></a>五编写 code 段中的代码，将 a段 和 b段 数据依次相加，结果存入c段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">a segment</span><br><span class="line">      db 1,2,3,4,5,6,7,8</span><br><span class="line">a ends</span><br><span class="line">b segment</span><br><span class="line">      db 1,2,3,4,5,6,7,8</span><br><span class="line">b ends</span><br><span class="line">c segment</span><br><span class="line">      db 0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  cx,8</span><br><span class="line">          mov  bx,0</span><br><span class="line">    s:    mov  dx,0</span><br><span class="line">          mov  ax,a</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  dl,ds:[bx]</span><br><span class="line">          mov  ax,b</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          add  dl,ds:[bx]</span><br><span class="line">          mov  ax,c</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  ds:[bx],dl</span><br><span class="line">          add  bx,1</span><br><span class="line">          loop s</span><br><span class="line">          mov  ax,4c00H</span><br><span class="line">          int  21H</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>程序运行前的各个数据段内容</p><p>从上到下分别是，a,b,c段的数据</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/abd0cf4d573f6ac15ad786b7acff32a4.png"></p><p>程序运行后的各个数据段内容</p><p>可以看出，C段&#x3D;A段+B段</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/b27a59b3bd35d4bc733f4eeb295abcdf.png"></p><h3 id="六编写code段中代码，用push指令将a段中前8个字型数据逆序存储到b段中。"><a href="#六编写code段中代码，用push指令将a段中前8个字型数据逆序存储到b段中。" class="headerlink" title="六编写code段中代码，用push指令将a段中前8个字型数据逆序存储到b段中。"></a>六编写code段中代码，用push指令将a段中前8个字型数据逆序存储到b段中。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">a segment</span><br><span class="line">      dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh</span><br><span class="line">a ends</span><br><span class="line">b segment</span><br><span class="line">      dw 0,0,0,0,0,0,0,0</span><br><span class="line">b ends</span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">          mov  ax,a</span><br><span class="line">          mov  ds,ax       </span><br><span class="line">          mov  ax,b</span><br><span class="line">          mov  ss,ax       </span><br><span class="line">          mov  sp,16       </span><br><span class="line">          mov  bx,0</span><br><span class="line">          mov  cx,8        </span><br><span class="line">    s:    </span><br><span class="line">          push ds:[bx]     </span><br><span class="line">          add  bx,2</span><br><span class="line">          loop s</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>程序运行前的各个数据段内容</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/04a407b1a6b14c3da0a1c51d7ee60b41.png"></p><p>程序运行后的各个数据段内容</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/c0e1bdec70b58d2ec2ab23c72ad6f595.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验4</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>题目如下</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4142aacd21d37ada6a7366dc3e8d7302.png"></p><p>第一和第二题运行结果相同，因此一起作答，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">         mov  bx,0</span><br><span class="line">         mov  ds,bx</span><br><span class="line">         mov  cx,40h</span><br><span class="line">    next:</span><br><span class="line">         mov  ds:[bx+200h],bx</span><br><span class="line">         inc  bx</span><br><span class="line">         loop next</span><br><span class="line">         mov  ax,4c00h</span><br><span class="line">         int  21h</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/9b661807f63163a0ec16d0c4a9666533.png"></p><p>第三题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">           mov  ax,cs</span><br><span class="line">           mov  ds,ax</span><br><span class="line">           mov  ax,0020H</span><br><span class="line">           mov  es,ax</span><br><span class="line">           mov  bx,0</span><br><span class="line">           mov  cx,23</span><br><span class="line">    s:     mov  al,[bx]</span><br><span class="line">           mov  es:[bx],al</span><br><span class="line">           inc  bx</span><br><span class="line">           loop s</span><br><span class="line">           mov  ax,4c00H</span><br><span class="line">           int  21H</span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/37e1fe2cfa2d44faae572eee12c34b74.png"></p><p>2、编写程序，统计1+3+5+……+99，结果存入DX寄存器中。</p><p>程序如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code1</span><br><span class="line">code1 segment</span><br><span class="line">          mov  cx,99</span><br><span class="line">          mov  dx,0</span><br><span class="line">    s:    add  dx,cx</span><br><span class="line">          loop s</span><br><span class="line">          mov  ax,4c00h</span><br><span class="line">          int  21H</span><br><span class="line">code1 ends</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试程序，查看指令是否写入程序：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/7a590c444b9c605c4b1fc4b655353a00.png"></p><p>运行程序，查看结果：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/25f3e56aeb5dbdba8b69b78798c69b63.png"></p><p>Dx&#x3D;1356H，转换成十进制就是4950，运算结果符合预期</p><p>3、将0FFFE0~0FFFFFH中的16个字，顺序复制到00200H~0021FH中，</p><p>程序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code1</span><br><span class="line">code1 segment</span><br><span class="line">          mov  ax,0FFFEH</span><br><span class="line">          mov  ds,ax</span><br><span class="line">          mov  ax,0020H</span><br><span class="line">          mov  es,ax</span><br><span class="line">          mov  bx,0</span><br><span class="line">          mov  cx,16</span><br><span class="line">    s:    mov  ax,ds:[bx]</span><br><span class="line">          mov  es:[bx],ax</span><br><span class="line">          add  bx,2</span><br><span class="line">          loop s</span><br><span class="line">          mov  ax,4c00H</span><br><span class="line">          int  21H</span><br><span class="line">code1 ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>调试程序，查看指令是否写入程序：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/73f99a3abad38bde652282ac61f435f7.png"></p><p>运行程序，查看结果:</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/8d4f1f48d0aad8cbc6831eff06a842cc.png"></p><p>两个内存段的结果相等，说明程序运行正确</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验3</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><ol><li>将下面的程序保存为t1.asm，将其生成可执行文件t1.exe</li></ol><p>用Vscode编写源程序t1.asm</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/8e6886d3cf2d016af656f3bc77df1c5e.png"></p><p>用脚本一键生成可执行文件t1.exe</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4fc06b6da472bfe71662b805369f3b88.png"></p><p>成功运行</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/17591e1bd91704e12e1d134cd0cb4944.png"></p><p>查看资源管理器，成功生成T1.obj与t1.exe文件‘</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/37321e2ac541766ee728ba8a51e896bd.png"></p><ol start="2"><li><p>用<code>debug</code>跟踪t1.exe的执行过程，写出每一步执行后，相关寄存器中的内容和栈顶的内容</p><p>同样用脚本一键调试程序</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4fc06b6da472bfe71662b805369f3b88.png"></p><p>用<code>u</code>命令验证一下，指令是否写入程序</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/8b2fc2ea704f8a4b071e8d86e5a18b36.png"></p><p>用t命令逐步执行</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/9b843241f32a3fd98e629af3f4aacc7e.png"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a988aea4dfe516351892d99445eb74bd.png"></p><p>这里要注意的是当遇到int 21终止指令的时候，要使用<code>p</code>命令而不是用t命令</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/e45879ae3da4d3643526c207b6e3e2f8.png"></p><p>这里第一次做因为没有使用<code>t</code>命令，导致程序并没有正常退出</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/f66b672d4b02538359f357461186d744.png"></p><p>根据上面的运行结果，得出各个寄存器的值是</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/image-20241004223133810.png" alt="image-20241004223133810"></p><ol start="3"><li>PSP的头两个字节是CD20，用<code>Debug</code>加载t1.exe，查看PSP的内容</li></ol><p>通过<code>r</code>命令查看cs与ds的内容</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/860dc8cbd249d9d0f1229eb7a8e8f36a.png"></p><p>刚好相差256字节，由此可以判断出psp的起始地址为0e14：0000，检查一下：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/d0691be27232ff231983ecab2b9387e4.png"></p><p>可以看到起始地址的前两个字节是CD 20，由此可以判断该处是PSP的起始地址，没错。</p><ol start="4"><li>将<code>0FFFF0~0FFFFFH</code>中的8个字，逆序复制到<code>00200H\~0020FH</code>中</li></ol><p>运行下面的指令即可解决该题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">mov ax,20H</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0FFFFH</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,0</span><br><span class="line">pop [E]</span><br><span class="line">pop [C]</span><br><span class="line">pop [A]</span><br><span class="line">pop [8]</span><br><span class="line">pop [6]</span><br><span class="line">pop [4]</span><br><span class="line">pop [2]</span><br><span class="line">pop [0]</span><br><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>执行程序之前：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/5fa47eb5564d0bea18813909395c6af4.png"></p><p>执行程序后：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3e2221790ba3ca63cdaa774050e6966c.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验2</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><h3 id="1-使用Debug，将下面的程序段写-入程序，逐条进行，根据指令执行后的实际运行情况填空。"><a href="#1-使用Debug，将下面的程序段写-入程序，逐条进行，根据指令执行后的实际运行情况填空。" class="headerlink" title="(1)使用Debug，将下面的程序段写 入程序，逐条进行，根据指令执行后的实际运行情况填空。"></a>(1)使用Debug，将下面的程序段写 入程序，逐条进行，根据指令执行后的实际运行情况填空。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mov ax,ffff</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,2200</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,0100</span><br><span class="line">mov ax,[0]     ;ax=C0EAH</span><br><span class="line">add ax,[2]     ;ax=COFCH</span><br><span class="line">mov bx,[4]    ;bx=30F0H</span><br><span class="line">add bx,[6]     ;bx=6021H</span><br><span class="line">push ax       ;sp=00FEH ; 修改的内存单元的地址是2200:00FE内容为COFCH</span><br><span class="line">push bx       ;sp=00FCH ; 修改的内存单元的地址是2200:00FC内容为6021</span><br><span class="line">pop ax       ;sp=00FEH ; ax=6021H</span><br><span class="line">pop bx       ;sp=0100H; bx=COFCH</span><br><span class="line">push [4]      ;sp=00FEH; 修改的内存单元的地址是2200:00FE内容为30F0</span><br><span class="line">push [6]      ;sp=00FCH; 修改的内存单元的地址是2200:00FC内容为2F31</span><br></pre></td></tr></table></figure><p>解答：</p><ol><li>首先用<code>d</code>命令得到内存<code>FFFF0~FFFFF</code>中的值</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image002.jpg" alt="img"></p><ol start="2"><li><p>通过显示的值，进行手算一遍，填入上方的表格</p></li><li><p>写程序验证，方便起见，我从内存段1000:0开始编写</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image004.jpg" alt="img"></p><ol start="4"><li>执行程序</li></ol><p>这里可以注意到在执行完<code>mov ss,ax</code>后立刻执行了<code>mov sp,0100</code>，因此程序直接跳到<code>mov ax,[0000]</code></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image011.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image017.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image027.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image033.jpg" alt="img"></p><p> 分析后面写</p><h3 id="2-仔细观察图3-19中的实验过程，然后分析：为什么2000-0-2000-f中的内容会发生改变？"><a href="#2-仔细观察图3-19中的实验过程，然后分析：为什么2000-0-2000-f中的内容会发生改变？" class="headerlink" title="(2)仔细观察图3.19中的实验过程，然后分析：为什么2000:0~2000:f中的内容会发生改变？"></a>(2)仔细观察图3.19中的实验过程，然后分析：为什么2000:0~2000:f中的内容会发生改变？</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image035.jpg" alt="img"></p><p>解答：</p><p>首先使用debug写入相应的命令，对程序的运行结果进行验证</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image038.gif" alt="img"></p><p>事先在2000:0处写入0</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image041.gif" alt="img"></p><p>修改cs和ip寄存器的值</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image043.gif" alt="img"></p><p>执行命令，并查看2000:0的值</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/clip_image052.gif" alt="img"></p><p>这些数值很容易能看出是寄存器的内容</p><ul><li><p>现象：在程序未执行之前，内存地址2000:00仅显示0值，但是在构建栈结构后，此内存地址显示出新数据</p></li><li><p>分析：在网上搜集资料后，得知当使用t命令触发单步中断时，发生了寄存器值入栈操作，CPU自动将中断处理所需的注册值压入栈中，这解释了这些数据的来源。</p></li><li><p>具体内容：参照课本P249,P238</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编语言第三版实验1</title>
      <link href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/"/>
      <url>/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列的文章是对<strong>王爽老师的汇编语言</strong>中的实验的解答记录，原书一共有17个实验，由于学校的教学流程只做到了第14个实验，因此本文章只会有前十四个实验的解答记录,还有个比较重要的是，文章中会有原书实验中没有的题目，这些是我的老师自己加的，你不感兴趣就无视。btw，以这篇文章记录我的汇编语言的学习历程</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C1/" title="王爽汇编语言第三版实验1">王爽汇编语言第三版实验1</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C2/" title="王爽汇编语言第三版实验2">王爽汇编语言第三版实验2</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C3/" title="王爽汇编语言第三版实验3">王爽汇编语言第三版实验3</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C4/" title="王爽汇编语言第三版实验4">王爽汇编语言第三版实验4</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C5/" title="王爽汇编语言第三版实验5">王爽汇编语言第三版实验5</a></li><li><a href="/2024/10/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C6/" title="王爽汇编语言第三版实验6">王爽汇编语言第三版实验6</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C7/" title="王爽汇编语言第三版实验7">王爽汇编语言第三版实验7</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C8%E5%92%8C9/" title="王爽汇编语言第三版实验8和9">王爽汇编语言第三版实验8和9</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C10%E5%92%8C11/" title="王爽汇编语言第三版实验10和11">王爽汇编语言第三版实验10和11</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C12/" title="王爽汇编语言第三版实验12">王爽汇编语言第三版实验12</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C13/" title="王爽汇编语言第三版实验13">王爽汇编语言第三版实验13</a></li><li><a href="/2024/10/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C14/" title="王爽汇编语言第三版实验14">王爽汇编语言第三版实验14</a></li></ul><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><h3 id="1-使用Debug-将下面的程序段写入内存，逐条执行，观察每条指令执行后CPU中"><a href="#1-使用Debug-将下面的程序段写入内存，逐条执行，观察每条指令执行后CPU中" class="headerlink" title="(1)使用Debug,将下面的程序段写入内存，逐条执行，观察每条指令执行后CPU中"></a>(1)使用<code>Debug</code>,将下面的程序段写入内存，逐条执行，观察每条指令执行后CPU中</h3><p>相关寄存器中内容的变化。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/96b8ca42f08467b4f5300a1f68c53274.png"></p><p>提示，可用<code>E</code>命令和<code>A</code>命令以两种方式将指令写入内存。注意用<code>T</code>命令执行时，CS:IP的指向。注：由于篇幅问题，图片仅展示一部分！</p><p>解答：</p><p>使用<code>A</code>指令编写汇编指令，这里必须注意填写数值的时候不要有H！</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/2e4374ebe9b080069aae60794a464c1c.png"></p><p>更改CS:IP的指向</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/733b960297ccca5c49ca2d37b3845e3e.png"></p><p>执行命令，AX和BX的值发生更改</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/5703ae030d82f7ef60598aad2de2eaba.png"></p><h3 id="2-将下面3条指令写入从2000-0开始的内存单元中，利用这3条指令计算2的8次方。"><a href="#2-将下面3条指令写入从2000-0开始的内存单元中，利用这3条指令计算2的8次方。" class="headerlink" title="(2)将下面3条指令写入从2000:0开始的内存单元中，利用这3条指令计算2的8次方。"></a>(2)将下面3条指令写入从2000:0开始的内存单元中，利用这3条指令计算2的8次方。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">add ax,ax</span><br><span class="line">jmp 2000:0003</span><br></pre></td></tr></table></figure><p>解答：</p><p>使用<code>A</code>命令编写汇编指令，这里有个小细节，用r命令修改寄存器的值可以不用空格隔开，比如<code>rip</code>就能直接修改ip寄存器的值</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a18cf482f02d69f74926d63ba34e1847.png"></p><p>执行命令</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/15feb01e82a9987992b82373c56f5037.png"></p><h3 id="3-查看内存中的内容。"><a href="#3-查看内存中的内容。" class="headerlink" title="(3) 查看内存中的内容。"></a>(3) 查看内存中的内容。</h3><p>PC机主板上的ROM中写有一个生产日期，在内存<code>FFF00H〜FFFFFH</code>的某几个单元中，请找到这个生产日期并试图改变它。</p><p>解答：</p><p><code>FFF00H\~FFFFFH</code>跨度是<code>FF</code>，因此运行</p><p><code>-d fff00:0 ff</code></p><p>地址FFF0:00F0即是生产日期</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/a9ec89389d1a7454adee762b0c1a8aa7.png"></p><p>试图修改，发现报错,原因后面分析</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/f6a1abee09e192f2c031384c99382f7e.png"></p><p>(4) 向内存从B8100H开始的单元中填写数据，如：<code>-e B810:0000 01 01 02 02 03 03 04 04</code></p><p>解答：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/fc9014babf7c2d0820a2f1843d65cc06.png"></p><h2 id="检测点2-1"><a href="#检测点2-1" class="headerlink" title="检测点2.1"></a>检测点2.1</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ffde0735636e931eb06b550ada53447e.png"></p><p>解答：</p><p>随便找一个内存段，使用A命令写入指令</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/5b9e450f5a3ee2239d88aebc7811065b.png"></p><p>修改CS：IP寄存器</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/96293dbbc26429ae44a03e4baca5ef45.png"></p><p>执行命令</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/57e9d7e96f96f547e4c2dbb74f03c3fc.png"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/faad89e8f026e2fa9c81521036900f53.png"></p><h2 id="实验结论、实验体会"><a href="#实验结论、实验体会" class="headerlink" title="实验结论、实验体会"></a>实验结论、实验体会</h2><p>以下是对于每道题运算结果的个人看法与总结，有错请指正</p><p>第一题：</p><ul><li>采用e指令或者a指令都可以达到预期的实验的目的</li><li>e指令采用机器码的形式直接对连续的内存地址进行修改的，稍有不慎，会计算出错</li><li>a指令，选择一个段地址，可以在这上面直接用汇编语言进行编写，不容易出错和便于检查。</li><li>t指令，必须先修改cs和ip段寄存器的内容，指向要运行的程序段，否则则不会运行我们编写的程序</li></ul><p>第二题：</p><ul><li>jmp是一个跳转指令，可以跳转到我们需要它跳转的物理地址上</li><li>在编写运行一个新的程序时，必须把上一个程序运行完成，否则无法进行改写</li><li>直接修改cs和ip的值可以提前跳出循环</li></ul><p>第三题：</p><ul><li>执行结果生产日期与我的电脑不符合，查阅资料——dosbox是虚拟机，也就是虚拟环境，因此输出的内容和物理机的信息没有任何关系</li><li>通过数字逻辑的知识，ROM为只读存储器，因此修改FFFF0会报错</li></ul><p>第四题：</p><ul><li>现象：用e命令修改内存单元后，用d命令查看内容并未修改</li><li>查阅：该处地址单元位于显存地址单元中，可以进行数据的写操作</li><li>原因：显存单元中的内容是与屏幕输出是同步的，再用d命令查看是显存中的内容已经发生了改变</li></ul><p>检测点2.1：</p><p>没啥好说的，程序运行的结果与手算的结果相一致，是验证性的一类实验</p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables，ufw，firewalld的关系与区别</title>
      <link href="/2024/09/26/Linux/Iptables%EF%BC%8Cufw%EF%BC%8Cfirewalld%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/09/26/Linux/Iptables%EF%BC%8Cufw%EF%BC%8Cfirewalld%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>定义：iptables 是 Linux 内核中用于设置和维护 IP 数据包过滤规则的工具。它允许用户创建、管理和检查一系列的规则，这些规则定义了如何处理进入或离开系统的数据包。iptables 是一个底层工具，提供了强大的灵活性和控制能力，但同时也需要用户具备一定的网络知识来有效配置。</p><p><strong>用人话总结：用来过滤网络流量的工具，很底层的意思就是非常难用且复杂。</strong></p><h2 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h2><p>定义：ufw 是一个为简化 iptables 配置而设计的前端工具，特别适合于主机防火墙的设置。它通过提供简单的命令行界面，使得用户能够轻松地允许或阻止特定端口的流量。虽然 ufw 实际上依赖于 iptables 来实现其功能，但它隐藏了许多复杂性，使得防火墙配置变得更为直观和易于管理。</p><p><strong>用人话总结：iptables不是很底层吗？ufw做的就是将iptables很难用且复杂的底层操作封装成几个很简单的命令，帮你省去一大堆参数和选项。</strong></p><h2 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h2><p>firewalld 是 Red Hat 开发的一种动态防火墙管理工具，它同样可以作为 iptables 或 nftables 的前端。与 ufw 相比，firewalld 提供了更为复杂和灵活的功能，包括支持不同网络接口的不同规则集（称为区域）以及运行时和永久配置的管理</p><p><strong>用人话总结：和ufw一样封装了iptables，区别就是操作比ufw复杂一点</strong>。</p><h2 id="该选择那个？"><a href="#该选择那个？" class="headerlink" title="该选择那个？"></a>该选择那个？</h2><p><strong>不同的防火墙工具，一起使用是会起冲突的，所以不能混合使用</strong>。拿windows类似的软件类比一下就知道了，360安全卫士和金山毒霸能相容吗？🫠🫠</p><p>按使用难度来说:iptables&gt;firewalld&gt;ufw。ufw是最简单的了，命令也好记，参数和选项也没几个。</p><p>按功能复杂度来说:firewalld&gt;ufw&gt;iptables。firewalld适合需要复杂网络环境管理的大型服务器或企业级应用，大型开发就用firewalld。</p><p>另外提一嘴，</p><ul><li><strong>UFW</strong>: 默认用于 <strong>Ubuntu</strong> 及其衍生版（如 Kubuntu、Xubuntu 等），也可在一些 Debian 系统中使用。</li><li><strong>firewalld</strong>: 默认用于 <strong>Red Hat</strong>、<strong>CentOS</strong> 和 <strong>Fedora</strong> 等发行版。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决vscode远程连接Linux无权限保存的问题</title>
      <link href="/2024/09/25/Linux/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/09/25/Linux/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>用vscode远程登陆普通用户修改&#x2F;etc&#x2F;profile，保存文件时，出现了以下的问题。大体意思就是没有权限进行更改。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98%20/image-20240925100746008.png" alt="image-20240925100746008"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通常情况下，普通用户只能对自己home目录里面的文件进行更改，想要修改home目录以外的文件通常来说都是需要root权限的，在命令行界面可以利用vim编辑器配合<code>sudo</code>来达到这个目的，但是vscode的GUI编辑器里面是没有提供类似的功能的，如果想要通过vscode自带的编辑器修改没有权限的文件，可以通过这个插件</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98%20/image-20240925102457046.png" alt="image-20240925102457046"></p><p>按下<code>ctrl+shift+p</code>,输入<code>save as root</code></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98%20/image-20240925102621847.png" alt="image-20240925102621847"></p><p>可以看到文件成功保存了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E6%97%A0%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E7%9A%84%E9%97%AE%E9%A2%98%20/image-20240925102719335.png" alt="image-20240925102719335"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键更换软件源的工具——chsrc</title>
      <link href="/2024/09/17/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc/"/>
      <url>/2024/09/17/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常用pip，ubuntu的apt，或者centos的yum等包下载工具的人不可避免的一件事就是——“更换软件源”，因为以上三个包下载工具的软件源一般都是默认为国外的官方网站，由于国情问题，下载速度就会非常慢，所以我们使用这些包下载工具通常都会换源，但是更换软件源是一个比较麻烦的步骤，而且每个不同的包下载器的配置方法都是异构的，通常我可以用以下的步骤概括一下：</p><ol><li>上网搜索相关的教程，找到想要更换的对应包下载工具软件源的方法</li><li>找到下载速度比较快，而且稳定的镜像站</li><li>找到包下载工具的配置文件，进行更改</li></ol><p>而且不同的包下载工具，上面的步骤都是不一样的，所以就存在以下的痛点了：</p><ol><li>不同镜像站的下载速度你要自己测量，很麻烦</li><li>不同包下载工具的配置文件的存放位置与修改方法都是异构的</li><li>在网上找教程经常会遇到互联网垃圾，需要一个个过滤</li></ol><p>于是！🤓我就找到了一个很好用的换源工具——<a href="https://github.com/RubyMetric/chsrc">chsrc</a>,这个命令行工具完美解决了以上的痛点，并且支持绝大多数的包下载器与系统换源(下面展示)</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>还是老规矩，好不好用，直接看图说话，说再多都是虚的😊。</p><h3 id="可用对象"><a href="#可用对象" class="headerlink" title="可用对象"></a>可用对象</h3><p>可用镜像站和可换源目标有很多，不过对我来说比较常用的就几个，pip ,ubuntu，npm，conda,anaconda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">D:\kashima19960.github.io&gt;chsrc list</span><br><span class="line">指定使用某源，请使用 chsrc <span class="built_in">set</span> &lt;target&gt; &lt;code&gt;</span><br><span class="line">可用镜像站: </span><br><span class="line"></span><br><span class="line">  code         镜像站简写                  镜像站URL                              镜像站</span><br><span class="line">---------    --------------    -------------------------------------     ---------------------</span><br><span class="line">mirrorz       MirrorZ           https://mirrors.cernet.edu.cn/            MirrorZ 校园网镜像站</span><br><span class="line">tuna          TUNA              https://mirrors.tuna.tsinghua.edu.cn/     清华大学开源软件镜像站</span><br><span class="line">sjtu          SJTUG-zhiyuan     https://mirrors.sjtug.sjtu.edu.cn/        上海交通大学致远镜像站</span><br><span class="line">zju           ZJU               https://mirrors.zju.edu.cn/               浙江大学开源软件镜像站</span><br><span class="line">lzu           LZUOSS            https://mirror.lzu.edu.cn/                兰州大学开源社区镜像站</span><br><span class="line">jlu           JLU               https://mirrors.jlu.edu.cn/               吉林大学开源镜像站</span><br><span class="line">bfsu          BFSU              https://mirrors.bfsu.edu.cn/              北京外国语大学开源软件镜像站</span><br><span class="line">pku           PKU               https://mirrors.pku.edu.cn/               北京大学开源镜像站</span><br><span class="line">bjtu          BJTU              https://mirror.bjtu.edu.cn/               北京交通大学自由与开源软件镜像站</span><br><span class="line">sustech       SUSTech           https://mirrors.sustech.edu.cn/           南方科技大学开源软件镜像站</span><br><span class="line">ustc          USTC              https://mirrors.ustc.edu.cn/              中国科学技术大学开源镜像站</span><br><span class="line">hust          HUST              https://mirrors.hust.edu.cn/              华中科技大学开源镜像站</span><br><span class="line">nju           NJU               https://mirrors.nju.edu.cn/               南京大学开源镜像站</span><br><span class="line">ali           Ali OPSX          https://developer.aliyun.com/mirror/      阿里巴巴开源镜像站</span><br><span class="line">tencent       Tencent           https://mirrors.tencent.com/              腾讯软件源</span><br><span class="line">huawei        Huawei Cloud      https://mirrors.huaweicloud.com/          华为开源镜像站</span><br><span class="line">volc          Volcengine        https://developer.volcengine.com/mirror/  火山引擎开源软件镜像站</span><br><span class="line">netease       Netease           https://mirrors.163.com/                  网易开源镜像站</span><br><span class="line">sohu          SOHU              https://mirrors.sohu.com/                 搜狐开源镜像站</span><br><span class="line">api7          api7.ai           https://www.apiseven.com/                 深圳支流科技有限公司</span><br><span class="line">fit2cloud     FIT2CLOUD         https://www.fit2cloud.com/                杭州飞致云信息科技有限公司</span><br><span class="line">rubychina     RubyChina         https://gems.ruby-china.com/              Ruby China 社区</span><br><span class="line">emacschina    EmacsChina        https://elpamirror.emacs-china.org/       Emacs China 社区</span><br><span class="line">npmmirror     npmmirror         https://npmmirror.com/                    npmmirror (阿里云赞助)</span><br><span class="line">goproxy.cn    Goproxy.cn        https://goproxy.cn/                       Goproxy.cn (七牛云)</span><br><span class="line">goproxy.io    GOPROXY.IO        https://goproxy.io/                       GOPROXY.IO</span><br><span class="line"></span><br><span class="line">支持对以下目标换源 (同一行表示这几个命令兼容)</span><br><span class="line"></span><br><span class="line">编程语言</span><br><span class="line">-------------------------</span><br><span class="line">gem     ruby    rubygem rb      rubygems        bundler</span><br><span class="line">pip     python  pypi    py      poetry  pdm</span><br><span class="line">npm     node    nodejs  js      yarn    pnpm</span><br><span class="line">perl    cpan</span><br><span class="line">php     composer</span><br><span class="line">lua     luarocks</span><br><span class="line">rust    cargo   crate   crates</span><br><span class="line">go      golang  goproxy</span><br><span class="line">java    maven   mvn     gradle</span><br><span class="line">clojure clojars cloj    lein    leiningen</span><br><span class="line">dart    pub     flutter</span><br><span class="line">haskell cabal   stack   hackage</span><br><span class="line">ocaml   opam</span><br><span class="line">cran    r</span><br><span class="line">julia</span><br><span class="line"></span><br><span class="line">操作系统</span><br><span class="line">-------------------------</span><br><span class="line">debian</span><br><span class="line">ubuntu</span><br><span class="line">linuxmint       mint</span><br><span class="line">kali</span><br><span class="line">trisquel</span><br><span class="line">lite    linuxlite</span><br><span class="line">raspi   raspberrypi</span><br><span class="line">armbian</span><br><span class="line">openwrt opkg    LEDE</span><br><span class="line">deepin</span><br><span class="line">openkylin</span><br><span class="line">ros     ros2</span><br><span class="line">fedora</span><br><span class="line">rocky   rockylinux</span><br><span class="line">alma    almalinux</span><br><span class="line">openeuler</span><br><span class="line">openanolis      anolis</span><br><span class="line">opensuse</span><br><span class="line"><span class="built_in">arch</span>    archlinux</span><br><span class="line">archlinuxcn     archcn</span><br><span class="line">manjaro</span><br><span class="line">gentoo</span><br><span class="line">alpine</span><br><span class="line">void    voidlinux</span><br><span class="line">solus</span><br><span class="line">msys2   msys</span><br><span class="line">freebsd</span><br><span class="line">netbsd</span><br><span class="line">openbsd</span><br><span class="line"></span><br><span class="line">软件</span><br><span class="line">-------------------------</span><br><span class="line">winget</span><br><span class="line">brew    homebrew</span><br><span class="line">cocoa   cocoapods       pod     cocoapod</span><br><span class="line">dockerhub       docker</span><br><span class="line">flathub flatpak</span><br><span class="line">nix</span><br><span class="line">guix</span><br><span class="line">emacs   elpa</span><br><span class="line">latex   ctan    tex     texlive miktex  tlmgr   mpm</span><br><span class="line">conda   anaconda</span><br></pre></td></tr></table></figure><h3 id="测速功能"><a href="#测速功能" class="headerlink" title="测速功能"></a>测速功能</h3><p><code>chsrc</code>能一键帮你测试所有镜像站的连接速度，并且给出最高值</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917172228941.png" alt="image-20240917172228941"></p><h3 id="一键换源"><a href="#一键换源" class="headerlink" title="一键换源"></a>一键换源</h3><p><code>chsrc</code>能在测量镜像站速度后，自己替你更换速度最快的源</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917172540336.png" alt="image-20240917172540336"></p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>作者都打包到了一个exe文件(windows系统)或者一个shell脚本中(linux系统)，因此下载后就能立刻使用了，不需要安装，根据自己的系统下载对应的版本即可<a href="https://github.com/RubyMetric/chsrc/releases/tag/v0.1.8">Release v0.1.8 · RubyMetric&#x2F;chsrc (github.com)</a>，如果你访问不了github,那就通过国内的gitee下载<a href="https://gitee.com/RubyMetric/chsrc/releases/tag/v0.1.8">v0.1.8 · RubyMetric&#x2F;chsrc - Gitee.com</a>。<strong>下面我介绍一种从来没接触过命令行的萌新的安装方法</strong>，大佬的话，建议直接看<a href="https://github.com/RubyMetric/chsrc">官方文档</a></p><p><code>chsrc</code>是一个命令行工具，想要使用必须在命令行中调用，但是下载完后，直接在命令行敲 <code>chsrc</code>是没有用的,因为shell无法搜索到这个路径(这个解释起来会是长篇大论，因此这里跳过)</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917174408602.png" alt="image-20240917174408602"></p><p>有两种方法，能让你调用到这个工具</p><ol><li>进入到这个工具所在的根目录，比如我把工具下载到了D:\temp下</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917174531031.png" alt="image-20240917174531031"></p><p>在命令行界面，我们 <code>cd</code>进去更改目录到工具的根目录</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917174621243.png" alt="image-20240917174621243"></p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\chsrc-x64-windows.exe</span><br></pre></td></tr></table></figure><p>这个 <code>.\</code>是不能省略的，表示当前目录的意思，如果是Linux系统的话，要用斜杠 <code>./</code></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917174805429.png" alt="image-20240917174805429"></p><ol start="2"><li>添加环境变量</li></ol><p>把 <code>D:\temp</code>(这里改成你的chsrc的安装位置)，添加到环境变量中，这样就不需要在工具所在目录使用了，其他系统怎么添加环境变量，自行百度</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917175106282.png" alt="image-20240917175106282"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917175228447.png" alt="image-20240917175228447"></p><p>说起来，这个 <code>chsrc-x64-windows.exe</code>名字太长了，你可以直接改个名字叫 <code>chsrc.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917175416490.png" alt="image-20240917175416490"></p><p>这样在命令行就不用敲那么长的名字了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917175507271.png" alt="image-20240917175507271"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>chsrc</code>有以下的使用方法，看似很多，其实常用的就两三个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">D:\kashima19960.github.io&gt;chsrc</span><br><span class="line">chsrc: Change Source (GPLv3+) v0.1.8-2024/08/23 by RubyMetric</span><br><span class="line"></span><br><span class="line">使用: chsrc &lt;<span class="built_in">command</span>&gt; [options] [target] [mirror]</span><br><span class="line"><span class="built_in">help</span>                      打印此帮助，或 h, -h, --<span class="built_in">help</span></span><br><span class="line">issue                     查看相关issue</span><br><span class="line"></span><br><span class="line">list (或 <span class="built_in">ls</span>, 或 l)        列出可用镜像源，和可换源目标</span><br><span class="line">list mirror/target        列出可用镜像源，或可换源目标</span><br><span class="line">list os/lang/ware         列出可换源的操作系统/编程语言/软件</span><br><span class="line"></span><br><span class="line">measure &lt;target&gt;          对该目标所有源测速</span><br><span class="line">cesu    &lt;target&gt;</span><br><span class="line"></span><br><span class="line">list &lt;target&gt;             查看该目标可用源与支持功能</span><br><span class="line">get  &lt;target&gt;             查看该目标当前源的使用情况</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>  &lt;target&gt;             换源，自动测速后挑选最快源</span><br><span class="line"><span class="built_in">set</span>  &lt;target&gt;  first      换源，使用维护团队测速第一的源</span><br><span class="line"><span class="built_in">set</span>  &lt;target&gt; &lt;mirror&gt;    换源，指定使用某镜像站 (通过list &lt;target&gt;查看)</span><br><span class="line"><span class="built_in">set</span>  &lt;target&gt; https://url 换源，用户自定义源URL</span><br><span class="line">reset &lt;target&gt;            重置，使用上游默认使用的源</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">-dry                      Dry Run，模拟换源过程，命令仅打印并不运行</span><br><span class="line">-ipv6                     使用IPv6测速</span><br><span class="line">-<span class="built_in">local</span>                    仅对本项目而非全局换源 (通过<span class="built_in">ls</span> &lt;target&gt;查看支持情况)</span><br><span class="line">-en(glish)                使用英文输出</span><br><span class="line">-no-color                 无颜色输出</span><br><span class="line"></span><br><span class="line">维护: &lt;https://github.com/RubyMetric/chsrc&gt;</span><br></pre></td></tr></table></figure><ol><li><code>chsrc list</code>,列出所有可用源，效果图中已经演示过</li><li><code> chsrc set &lt;target&gt; &lt;code&gt;</code>,这个target指的是 <code>chsrc list</code>列出的目标，比如pip,ubuntu，conda之类的，这个code一般指镜像站的url或者代号，不指定的话，就会测量出速度最快的镜像站，然后设置成该镜像站的软件源</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917184108029.png" alt="image-20240917184108029"></p><ol start="3"><li><code>chsrc reset &lt;target&gt; &lt;code&gt;</code>,用法跟 <code>chsrc set</code>类似,用来重置软件源，比如重置pip为官方的软件源</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%B8%80%E9%94%AE%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%9A%84%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94chsrc%20/image-20240917184441577.png" alt="image-20240917184441577"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文旨在分享好用的开源软件，如果你觉得这个换源工具很好用，请多多支持原作者和这个开源项目！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以root用户登陆ubuntu的桌面环境</title>
      <link href="/2024/09/16/Linux/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/09/16/Linux/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习Linux的时候，经常都需要使用sudo权限来对配置文件进行修改，常用的方法就是用vim编辑器在命令行界面进行修改，比如 <code>sudo vim /etc/profile</code>，但我觉得每次都用命令行挺麻烦的，于是！🤓我就想办法直接用root用户的方法登陆桌面，然后用桌面的GUI编辑器直接编辑文本。下面的操作步骤是基于Ubuntu的，不过只要是使用<strong>Gnome桌面</strong>的发行版应该都是适用的</p><blockquote><p>GNOME桌面环境是一个免费的开源桌面环境，最初是为Linux和其他类Unix操作系统开发的。GNOME的全称是GNU网络对象模型环境（GNU Network Object Model Environment），它旨在为用户提供一个友好且易于使用的图形界面。许多主要的Linux发行版，如Debian、Fedora、Ubuntu等，都将GNOME作为默认桌面环境</p></blockquote><h2 id="重要提示！！"><a href="#重要提示！！" class="headerlink" title="重要提示！！"></a>重要提示！！</h2><p>默认情况下，直接通过root用户登陆桌面，这个操作在默认情况下都是禁止的，因为这相当的危险(root用户可以不受限制对所有文件进行操作，所以在以root用户登陆桌面后，请谨慎进行操作！！不要乱删除一些重要的文件，尤其是配置文件</p><h2 id="第-1-步：启用-root-账户"><a href="#第-1-步：启用-root-账户" class="headerlink" title="第 1 步：启用 root 账户"></a>第 1 步：启用 root 账户</h2><p>root用户一般是没有密码的，默认情况下不启用。使用 <code>sudo passwd root</code>来给root用户得到一个密码,需要注意的是，用sudo改密码是可以无视密码策略的，也就是说像“1”,”123”,”111”这样的简单密码也是可以修改成功的，因此最好要记住你自己设置的root密码。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%20/image-20240916171827876.png" alt="image-20240916171827876"></p><h2 id="第2步：更改-GDM-配置"><a href="#第2步：更改-GDM-配置" class="headerlink" title="第2步：更改 GDM 配置"></a>第2步：更改 GDM 配置</h2><p>gdm,全称gnome display managers,如字面意思，他的作用是提供gnome桌面的图形登录并处理用户身份验证，现在都是用gdm3了，我们需要修改他的配置文件,使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/gdm3/custom.conf</span><br></pre></td></tr></table></figure><p>如果你不会用vim编辑器，那么用nano也行，比较简单。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/gdm3/custom.conf</span><br></pre></td></tr></table></figure><p>然后在[daemon]下面添加,意思就是允许root用户登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllowRoot=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%20/image-20240916174416908.png" alt="image-20240916174416908"></p><p>最后保存退出</p><h2 id="第-3-步：配置-PAM-认证"><a href="#第-3-步：配置-PAM-认证" class="headerlink" title="第 3 步：配置 PAM 认证"></a>第 3 步：配置 PAM 认证</h2><p>打开 PAM 认证守护进程文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/pam.d/gdm-password</span><br></pre></td></tr></table></figure><p>在这个文件中找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth   required        pam_succeed_if.so user != root quiet_success</span><br></pre></td></tr></table></figure><p>然后在这一行前面加上一个 <code>#</code>，表示注释掉这一行，因为这一行拒绝了在GUI中的root访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># auth   required        pam_succeed_if.so user != root quiet_success</span></span><br></pre></td></tr></table></figure><p>最后保存退出</p><h2 id="第4步-登陆root用户"><a href="#第4步-登陆root用户" class="headerlink" title="第4步:登陆root用户"></a>第4步:登陆root用户</h2><p>在做出上述修改后，要重启一下，不然修改不会生效</p><p>之后在用户登陆界面，下面会有个很小的一行字 <code>not list？</code>，要是你设置了系统语言为中文的话就是 <code>未列出？</code>,点击进行用root用户登陆就行了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%20/change-ubuntu-22-04-login-screen-background-8.jpg" alt="轻松 DIY：Ubuntu 登录与锁屏壁纸定制全攻略 - 系统极客"></p><p>登陆成功后，会提示</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E4%BB%A5root%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86ubuntu%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83%20/image-20240916175400174.png" alt="image-20240916175400174"></p><p>大致意思就是，你现在在用特权账户登陆，这个操作应该被避免。出现这个对话框，说明就成功用root用户登陆桌面环境了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode运行Python无法导入自己编写的包的解决方法</title>
      <link href="/2024/09/13/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/13/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 我写python代码，大多数时间都是使用vscode编辑器，一般而言，在导入第三方包或者是Python内置的包，基本上都不会遇到什么问题。然而，当我尝试导入一个<strong>跨文件</strong>自定义的包时，却遭遇了导入异常的问题，因此我写下这篇文章是记录我解决这个问题的方法与思路，希望通过分享解决这一问题的方法，帮助遇到类似问题的开发者。以及我觉得“包”这个称呼，不太贴切我们日常使用操作系统的习惯，因此后面我都会称呼为“文件夹”。</p><h2 id="作者所使用的平台"><a href="#作者所使用的平台" class="headerlink" title="作者所使用的平台"></a>作者所使用的平台</h2><ul><li><strong>Vscode编辑器</strong></li><li><strong>python3.8.10</strong></li><li><strong>venv虚拟环境</strong></li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>导入模块时，可以看到编辑器并没有给出任何的报错</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/image-20240913165159066.png" alt="image-20240913165159066"></p><p>但是运行 <code>cluster.py</code>的时候，出现了下面的错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:\z资料\s数学建模\MathModels\Models\cluster.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">    from DataProcess.decomposer import PCA</span><br><span class="line">ModuleNotFoundError: No module named &#x27;DataProcess&#x27;</span><br></pre></td></tr></table></figure><p>通过查看文件树，可以看到 <code>DataProcess</code> 是一个文件夹，<code>cluster.py</code>所在的文件夹 <code>Models</code>与 <code>DataProcess</code>文件夹是属于同级文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/image-20240913152248415.png" alt="image-20240913152248415"></p><p>这里有个知识点，是你必须知道的，Python在导入包的时候，会对包所在的路径进行搜索，并且这个搜索是有优先级的</p><ol><li><strong>当前目录</strong>：Python首先检查当前的工作目录。</li><li><strong>PYTHONPATH</strong>：这是环境变量，包含了一系列目录路径，Python会在此查找。</li><li><strong>安装的第三方库</strong>：Python会检查在site-packages目录下的第三方库。</li><li><strong>Python标准库</strong>：最后，Python会检查内置的标准库。</li></ol><p>这个顺序确保了本地目录的优先级最高，然后是用户自定义的路径，接着是第三方库，最后是Python的标准库。这样做可以避免本地目录下的模块与标准库或第三方库中的模块发生命名冲突。</p><p>从上面的优先级可以看到，我们之所以会出现 <code>ModuleNotFoundError: No module named &#39;DataProcess&#39;</code>，是因为我们导入的包的位置不符合上述四个当中的任意一个，因此Python解释器在解释代码的时候就无法找到我们自定义的包。</p><h2 id="解决的方法"><a href="#解决的方法" class="headerlink" title="解决的方法"></a>解决的方法</h2><p>根据上述讲到的问题，我们简单分析一下，既然Python解释器无法找到我们自定义的包，那么就由我们自己告诉Python解释器，我们自定义的包在什么地方不就行了？😈😈这里可以使用 <code>.pth</code>文件来手动指定Python搜索包的路径</p><blockquote><p>在Python中，.pth文件是一种文本文件，它包含了一行一行的目录路径。这些路径会被Python解释器识别，并将其添加到模块搜索路径中。通过使用.pth文件，我们可以轻松地自定义Python模块的路径，方便地添加第三方库或自己编写的模块。所以.pth文件就提供给了我们除了上面四种搜索方法的额外拓展的办法。</p></blockquote><ol><li>找到site-packages文件夹</li></ol><p>这个文件夹一般是用来存放第三方库的位置，我们可以利用这个文件夹，他通常都会在python解释器的Lib目录下，比如本文用的是venv虚拟环境，这个文件夹都位于 <code>.venv\Lib\site-packages</code></p><ol start="2"><li>在site-packages文件夹下新建一个mypath.pth文件</li></ol><p>注：这个文件名是任取的，不一定非得叫mypath</p><ol start="3"><li>在mypath.pth文件写入自定义包的路径</li></ol><p>拿我自己的项目举例，你只需要在mypath.pth文件中填写<strong>项目根目录文件夹的路径</strong>就行了，如下图所示</p><p>ps:这里推荐用绝对路径，当然用相对路径也是可以的</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/image-20240913165342658.png" alt="image-20240913165342658"></p><p>在这里有一个非常容易出现的误区，有些人可能会心想，既然导入的是DataProcess包(文件夹)，那么为什么不直接填写DataProcess包(文件夹)的路径呢(如下图所示)？事实上，这种想法是错误的，在路径搜索中python解释器会将一个包(文件夹)当成一个整体看待，因此你给出的路径得是这个包的根目录才行。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/image-20240913155109563.png" alt="image-20240913155109563"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>一切都顺利的话，我们再次重新运行 <code>cluster.py</code>，应该就不会再次出现导入出错的情况了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/success.png" alt="success"></p><p>如何你执行完以上的步骤后，仍然会导入异常，可能有以下的原因</p><ul><li>缓存没有清空</li><li>.pth文件放错位置了</li><li>路径没有写对</li></ul><p>可以尝试清空缓存试试,按下 <code>ctrl+shift+p</code>，输入python，找到下面的选项</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Vscode%E8%BF%90%E8%A1%8CPython%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20/image-20240913171701496.png" alt="image-20240913171701496"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除微信重复文件的简易工具</title>
      <link href="/2024/08/30/%E5%88%A0%E9%99%A4%E5%BE%AE%E4%BF%A1%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%E7%9A%84%E7%AE%80%E6%98%93%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/08/30/%E5%88%A0%E9%99%A4%E5%BE%AE%E4%BF%A1%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%E7%9A%84%E7%AE%80%E6%98%93%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>!<strong>!!!温馨提示：假如你是小白，啥都不懂，请直接跳到文章的最后!!!</strong></p><p>原本我是没想写这篇文章，契机是某一天我突然打开微信的存储空间占用才发现。多少？😡我寻思平常也不怎么用微信，怎么占用的空间这么离谱，居然有20个G左右，这是在微信上存了个小电影吗？</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830152430948.png" alt="image-20240830152430948" style="zoom: 50%;" /><p>抱着好奇心的我，打开了微信的物理存储位置，其他平台我没试过，<strong>仅在windows平台下测试过</strong>，存储位置一般能通过这样打开</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-30%20153222.png" alt="屏幕截图 2024-08-30 153222"></p><p>找寻到存储文件的位置，一般是子目录<code> FileStorage\File</code>这个位置就是用来存储通过微信保存的各种文件，而且会按照日期排序</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830153835086.png" alt="image-20240830153835086"></p><p>随便点进去一个会发现，这个文件夹下存储了大量相同的文件，然后在原有的文件的名字后面加上(1)，(2),(3)，(1)(1)这种序号,也就是说这些文件都是被重复存储了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830154106033.png" alt="image-20240830154106033"></p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>通过上面的流程，可以得出一个结论，<strong>微信是存储了大量重复文件，才会占用这么大的存储空间</strong>，我在网上也找了一些解释，这个似乎跟微信的存储策略有关</p><blockquote><p>  据悉，这种情况出现的原因之一是微信的文件转发策略导致。例如将同一份文件转发给多个好友，每一次转发都会重新保存一份在手机上，重复文件占用了手机大量存储空间。而且过大的空间占用也会使手机出现明显的卡顿和发热等情况，影响正常使用。</p></blockquote><p>也就是说，我们完全可以把这些重复的文件全部删除，但是我的微信记录已经有好几年了，要是一个个删除，是一件费时费力的方法。于是！🤓我突发奇想，既然这样的话，编写一个批量删除的程序不就行了？😗</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>老规矩，我喜欢在看一系列繁琐的步骤前先看看效果，这样我才有继续看下去的欲望，相信大多数人都是这样想的😝</p><ol><li><p>首先执行程序,选择是否要进行递归删除，递归删除意思就是，你选择的目录的子目录里面的重复文件也会被删除。这里我们选择n</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830161217202.png" alt="image-20240830161217202"></p></li><li><p>选择路径</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830161448609.png" alt="image-20240830161448609" style="zoom:50%;" /></li><li><p>执行效果,按回车可以退出</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830161613713.png" alt="image-20240830161613713"></p><ol start="4"><li><p>删除的文件会到回收站里面,而不是永久删除,这样就能有撤销的余地了</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830161721954.png" alt="image-20240830161721954" style="zoom:50%;" /></li></ol><h2 id="问题的解决与思路"><a href="#问题的解决与思路" class="headerlink" title="问题的解决与思路"></a>问题的解决与思路</h2><p><strong>这块的内容会涉及到一些专业知识，假如你不懂，那么直接跳过就行，使用我打包好的程序即可。</strong></p><ol><li>首先通过观察可以发现，微信在保存这些重复文件的特点是在文件名后加上序号,比如</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串.doc</span><br><span class="line">字符串(1).doc</span><br><span class="line">字符串(2).doc</span><br><span class="line">字符串(1)(1).doc</span><br></pre></td></tr></table></figure><p>我们可以通过正则表达式去匹配这种字符串，“字符”+“序号”.”后缀名”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">.*表示匹配任意字符</span></span><br><span class="line"><span class="string">(\d)匹配带有括号的序号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">.*\(\d\).*</span><br></pre></td></tr></table></figure><p>这样我们就能通过程序识别这些文件</p><ol start="2"><li><p>其他，有次非常关键的点是，假如你在微信勾选了这个选项，那么存储的文件会因为只读权限，导致删除失败，因此在识别到文件之后，我们还需要改变文件的权限,才能删除,这里可以使用os.chmod函数做到</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%20/image-20240830160308823.png" alt="image-20240830160308823"></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#权限检查，移除只读属性</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> matchfilelist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.chmod(file, stat.S_IWRITE)</span><br><span class="line">            send2trash.send2trash(os.path.normpath(file))<span class="comment">#将匹配的文件放入回收站</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功删除了文件: <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;删除文件时出现错误: <span class="subst">&#123;file&#125;</span>，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>最后我们需要解决的问题是，由于文件夹的子目录数量非常多，因此我们可能不想对每个文件夹都单独执行一遍程序，最好是能递归地自动执行，这里我们可以使用os.walk，它可以记录目录的文件数，从而能递归对子目录也进行删除操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_delete_file</span>(<span class="params">directory</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        delete_file(root)</span><br></pre></td></tr></table></figure><h2 id="完整程序实现"><a href="#完整程序实现" class="headerlink" title="完整程序实现"></a>完整程序实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> stat</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"><span class="keyword">import</span> send2trash</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_file</span>(<span class="params">folder_path</span>):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.*\(\d\).*&#x27;</span>)</span><br><span class="line">    filelist=os.listdir(folder_path)</span><br><span class="line">    matchfilelist=[]</span><br><span class="line">    <span class="comment">#找出匹配的文件名</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(pattern,file):</span><br><span class="line">            matchfilelist.append(folder_path+<span class="string">&quot;/&quot;</span>+file)</span><br><span class="line">    <span class="comment">#权限检查，移除只读属性</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> matchfilelist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.chmod(file, stat.S_IWRITE)</span><br><span class="line">            send2trash.send2trash(os.path.normpath(file))<span class="comment">#将匹配的文件放入回收站</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功删除了文件: <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;删除文件时出现错误: <span class="subst">&#123;file&#125;</span>，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_delete_file</span>(<span class="params">directory</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        delete_file(root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    root.withdraw()  <span class="comment"># 隐藏主窗口</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是否采取递归删除？(y/n),递归操作相当危险，请谨慎选择&quot;</span>)</span><br><span class="line">    flag=<span class="built_in">input</span>()</span><br><span class="line">    file_path = filedialog.askdirectory() <span class="comment"># 打开文件选择对话框</span></span><br><span class="line">    <span class="keyword">if</span> flag==<span class="string">&quot;y&quot;</span> <span class="keyword">or</span> flag==<span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">        recursive_delete_file(file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        delete_file(file_path)</span><br><span class="line">    root.destroy()</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;按回车键退出&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2024-10-10更新"><a href="#2024-10-10更新" class="headerlink" title="2024-10-10更新"></a>2024-10-10更新</h2><p>最近我正在学习pyqt，因此🤓！！我用qt框架将原来的代码封装了一下，做了一个简单的界面(学以致用嘛😗)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> stat</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"><span class="keyword">import</span> send2trash</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line">QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtWidgets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Form</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        Form.setObjectName(<span class="string">&quot;文件删除工具&quot;</span>)</span><br><span class="line">        Form.resize(<span class="number">383</span>, <span class="number">182</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget = QtWidgets.QWidget(Form)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">381</span>, <span class="number">181</span>))</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget.setObjectName(<span class="string">&quot;verticalLayoutWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>.verticalLayoutWidget)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.textBrowser = QtWidgets.QTextBrowser(<span class="variable language_">self</span>.verticalLayoutWidget)</span><br><span class="line">        <span class="variable language_">self</span>.textBrowser.setObjectName(<span class="string">&quot;textBrowser&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addWidget(<span class="variable language_">self</span>.textBrowser, <span class="number">0</span>, QtCore.Qt.AlignVCenter)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.setObjectName(<span class="string">&quot;horizontalLayout&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton = QtWidgets.QPushButton(<span class="variable language_">self</span>.verticalLayoutWidget)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.pushButton)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_2 = QtWidgets.QPushButton(<span class="variable language_">self</span>.verticalLayoutWidget)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_2.setObjectName(<span class="string">&quot;pushButton_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.horizontalLayout.addWidget(<span class="variable language_">self</span>.pushButton_2)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayout.addLayout(<span class="variable language_">self</span>.horizontalLayout)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;Form&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.textBrowser.setHtml(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.0//EN\&quot; \&quot;http://www.w3.org/TR/REC-html40/strict.dtd\&quot;&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;meta name=\&quot;qrichtext\&quot; content=\&quot;1\&quot; /&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;p, li &#123; white-space: pre-wrap; &#125;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&lt;/style&gt;&lt;/head&gt;&lt;body style=\&quot; font-family:\&#x27;SimSun\&#x27;; font-size:9pt; font-weight:400; font-style:normal;\&quot;&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&lt;p style=\&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\&quot;&gt;&lt;span style=\&quot; font-family:\&#x27;Ubuntu Mono derivative Powerline\&#x27;,\&#x27;Consolas\&#x27;,\&#x27;Courier New\&#x27;,\&#x27;monospace\&#x27;; font-size:16pt; color:#0a3069;\&quot;&gt;是否采取递归删除？&lt;/span&gt;&lt;/p&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&lt;p style=\&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:24px; background-color:#ffffff;\&quot;&gt;&lt;span style=\&quot; font-family:\&#x27;Ubuntu Mono derivative Powerline\&#x27;,\&#x27;Consolas\&#x27;,\&#x27;Courier New\&#x27;,\&#x27;monospace\&#x27;; font-size:16pt; color:#0a3069;\&quot;&gt;注：递归删除的意思是，将文件子目录的文件也会一并删除&lt;/span&gt;&lt;/p&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;&lt;p style=\&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; line-height:24px; background-color:#ffffff;\&quot;&gt;&lt;span style=\&quot; font-family:\&#x27;Ubuntu Mono derivative Powerline\&#x27;,\&#x27;Consolas\&#x27;,\&#x27;Courier New\&#x27;,\&#x27;monospace\&#x27;; font-size:16pt; color:#0a3069;\&quot;&gt;请谨慎使用！！！&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;是&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_2.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;否&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_file</span>(<span class="params">folder_path</span>):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.*\(\d\).*&#x27;</span>)</span><br><span class="line">    filelist=os.listdir(folder_path)</span><br><span class="line">    matchfilelist=[]</span><br><span class="line">    <span class="comment">#找出匹配的文件名</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> re.<span class="keyword">match</span>(pattern,file):</span><br><span class="line">            matchfilelist.append(folder_path+<span class="string">&quot;/&quot;</span>+file)</span><br><span class="line">    <span class="comment">#权限检查，移除只读属性</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> matchfilelist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.chmod(file, stat.S_IWRITE)</span><br><span class="line">            send2trash.send2trash(os.path.normpath(file))<span class="comment">#将匹配的文件放入回收站</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功删除了文件: <span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;删除文件时出现错误: <span class="subst">&#123;file&#125;</span>，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_delete_file</span>(<span class="params">directory</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        delete_file(root)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">delete_tool_widget</span>(QWidget,Ui_Form):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;文件删除工具&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton.clicked.connect(<span class="variable language_">self</span>.yes_event)</span><br><span class="line">        <span class="variable language_">self</span>.pushButton_2.clicked.connect(<span class="variable language_">self</span>.no_event)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">yes_event</span>(<span class="params">self</span>):</span><br><span class="line">        directory = QFileDialog.getExistingDirectory(<span class="literal">None</span>,<span class="string">&quot;选择目录&quot;</span>,<span class="string">&quot;.&quot;</span>,QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)</span><br><span class="line">        recursive_delete_file(directory)</span><br><span class="line">        exit(app.exec_())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">no_event</span>(<span class="params">self</span>):</span><br><span class="line">        directory = QFileDialog.getExistingDirectory(<span class="literal">None</span>,<span class="string">&quot;选择目录&quot;</span>,<span class="string">&quot;.&quot;</span>,QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)</span><br><span class="line">        delete_file(directory)</span><br><span class="line">        exit(app.exec_())</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app=QApplication(argv)</span><br><span class="line">    window=delete_tool_widget()</span><br><span class="line">    window.show()</span><br><span class="line">    exit(app.exec_())</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%BE%AE%E4%BF%A1%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6/image-20241010231832262.png" alt="image-20241010231832262"></p><h2 id="给小白"><a href="#给小白" class="headerlink" title="给小白"></a>给小白</h2><p>假如上面的内容你完全不知道是什么，不会python，也不知道啥是脚本。没事，没事🫠，直接下载我打包好的exe程序就行了😈</p><p><strong>初版程序：</strong><a href="https://github.com/kashima19960/Wechat_Duplicatefiles_Delete/releases/download/v1/main.exe">https://github.com/kashima19960/Wechat_Duplicatefiles_Delete/releases/download/v1/main.exe</a></p><p><strong>2024-10-10更新的程序：</strong><a href="https://github.com/kashima19960/Wechat_Duplicatefiles_Delete/releases/download/v2/main.exe">https://github.com/kashima19960/Wechat_Duplicatefiles_Delete/releases/download/v2/main.exe</a></p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p> 本程序旨在帮助用户删除特定模式的文件。使用本程序可能会导致数据丢失，包括重要文件。请在使用前确保您已充分了解本程序的功能，并已做好数据备份。 作者不对使用本程序造成的任何直接或间接损失负责，包括但不限于数据丢失、硬件损坏或业务中断。使用本程序即表示您同意自行承担所有风险。 请在使用前仔细阅读并理解本程序的使用说明。如果您不同意本免责声明的任何部分，请不要使用本程序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra搜索算法原理及其程序实现</title>
      <link href="/2024/08/27/%E7%AE%97%E6%B3%95/%E7%BC%96%E7%A8%8B-%20Dijkstra%E7%AE%97%E6%B3%95/"/>
      <url>/2024/08/27/%E7%AE%97%E6%B3%95/%E7%BC%96%E7%A8%8B-%20Dijkstra%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文算是我学习这个算法的学习记录，因此我会更加侧重于程序实现的讲解，因为原理相关的内容我已经非常熟悉了，并且Dijkstra算法需要有一定图论相关的知识，不过没必要完全系统地学会，只需要知道无向图，有向图，邻接矩阵相关的概念就行了。</p><p>下面我将会以<strong>在图中寻找一个节点（称为“源节点”）到所有其它节点的最短路径</strong>的例子进行讲解，在文章的末尾将给出程序完整的Python与C++实现</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>下面的相关知识，是你在编程前必须要知道的</p><ul><li><p>Dijkstra 算法从指定的节点（源节点）出发，寻找它与图中所有其它节点之间的最短路径。</p></li><li><p>Dijkstra 算法会记录当前已知的最短路径，并在寻找到更短的路径时更新。</p></li><li><p>一旦找到源节点与其他节点之间的最短路径，那个节点会被标记为“已访问”并添加到路径中。</p></li><li><p>重复寻找过程，直到图中所有节点都已经添加到路径中。这样，就可以得到从源节点出发访问所有其他节点的最短路径方案。</p></li><li><p>Dijkstra <strong>只能用在权重为正的图中</strong>，因为计算过程中需要将边的权重相加来寻找最短路径。</p><blockquote><p>  Dijkstra算法可以看成是贪心策略与广度优先算法的结合，在每一次节点扩散的时候，都需要进行权重(可以理解为距离)大小的比较，因此存在负权重，则可能在之后的计算中得到总权重更小的路径，从而影响之前的结果，用一个比较实际的例子就是绕的路更多，反而路线更短了，这显然是不符合实际的</p></blockquote></li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>假设有下面这个图，我们设置源节点<code> src=0</code>,为了求解src到其他节点(1~8)的最短距离，按照下面的步骤</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/dijkstra%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%20/image-20240822224933240.png" alt="image-20240822224933240">d</p><ol><li><p>这里我们需要维护两个数组<strong>isset</strong>和<strong>dist</strong>，其中<strong>isset数组</strong>用来表示对应节点是否已经拓展，初始化为<code>false </code> 。dist数组初始化为{0, INF, INF, INF, INF, INF, INF, INF},这个数组的下标用来表示节点，下标对应的内容表示src节点到其他节点的最短距离，这里选取的src&#x3D;0，由于节点到自身的距离始终为0,所以这里dist[0]&#x3D;0,其他初始化为<strong>INF(无穷大)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数初始化</span></span><br><span class="line">dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * <span class="built_in">len</span>(graph)</span><br><span class="line">isset = [<span class="literal">False</span>] * <span class="built_in">len</span>(graph)</span><br><span class="line">dist[src] = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>现在我们需要从dist数组中找到<strong>距离值最小</strong>且<strong>isset数组值为false</strong>的节点，由于是第一次扩展节点，所以距离值最小的一定是src节点。扩展后将src节点下标对应的<strong>isset数组</strong>的内容改为<code> true</code>,0 的相邻顶点是 1 和 7,更改距离值.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#寻找dist最小值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MinDistance</span>(<span class="params">dist, isset</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dist)):</span><br><span class="line">        <span class="keyword">if</span> isset[v] == <span class="literal">False</span> <span class="keyword">and</span> dist[v] &lt;= <span class="built_in">min</span>:</span><br><span class="line">            <span class="built_in">min</span> = dist[v]</span><br><span class="line">            min_index = v</span><br><span class="line">    <span class="keyword">return</span> min_index</span><br><span class="line"></span><br><span class="line"><span class="comment">#将拓展的节点标记为True</span></span><br><span class="line">min_index = MinDistance(dist, isset)</span><br><span class="line">isset[min_index] = <span class="literal">True</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>isset</th><th>true</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th></tr></thead><tbody><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>dist</td><td>0</td><td>4</td><td>INF</td><td>INF</td><td>INF</td><td>INF</td><td>INF</td><td>8</td><td>INF</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/dijkstra%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%20/image-20240822234941814.png" alt="image-20240822234941814"></p><ol start="2"><li>接着从<strong>dist数组中找出最小值</strong>且<strong>isset数组值为false</strong>的节点进行扩展，在第二步得到的结果中，dist最小值对应的是节点<code>1 </code>,因此对节点<code> 1</code>的相邻节点进行扩展,然后将节点<code> 2</code>的值更改为12，为什么是12而不是8？，参照上面完整的图，节点<code>0</code>到节点<code>1</code>的距离是4，节点<code>1</code>到节点<code>2</code>的的距离是8，所以这里的12指的是经过0-1-2的累加距离4+8&#x3D;12，后面每次扩展的时候，都要进行距离的累加</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整个算法最核心的部分就是这个if的判断语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isset[v] <span class="keyword">and</span> graph[min_index][v] &gt; <span class="number">0</span> <span class="keyword">and</span> dist[min_index] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">and</span> dist[min_index] + graph[min_index][v] &lt; dist[v]:</span><br><span class="line">                dist[v] = dist[min_index] + graph[min_index][v]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/dijkstra%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%20/image-20240826221537796.png" alt="image-20240826221537796"></p><p>经过上述的变化后，数组的值变更为以下的结果</p><table><thead><tr><th>isset</th><th>true</th><th>true</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th><th>false</th></tr></thead><tbody><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>dist</td><td>0</td><td>4</td><td>12</td><td>INF</td><td>INF</td><td>INF</td><td>INF</td><td>8</td><td>INF</td></tr></tbody></table><ol start="4"><li>重复以上的步骤，这里需要注意如果新扩展到的dist数组的值比旧的dist数组的值要大，那么就不更新dist数组</li><li>最终可以得到一个src节点到其他节点的最小生成树</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/dijkstra%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%20/image-20240826223507592.png" alt="image-20240826223507592"></p><h2 id="完整程序实现"><a href="#完整程序实现" class="headerlink" title="完整程序实现"></a>完整程序实现</h2><p>接下来将代码整合成一个完整版</p><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 这个函数用来求解dist中距离值最小且isset为false的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MinDistance</span>(<span class="params">dist, isset</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dist)):</span><br><span class="line">        <span class="keyword">if</span> isset[v] == <span class="literal">False</span> <span class="keyword">and</span> dist[v] &lt;= <span class="built_in">min</span>:</span><br><span class="line">            <span class="built_in">min</span> = dist[v]</span><br><span class="line">            min_index = v</span><br><span class="line">    <span class="keyword">return</span> min_index</span><br><span class="line"><span class="comment"># 算法的实现部分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dijkstra</span>(<span class="params">graph:<span class="built_in">list</span>|np.ndarray, src:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment">#初始化dist和isset的值</span></span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * <span class="built_in">len</span>(graph)</span><br><span class="line">    isset = [<span class="literal">False</span>] * <span class="built_in">len</span>(graph)</span><br><span class="line">    dist[src] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph) - <span class="number">1</span>):</span><br><span class="line">        min_index = MinDistance(dist, isset)</span><br><span class="line">        isset[min_index] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph)):</span><br><span class="line">            <span class="comment"># 算法核心部分，最重要的是判断dist[min_index] + graph[min_index][v] &lt; dist[v]</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isset[v] <span class="keyword">and</span> graph[min_index][v] &gt; <span class="number">0</span> <span class="keyword">and</span> dist[min_index] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">and</span> dist[min_index] + graph[min_index][v] &lt; dist[v]:</span><br><span class="line">                dist[v] = dist[min_index] + graph[min_index][v]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dist)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;节点&quot;</span>,i, <span class="string">&quot;:&quot;</span>,dist[i])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 用来测试的图，邻阶矩阵表示，如果不熟悉numpy，替换成python自带的list类型也行</span></span><br><span class="line">    graph = np.array([</span><br><span class="line">          [<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印dist数组&quot;</span>)</span><br><span class="line">    Dijkstra(graph, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">打印dist数组</span></span><br><span class="line"><span class="string">节点 0 : 4</span></span><br><span class="line"><span class="string">节点 1 : 0</span></span><br><span class="line"><span class="string">节点 2 : 8</span></span><br><span class="line"><span class="string">节点 3 : 15</span></span><br><span class="line"><span class="string">节点 4 : 22</span></span><br><span class="line"><span class="string">节点 5 : 12</span></span><br><span class="line"><span class="string">节点 6 : 12</span></span><br><span class="line"><span class="string">节点 7 : 11</span></span><br><span class="line"><span class="string">节点 8 : 10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MinDistance</span><span class="params">(std::vector&lt;<span class="type">double</span>&gt; &amp;dist, std::vector&lt;<span class="type">bool</span>&gt; &amp;isset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化最小值</span></span><br><span class="line">    <span class="type">double</span> min = std::numeric_limits&lt;<span class="type">double</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="type">int</span> min_index;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; dist.<span class="built_in">size</span>(); v++)</span><br><span class="line">        <span class="keyword">if</span> (isset[v] == <span class="literal">false</span> &amp;&amp; dist[v] &lt;= min)</span><br><span class="line">            min = dist[v], min_index = v;</span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">double</span>&gt;&gt; &amp;graph, <span class="type">int</span> src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">double</span>&gt; <span class="title">dist</span><span class="params">(graph.size(), std::numeric_limits&lt;<span class="type">double</span>&gt;::max())</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">isset</span><span class="params">(graph.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="comment">// src与自身的距离始终为0，不需要进行计算</span></span><br><span class="line">    dist[src] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; graph.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min_index = <span class="built_in">MinDistance</span>(dist, isset);</span><br><span class="line">        isset[min_index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> v = <span class="number">0</span>; v &lt; <span class="number">9</span>; v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isset[v] &amp;&amp; graph[min_index][v] &amp;&amp; dist[min_index] != std::numeric_limits&lt;<span class="type">double</span>&gt;::<span class="built_in">max</span>() &amp;&amp; dist[min_index] + graph[min_index][v] &lt; dist[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[min_index] + graph[min_index][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印距离数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dist.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; dist[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GraphTest</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//没用过vector的话，用普通的二维数组替换也行</span></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">double</span>&gt;&gt; graph = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">// 将给定的二维数组值赋给嵌套vector</span></span><br><span class="line">    <span class="built_in">Dijkstra</span>(graph, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GraphTest</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/">使用迪杰斯特拉算法从源点到所有顶点的最短路径查找 — Find Shortest Paths from Source to all Vertices using Dijkstra’s Algorithm (geeksforgeeks.org)</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra">埃兹格·W·迪杰斯特拉 - 维基百科 — Edsger W. Dijkstra - Wikipedia</a></p></li><li><p><a href="https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/">图文详解 Dijkstra 最短路径算法 (freecodecamp.org)</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows的cmd使用Linux类命令</title>
      <link href="/2024/08/13/Linux/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84cmd%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/"/>
      <url>/2024/08/13/Linux/%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84cmd%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在使用Vscode编写C&#x2F;C++代码的时候，经常会用到<strong>Shell</strong>(你可以理解为命令行)，但是我不得不说Windows下Dos命令极其难用且拉跨😩，于是！！🤓🤓我就在想能不能在Windows的命令提示符或者PowerShell下直接使用Linux的命令，然后我就在中文互联网上疯狂的搜索(💩里淘金)</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>在中文互联网上搜索问题，通常都会得到以下的结果</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240812235813091.png" alt="image-20240812235813091"></p><p>他们给出的结果，无非就是</p><ol><li><p>使用WSL或者是在虚拟机里面使用Linux</p><p>个人评价：可真是个小天才呢😅，这样我为啥不直接用Linux呢？还折腾那么多干嘛</p></li><li><p>使用Git Bash或者Cygwin</p><p>个人评价:太丑</p></li></ol><p>更让我觉得好笑的是，这些文章都是搬的外网的一个博主的文章<a href="https://itsfoss.com/run-linux-commands-in-windows/">4 Ways to Run Linux Commands in Windows (itsfoss.com)</a>，搜索引擎一排下去都是差不多的内容，这还是在我屏蔽了csdn相关结果的情况下(关于如何屏蔽csdn的搜索结果可以看我的另一篇文章)，可见要想在中文互联网找到解决自己需求的方法有多困难。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240813003550182.png" alt="image-20240813003550182"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>综上所述，经过我的一般探索，找到了一个可以在Windows运行Linux类命令的工具——<strong>uutils-coreutils</strong>,通过官网的简介可以得知</p><blockquote><p>uutils is an attempt at writing universal (as in cross-platform) CLI utilities in <a href="https://www.rust-lang.org/">Rust</a>. It is available for Linux, Windows, Mac and other platforms.</p></blockquote><p>翻译成人话就是，这玩意是一个用 <a href="https://www.rust-lang.org/">Rust</a> 编写通用（<strong>跨平台</strong>）CLI 实用工具的项目。它可用于 Linux、Windows、Mac 和其他平台。啊哈👍跨平台而且还是CLI实用工具的项目，这正是我想要的！</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240813003942634.png" alt="image-20240813003942634"></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>讲再多，不如直接看看效果，这个工具包含了很多Linux下的常用且基本的命令</p><p>最常用的ls命令，其中一些常用的参数也是可以使用的，比如-a,-l</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240813004739055.png" alt="image-20240813004739055"></p><p>删除文件的rm命令，这个是通过VSCode的集成终端调用的，这样在vscode里面就能直接使用Linux命令了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240813004927238.png" alt="image-20240813004927238"></p><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>安装这个软件有两种方法</p><ol><li><p>通过包管理下载</p><p>Windows下常见的包管理器有Scoop(博主用的是这个)或者Winget,其他的系统你可以看看官方文档<a href="https://uutils.github.io/coreutils/docs/installation.html">Installation - uutils Documentation</a>，都有对应的命令，复制粘贴到对应系统的命令行就行了</p><blockquote><p>如果你不知道啥是包管理器的话，简单来说就是类似于手机的应用商店一样，能帮你一键安装软件，包括安装依赖以及添加环境变量等等。</p><p>Scoop的安装可以参照<a href="https://github.com/ScoopInstaller/Scoop#installation">官方文档</a>，这里不做赘述</p></blockquote></li><li><p>下载Github release打包好的程序</p></li></ol><p><a href="https://github.com/uutils/coreutils/releases/tag/0.0.27">Release 0.0.27 · uutils&#x2F;coreutils (github.com)</a></p><p>在Assets这里选择适合你系统的进行下载即可</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Win%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%20/image-20240813010032620.png" alt="image-20240813010032620"></p><p>Windows系统的话，安装完后可能得手动添加软件根目录的路径到系统的环境变量中，不然的话在命令行中可能会找不到相应的命令</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽csdn搜索结果的方法</title>
      <link href="/2024/08/08/%E5%B1%8F%E8%94%BD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%9C%E7%B4%A2%E5%87%BAcsdn%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/08/08/%E5%B1%8F%E8%94%BD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%9C%E7%B4%A2%E5%87%BAcsdn%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鉴于你对知识质量的渴望，以及对挖掘知识金子的欲求，你一定想在浏览器结果中去除有关Csdn的全部内容😈**(确信)**，但是当你在用bing或者google搜索有没有可以屏蔽CSDN搜索结果的方法时，通常会有以下的结果，这些方法我基本上都尝试过，而且没啥用处，因此下面我分享一个确实有用的方法给大家。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%B1%8F%E8%94%BDcsdn%20/image-20240808214659656.png" alt="image-20240808214659656"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>老规矩，我喜欢在看一系列繁琐的步骤前先看看效果，这样我才有继续看下去的欲望，相信大多数人都是这样想的😝</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%B1%8F%E8%94%BDcsdn%20/image-20240808215045912.png" alt="image-20240808215045912"></p><p>假设你非是不信邪，尝试通过在地址栏直接通过csdn的官网进行访问，会得到下面的结果</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%B1%8F%E8%94%BDcsdn%20/image-20240808215248191.png" alt="image-20240808215248191"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>至少拥有一个脚本管理器，比如<a href="https://microsoftedge.microsoft.com/addons/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/iikmkjmpaadaobahmlepeloendndfphd">tampermonkey</a>,安装后可以在浏览器的扩展选项卡中查看是否安装成功</li></ol><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%B1%8F%E8%94%BDcsdn%20/image-20240808215820344.png" alt="image-20240808215820344" style="zoom:50%;" /><ol start="2"><li>下载屏蔽脚本<a href="https://greasyfork.org/zh-CN/scripts/441726-csdn">Fuck CSDN (greasyfork.org)</a></li><li>打开tampermonkey,如何有相应的图标说明就安装成功了<br>   <img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%B1%8F%E8%94%BDcsdn%20/image-20240808220357016.png" alt="image-20240808220357016"></li><li>尝试在搜索栏搜索相关内容，就能发现脚本将所有csdn相关的内容都隐去了</li></ol><blockquote><p>  注：这个脚本只支持 Google &#x2F; Baidu &#x2F; Bing &#x2F; 360 搜索，对于一些不常用的搜索引擎是没用的</p></blockquote><h2 id="脚本原理分析-可以不看"><a href="#脚本原理分析-可以不看" class="headerlink" title="脚本原理分析(可以不看)"></a>脚本原理分析(可以不看)</h2><p>这个部分，我来分析一下这个脚本实现的原理，虽然说是不必要的，但是学习一下原作者的代码思维还是有用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测当前页面是否属于特定的域名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSite</span>(<span class="params">domain</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^https?:\/\/[\\w.]+?&quot;</span> + domain))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏CSDN内容的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HideCSDN</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一组CSS选择器，用于匹配可能包含CSDN链接的元素</span></span><br><span class="line">    <span class="keyword">const</span> filters = <span class="string">&quot;.source_1Vdff, .iUh30, .b_attribution, .g-linkinfo-a&quot;</span>.<span class="title function_">split</span>(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="comment">// 选择所有可能的搜索结果元素</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Elements</span>=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.result.c-container, .g, .b_algo, .res-list&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> num; <span class="comment">// 用于记录移除的CSDN链接数量</span></span><br><span class="line">    <span class="comment">// 遍历所有搜索结果元素</span></span><br><span class="line">    <span class="title class_">Elements</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">Item,i</span>)&#123;</span><br><span class="line">        <span class="comment">// 遍历CSS选择器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> filter <span class="keyword">in</span> filters) &#123;</span><br><span class="line">            <span class="comment">// 查找匹配选择器的子元素</span></span><br><span class="line">            <span class="keyword">let</span> selectedContent=<span class="title class_">Item</span>.<span class="title function_">querySelector</span>(filters[filter])</span><br><span class="line">            <span class="comment">// 如果找到包含&quot;CSDN&quot;文本的元素，则移除整个搜索结果项</span></span><br><span class="line">            <span class="keyword">if</span> (selectedContent !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (selectedContent.<span class="property">innerText</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;csdn&quot;</span>)) &#123;</span><br><span class="line">                    <span class="title class_">Item</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="title class_">Item</span>);</span><br><span class="line">                    num = i; <span class="comment">// 记录移除的元素索引</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 如果有移除的链接，则在控制台输出移除信息</span></span><br><span class="line">    <span class="keyword">if</span> (num !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[Fuck CSDN] 已去除 <span class="subst">$&#123;num&#125;</span> 条 CSDN 内容`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件监听器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 为翻页按钮等元素添加事件监听器</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.page-item_M4MDr, #form, #page, .ac_wrap&quot;</span>).<span class="title function_">forEach</span>(</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">Item</span>) &#123;</span><br><span class="line">            <span class="comment">// 当用户与这些元素交互时，延迟执行HideCSDN函数</span></span><br><span class="line">            <span class="title class_">Item</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title class_">HideCSDN</span>();</span><br><span class="line">                    <span class="comment">// 对于360搜索，重新绑定事件监听器</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_">isSite</span>(<span class="string">&#x27;so.com&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="title function_">bind</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为搜索框添加回车键事件监听器</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;input.gLFyf.gsfi, input#kw, input#keyword&quot;</span>).<span class="title function_">forEach</span>(</span><br><span class="line"><span class="keyword">function</span>(<span class="params">Item</span>) &#123;</span><br><span class="line">    <span class="comment">// 当用户按下回车键进行搜索时，延迟执行HideCSDN函数</span></span><br><span class="line">    <span class="title class_">Item</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> evt = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (evt.<span class="property">keyCode</span> == <span class="string">&quot;13&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title class_">HideCSDN</span>();&#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户直接访问CSDN，则阻止访问并后退</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isSite</span>(<span class="string">&#x27;csdn.net&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;Blocked by Fuck CSDN.&quot;</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始执行隐藏CSDN内容的函数</span></span><br><span class="line"><span class="title class_">HideCSDN</span>();</span><br><span class="line"><span class="comment">// 绑定事件监听器</span></span><br><span class="line"><span class="title function_">bind</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash常用快捷键</title>
      <link href="/2024/08/07/Linux/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2024/08/07/Linux/bash%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux的shell使用中有很多快捷键，可以帮你免去使用鼠标，这样会更高效，但是快捷键有很多，全部记住是不可能的，因此我会把比较常用的快捷键用<strong>加粗的字体</strong>区分开来</p><h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><ul><li>Ctrl + a ：移到命令行首</li><li>Ctrl + e ：移到命令行尾</li><li>Ctrl + f ：按字符前移（右向）</li><li>Ctrl + b ：按字符后移（左向）</li><li><strong>Alt + f ：按单词前移（右向）</strong></li><li><strong>Alt + b ：按单词后移（左向）</strong></li><li>Ctrl + xx：在命令行首和光标之间移动</li><li>Ctrl + u ：从光标处删除至命令行首</li><li><strong>Ctrl + k ：从光标处删除至命令行尾</strong></li><li><strong>Ctrl + w ：从光标处删除至字首</strong></li><li>Alt + d ：从光标处删除至字尾</li><li>Ctrl + d ：删除光标处的字符</li><li>Ctrl + h ：删除光标前的字符</li><li>Ctrl + y ：粘贴至光标后</li><li>Alt + c ：从光标处更改为首字母大写的单词</li><li>Alt + u ：从光标处更改为全部大写的单词</li><li>Alt + l ：从光标处更改为全部小写的单词</li><li>Ctrl + t ：交换光标处和之前的字符</li><li>Alt + t ：交换光标处和之前的单词</li><li>Alt + Backspace：与 Ctrl + w 类似，分隔符有些差别</li></ul><h3 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h3><ul><li>Ctrl + r：逆向搜索命令历史</li><li>Ctrl + g：从历史搜索模式退出</li><li><strong>Ctrl + p：历史中的上一条命令</strong></li><li><strong>Ctrl + n：历史中的下一条命令</strong></li><li>Alt + .：使用上一条命令的最后一个参数</li></ul><h3 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h3><ul><li><strong>Ctrl + l：清屏</strong></li><li>Ctrl + o：执行当前命令，并选择上一条命令</li><li>Ctrl + s：阻止屏幕输出</li><li>Ctrl + q：允许屏幕输出</li><li><strong>Ctrl + c：终止命令</strong></li><li><strong>Ctrl + z：挂起命令</strong></li></ul><ul><li><p>Bang (!) 命令</p><ul><li>!!：执行上一条命令</li><li>!blah：执行最近的以 blah 开头的命令，如 !ls</li><li>!blah:p：仅打印输出，而不执行</li><li>!$：上一条命令的最后一个参数，与 Alt + . 相同</li><li>!$:p：打印输出 !$ 的内容</li><li>!*：上一条命令的所有参数</li><li>!<em>:p：打印输出 !</em> 的内容</li><li>^blah：删除上一条命令中的 blah</li><li>^blah^foo：将上一条命令中的 blah 替换为 foo</li><li>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql+php+html实现学生管理系统</title>
      <link href="/2024/07/30/mysql+php+html%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/30/mysql+php+html%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文使用Mysql+php+html实现一个简单的学生管理系统，实现了<strong>登陆，注册，总览学生信息，添加学生，查询特定的学生，删除指定的学生等功能</strong>。并且本文仅用来学习，因为在实际开发中都会使用框架比如前端的vue.js，后端用的springboot，使用这些框架能大幅提高开发效率，避免重复造轮子，所以你没必要非得用基础技术去造航空母舰。🙂</p><h3 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h3><ul><li>Phpstudy&#x2F;PhpEnv：我个人比较推荐<a href="https://www.phpenv.cn/">phpEnv-专业优雅强大的php集成环境</a>，毕竟Phpstudy太老了，PhpEnv界面操作简单，集成度高，免去配置Mysql数据库，Apache服务器的繁琐操作，直接就能使用。</li><li>Visual studio code：写代码的编辑器，你用自己喜欢的也行。</li><li>DataGrip:数据库的GUI管理工具，可以用图形化界面编写sql语句。</li></ul><h3 id="依赖项版本要求"><a href="#依赖项版本要求" class="headerlink" title="依赖项版本要求"></a>依赖项版本要求</h3><p>想要复刻我的代码，使用的软件版本尽量跟我开发的时候写的保持一致，不同的版本会导致<strong>兼容性的问题导致报错</strong></p><ul><li>Mysql:<strong>5.5.53</strong></li><li>php:5.<strong>5.38</strong></li><li>apache:不限</li></ul><blockquote><p>文章编写都是采用GBK编码，这个要注意</p></blockquote><h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p>功能简要来说就是实现了最基本的增删改查</p><h3 id="主页面"><a href="#主页面" class="headerlink" title="主页面"></a>主页面</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164322529.png" alt="image-20240730164322529"></p><h3 id="查看所有的学生"><a href="#查看所有的学生" class="headerlink" title="查看所有的学生"></a>查看所有的学生</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164517047.png" alt="image-20240730164517047"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164525993.png" alt="image-20240730164525993"></p><h3 id="添加学生"><a href="#添加学生" class="headerlink" title="添加学生"></a>添加学生</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164539170.png" alt="image-20240730164539170"></p><h3 id="查找指定的学生"><a href="#查找指定的学生" class="headerlink" title="查找指定的学生"></a>查找指定的学生</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164549702.png" alt="image-20240730164549702"></p><h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730164601973.png" alt="image-20240730164601973"></p><h2 id="代码逻辑设计"><a href="#代码逻辑设计" class="headerlink" title="代码逻辑设计"></a>代码逻辑设计</h2><p>代码主要分16个代码文件,前端页面采用html格式，后端服务器用php语言实现</p><p>&#x2F;<br>├── html<br>│   ├── add.html<br>│   ├── index.html<br>│   ├── register.html<br>│   ├── search.html<br>│   └── login.html<br>└── php<br>    ├── add.php<br>    ├── delete.php<br>    ├── login.php<br>    ├── modify.php<br>    ├── modify2.php<br>    ├── overview.php<br>    ├── register.php<br>    └── search.php</p><h3 id="数据库的相关实现"><a href="#数据库的相关实现" class="headerlink" title="数据库的相关实现"></a>数据库的相关实现</h3><p>本学生管理系统一共使用到了两张表</p><p>xs表</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730165819565.png" alt="image-20240730165819565"></p><p>数据可以参照xs.sql，快速构建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `xs`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xs` (</span><br><span class="line">  `学号` <span class="type">char</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `姓名` <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `专业名` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `性别` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `出生日期` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `总学分` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `照片` <span class="type">blob</span>,</span><br><span class="line">  `备注` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`学号`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `xs`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">LOCK TABLES `xs` WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `xs` <span class="keyword">VALUES</span> (<span class="string">&#x27;081101&#x27;</span>,<span class="string">&#x27;王休&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1994-02-10&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081102&#x27;</span>,<span class="string">&#x27;程明&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1995-02-01&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081103&#x27;</span>,<span class="string">&#x27;王燕&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1993-10-06&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081104&#x27;</span>,<span class="string">&#x27;韦严平&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1994-08-26&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081106&#x27;</span>,<span class="string">&#x27;李方方&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1994-11-20&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081107&#x27;</span>,<span class="string">&#x27;李明&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1994-05-01&#x27;</span>,<span class="number">54</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;提前修完\&quot;数据结构\&quot;,并获得学分&#x27;</span>),(<span class="string">&#x27;081108&#x27;</span>,<span class="string">&#x27;林一帆&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-08-05&#x27;</span>,<span class="number">52</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;已提前修完一门课&#x27;</span>),(<span class="string">&#x27;081109&#x27;</span>,<span class="string">&#x27;张强民&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-08-11&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081110&#x27;</span>,<span class="string">&#x27;张蔚&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1995-07-22&#x27;</span>,<span class="number">50</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;三好生&#x27;</span>),(<span class="string">&#x27;081111&#x27;</span>,<span class="string">&#x27;赵琳&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1994-03-18&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081113&#x27;</span>,<span class="string">&#x27;严红&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1993-08-11&#x27;</span>,<span class="number">48</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;有一门课不及格，待补考&#x27;</span>),(<span class="string">&#x27;081201&#x27;</span>,<span class="string">&#x27;王敏&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-06-10&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081202&#x27;</span>,<span class="string">&#x27;王林&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-01-29&#x27;</span>,<span class="number">40</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;有一门课不及格，待补考&#x27;</span>),(<span class="string">&#x27;081204&#x27;</span>,<span class="string">&#x27;马琳琳&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1993-02-10&#x27;</span>,<span class="number">40</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081206&#x27;</span>,<span class="string">&#x27;李计&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-09-20&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081210&#x27;</span>,<span class="string">&#x27;李红庆&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-05-01&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;已提前修完一门课，并获得学分&#x27;</span>),(<span class="string">&#x27;081216&#x27;</span>,<span class="string">&#x27;孙祥欣&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1993-03-09&#x27;</span>,<span class="number">44</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081218&#x27;</span>,<span class="string">&#x27;孙研&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1994-10-09&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081220&#x27;</span>,<span class="string">&#x27;吴薇华&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1994-03-18&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081221&#x27;</span>,<span class="string">&#x27;刘燕敏&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1993-11-12&#x27;</span>,<span class="number">42</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="string">&#x27;081241&#x27;</span>,<span class="string">&#x27;罗林琳&#x27;</span>,<span class="string">&#x27;通信工程&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1994-01-30&#x27;</span>,<span class="number">50</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;转专业学习&#x27;</span>);</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>user表</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/Mysql%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20240730165756961.png" alt="image-20240730165756961"></p><p>数据可以参照user.sql，快速构建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `Host` <span class="type">char</span>(<span class="number">60</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="keyword">User</span>` <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Password` <span class="type">char</span>(<span class="number">41</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Select_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Insert_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Update_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Delete_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Drop_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Reload_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Shutdown_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Process_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `File_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Grant_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `References_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Index_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Alter_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Show_db_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Super_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_tmp_table_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Lock_tables_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Execute_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Repl_slave_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Repl_client_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_view_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Show_view_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_routine_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Alter_routine_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_user_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Event_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Trigger_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_tablespace_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `ssl_type` enum(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;ANY&#x27;</span>,<span class="string">&#x27;X509&#x27;</span>,<span class="string">&#x27;SPECIFIED&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `ssl_cipher` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `x509_issuer` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `x509_subject` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `max_questions` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_updates` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_connections` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_user_connections` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `plugin` <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `authentication_string` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Host`,`<span class="keyword">User</span>`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;Users and global privileges&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="登陆功能实现"><a href="#登陆功能实现" class="headerlink" title="登陆功能实现"></a>登陆功能实现</h3><p>Login.html,login.php实验登陆的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;--&gt;login.html&lt;/--&gt;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;GBK&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置背景图片和样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./¾ýÃû.png</span>); <span class="comment">/* 这部分文件名可能有乱码 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 登录框样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Login</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">3</span>, <span class="number">60</span>, <span class="number">245</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 表单样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 标题样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 输入框样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> <span class="number">#a77a27</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 按钮样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.anniu</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">98px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#0849ebf5</span>, <span class="number">#e6134f</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 标签样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页面标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>µÇÂ½<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 这里的标题可能需要调整为正确的字符编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./login.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用户名输入框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                username<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usename&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;ÇëÊäÈëÓÃ»§Ãû&quot;</span>&gt;</span> <span class="comment">&lt;!-- 占位符文本需要调整为正确的字符编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 密码输入框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                password<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;ÇëÊäÈëÃÜÂë&quot;</span>&gt;</span> <span class="comment">&lt;!-- 占位符文本需要调整为正确的字符编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;µÇÂ½&quot;</span> <span class="attr">class</span>=<span class="string">&quot;anniu&quot;</span>&gt;</span> <span class="comment">&lt;!-- 按钮文本需要调整为正确的字符编码 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册按钮 (暂时注释掉的代码) --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;button type=&quot;button&quot; id=&quot;btn&quot; value=&quot;×¢²á&quot; class=&quot;anniu&quot;&gt;×¢²á&lt;/button&gt; --&gt;</span> <span class="comment">&lt;!-- 按钮文本需要调整为正确的字符编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定注册按钮的点击事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            a.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;register.html&quot;</span>; <span class="comment">// 跳转到注册页面</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取用户输入的用户名和密码</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到 MySQL 数据库</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line"><span class="comment">// 设置数据库连接的字符集为 GBK</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 数据中获取用户名和密码</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据库中的用户信息</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from mysql.user where User=&#x27;<span class="subst">$username</span>&#x27; and Password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$ret</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查查询结果的行数，判断用户是否存在且密码正确</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$ret</span>-&gt;num_rows == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户存在且密码正确，显示成功消息并跳转到主页</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;恭喜您，登陆成功\&quot;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./index.html&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 用户名或密码错误，显示错误消息并跳转回登录页面</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;账号或者密码错误，请重新输入\&quot;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./login.html&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><p>在add.html,add.php实现添加学生的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- add.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义页面的字符集为GBK，并指定文档的语言为英语 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=GBK&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义表单样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义表单内标签的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义提交按钮的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义重置按钮的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义提交和重置按钮的公共样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义单选按钮容器的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.radio-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义单选按钮标签的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.radio-container</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义页面背景图片和样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./君名.png</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义通用标签的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义返回按钮的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.return</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#0849ebf5</span>, <span class="number">#e6134f</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义按钮容器的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义容器内链接的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#0849ebf5</span>, <span class="number">#e6134f</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 页面标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;color: red&quot;</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表单开始，提交到add.php文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./add.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 学号输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;student_id&quot;</span>&gt;</span>学号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 姓名输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 专业名输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;major&quot;</span>&gt;</span>专业名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;major_in&quot;</span> <span class="attr">id</span>=<span class="string">&quot;major&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 性别选择框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 出生日期输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;date&quot;</span>&gt;</span>出生日期<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 总学分输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;credit&quot;</span>&gt;</span>总学分 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;credit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;credits&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 备注输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;note&quot;</span>&gt;</span>备注 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;note&quot;</span> <span class="attr">name</span>=<span class="string">&quot;notes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 提交和重置按钮容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 返回按钮容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./index.html&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建与 MySQL 数据库的连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="comment">// 设置数据库连接的字符集为 GBK</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;添加学生&lt;/title&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=GBK&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 定义页面背景样式 */</span></span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(./君名.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 获取表单提交的数据</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;s_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$major</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;major_in&#x27;</span>];</span><br><span class="line">    <span class="variable">$gender</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;gender&#x27;</span>];</span><br><span class="line">    <span class="variable">$birthday</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;date&#x27;</span>];</span><br><span class="line">    <span class="variable">$sum_credit</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;credits&#x27;</span>];</span><br><span class="line">    <span class="variable">$note</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;notes&#x27;</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 检查学号是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$id</span>)) &#123;</span><br><span class="line">        <span class="comment">// 如果学号为空，显示警告并返回表单页面</span></span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;alert(&#x27;学号不能为空！&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;add.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>(); <span class="comment">// 关闭数据库连接</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 插入数据到数据库</span></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into xs(学号, 姓名, 专业名,性别, 出生日期, 总学分,备注)</span></span><br><span class="line"><span class="string">        values (&#x27;<span class="subst">$id</span>&#x27;,&#x27;<span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$major</span>&#x27;,&#x27;<span class="subst">$gender</span>&#x27;,&#x27;<span class="subst">$birthday</span>&#x27;,&#x27;<span class="subst">$sum_credit</span>&#x27;,&#x27;<span class="subst">$note</span>&#x27;)&quot;</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 执行插入操作并判断结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 插入成功，显示提示并跳转回首页</span></span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;alert(&#x27;yes! add successfully!&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 插入失败，显示提示并跳转回首页</span></span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;alert(&#x27;oops add failed!&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>(); <span class="comment">// 关闭数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除功能实现"><a href="#删除功能实现" class="headerlink" title="删除功能实现"></a>删除功能实现</h3><p>delete.php实现删除的功能</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//delete.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建与 MySQL 数据库的连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="comment">// 设置数据库连接的字符集为 GBK</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 URL 中的 ID 参数，表示要删除的学生编号</span></span><br><span class="line"><span class="variable">$number</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ID&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造删除 SQL 语句</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from xs where 学号=<span class="subst">$number</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行删除操作并判断结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果删除成功，显示成功提示并跳转到概览页面</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;delete successfully!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./overview.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果删除失败，显示失败提示并跳转到概览页面</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;delete failed!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./overview.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主页展示功能"><a href="#主页展示功能" class="headerlink" title="主页展示功能"></a>主页展示功能</h3><p>参照index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;GBK&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主界面功能<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置背景图片和样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./君名.png</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 居中显示链接 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center-links</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 链接按钮样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center-links</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#0849ebf5</span>, <span class="number">#e6134f</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 作者信息样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.author</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;color: white;&quot;</span>&gt;</span>学生管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 链接按钮容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center-links&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 查看所有学生的链接 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./overview.php&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>查看所有学生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加新学生的链接 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./add.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>添加新的学生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 查询指定学生的链接 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./search.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>查询指定的学生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 返回登录界面的链接 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./login.html&quot;</span>&gt;</span>返回登陆界面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改功能实现"><a href="#修改功能实现" class="headerlink" title="修改功能实现"></a>修改功能实现</h3><p>Modify.php,modify2.php来用实现修改学生的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Modify.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 连接到 MySQL 数据库</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="comment">// 设置数据库连接的字符集为 GBK</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改学生的相关信息&lt;/title&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=GBK&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 设置背景图片和样式 */</span></span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(./君名.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 表单样式 */</span></span><br><span class="line">        form &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            color: white;</span><br><span class="line">            line-height: <span class="number">25</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form label &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 提交和重置按钮样式 */</span></span><br><span class="line">        form input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: white;</span><br><span class="line">            margin-top: <span class="number">10</span>px;</span><br><span class="line">            margin-right: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form input[type=<span class="string">&quot;reset&quot;</span>] &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            color: white;</span><br><span class="line">            margin-top: <span class="number">10</span>px;</span><br><span class="line">            margin-left: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form input[type=<span class="string">&quot;submit&quot;</span>],</span><br><span class="line">        form input[type=<span class="string">&quot;reset&quot;</span>] &#123;</span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 单选按钮容器样式 */</span></span><br><span class="line">        .radio-container &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .radio-container label &#123;</span><br><span class="line">            margin-right: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 标签样式 */</span></span><br><span class="line">        label &#123;</span><br><span class="line">            font-size: <span class="number">20</span>px;</span><br><span class="line">            height: <span class="number">30</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 按钮容器样式 */</span></span><br><span class="line">        .button-container &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">            margin-top: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .button-container a &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border: <span class="number">2</span>px solid black;</span><br><span class="line">            border-radius: <span class="number">10</span>px;</span><br><span class="line">            padding: <span class="number">5</span>px <span class="number">10</span>px;</span><br><span class="line">            margin: <span class="number">5</span>px;</span><br><span class="line">            background-image: linear-<span class="title function_ invoke__">gradient</span>(to right, #<span class="number">0849</span>ebf5, #e6134f);</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font-size: <span class="number">18</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 获取URL中的ID参数</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ID&#x27;</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 生成修改学生信息的表单，包含隐藏的ID字段</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;./modify2.php&#x27; method=&#x27;post&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&#x27;hidden&#x27; name=&#x27;ID&#x27; value=&#x27;&quot;</span> . <span class="variable">$id</span> . <span class="string">&quot;&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&#x27;name&#x27;&gt; 姓名&lt;input type=&#x27;text&#x27; name=&#x27;s_name&#x27; id=&#x27;name&#x27;&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&#x27;major&#x27;&gt;专业名&lt;input type=&#x27;text&#x27; name=&#x27;major_in&#x27; id=&#x27;major&#x27;&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&#x27;radio-container&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;label&gt;&lt;input type=&#x27;radio&#x27; value=&#x27;1&#x27; name=&#x27;gender&#x27; required&gt;男&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;label&gt;&lt;input type=&#x27;radio&#x27; value=&#x27;0&#x27; name=&#x27;gender&#x27; required&gt;女&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&#x27;date&#x27;&gt;出生日期&lt;input type=&#x27;date&#x27; id=&#x27;date&#x27; name=&#x27;date&#x27;&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&#x27;credit&#x27;&gt;总学分&lt;input type=&#x27;text&#x27; id=&#x27;credit&#x27; name=&#x27;credits&#x27;&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&#x27;note&#x27;&gt;备注&lt;input type=&#x27;text&#x27; id=&#x27;note&#x27; name=&#x27;notes&#x27;&gt;&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&#x27;button-container&#x27;&gt;</span></span><br><span class="line"><span class="string">             &lt;input type=&#x27;submit&#x27; value=&#x27;提交&#x27;&gt;</span></span><br><span class="line"><span class="string">             &lt;input type=&#x27;reset&#x27; value=&#x27;重置&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;&quot;</span>;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;!-- 返回按钮，链接到概览页面 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">button</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">overview</span>.<span class="title">php</span>&quot;&gt;返回&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//modify2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=GBK&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;学生信息修改&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ID&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;s_name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 姓名=&#x27;<span class="subst">$name</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$major</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;major_in&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$major</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 专业名=&#x27;<span class="subst">$major</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$gender</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;gender&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$gender</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 性别=&#x27;<span class="subst">$gender</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$birthday</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;date&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$birthday</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 出生日期=&#x27;<span class="subst">$birthday</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$sum_credit</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;credits&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$sum_credit</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 总学分=&#x27;<span class="subst">$sum_credit</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$note</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;notes&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$note</span>)) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update xs set 备注=&#x27;<span class="subst">$note</span>&#x27; where 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;alert(&#x27;修改成功！&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./overview.php&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找功能实现"><a href="#查找功能实现" class="headerlink" title="查找功能实现"></a>查找功能实现</h3><p>Search.html,search.php实现查找指定学生的功能在search.php中模糊搜索的底层逻辑是通过学生的姓名用like关键字进行查询，</p><p>而精确搜索是通过学生的学号进行查询，一般只会有一条数据，因为我限制了学号是唯一的。代码这里不做展示，因为太长了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">Search.html</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;GBK&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>查找指定的学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./君名.png</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[value=<span class="string">&quot;精确查询&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[value=<span class="string">&quot;模糊搜索&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#0849ebf5</span>, <span class="number">#e6134f</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请输入您想查询的学生的学号或者是姓名<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./search.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;精确查询&quot;</span> <span class="attr">name</span>=<span class="string">&quot;exact&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;模糊搜索&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fuzzy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;color: red;&quot;</span>&gt;</span>!!!注意:模糊搜索只能通过输入学生的姓名进行搜索，精确搜索只能通过输入学生的学号进行搜索<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./index.html&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//search.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;GBK&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;查询学生&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            align-items: center;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(./君名.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table &#123;</span><br><span class="line">            margin-top: <span class="number">20</span>px;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            width: <span class="number">80</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th,</span><br><span class="line">        td &#123;</span><br><span class="line">            padding: <span class="number">8</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tr:nth-<span class="title function_ invoke__">child</span>(even) &#123;</span><br><span class="line">            background-color: <span class="comment">#f2f2f2;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a.button &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            padding: <span class="number">8</span>px <span class="number">16</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: white;</span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            margin-right: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a.button.blue &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .<span class="keyword">return</span> &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border: <span class="number">2</span>px solid black;</span><br><span class="line">            border-radius: <span class="number">20</span>px;</span><br><span class="line">            padding: <span class="number">5</span>px;</span><br><span class="line">            margin: <span class="number">5</span>px;</span><br><span class="line">            background-image: linear-<span class="title function_ invoke__">gradient</span>(to right, #<span class="number">0849</span>ebf5, #e6134f);</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font-size: <span class="number">32</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;exact&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM xs WHERE 学号=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;一共查询到 &quot;</span> . <span class="variable">$result</span>-&gt;num_rows . <span class="string">&quot; 条数据&lt;/h1&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;学号&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;姓名&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;专业名&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;性别&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;出生日期&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;总学分&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;备注&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;功能&lt;/th&gt;</span></span><br><span class="line"><span class="string">                &lt;/tr&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;姓名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;专业名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;性别&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;出生日期&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;总学分&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;备注&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;</span></span><br><span class="line"><span class="string">                        &lt;a class=&#x27;button&#x27; href=&#x27;delete.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                        &lt;a class=&#x27;button blue&#x27; href=&#x27;modify.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td colspan=&#x27;8&#x27;&gt;查无此人&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fuzzy&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM xs WHERE 姓名 LIKE &#x27;%<span class="subst">$id</span>%&#x27;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;一共查询到 &quot;</span> . <span class="variable">$result</span>-&gt;num_rows . <span class="string">&quot; 条数据&lt;/h1&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;学号&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;姓名&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;专业名&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;性别&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;出生日期&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;总学分&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;备注&lt;/th&gt;</span></span><br><span class="line"><span class="string">                    &lt;th&gt;功能&lt;/th&gt;</span></span><br><span class="line"><span class="string">                &lt;/tr&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;姓名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;专业名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;性别&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;出生日期&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;总学分&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;备注&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;</span></span><br><span class="line"><span class="string">                        &lt;a class=&#x27;button&#x27; href=&#x27;delete.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                        &lt;a class=&#x27;button blue&#x27; href=&#x27;modify.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27;&gt;修改&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;/td&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td colspan=&#x27;8&#x27;&gt;查无此人&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td colspan=&#x27;8&#x27;&gt;数据为空, 因为您并未输入有效的信息！&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;./index.html&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">return</span>&quot;&gt;返回主界面&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h3 id="展示所有学生信息"><a href="#展示所有学生信息" class="headerlink" title="展示所有学生信息"></a>展示所有学生信息</h3><p>Overview.php用来展示所有学生的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Overview.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xscj&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line"><span class="comment">// $conn-&gt;query(&quot;SET NAMES gbk&quot;);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学生管理系统&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;GBK&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            align-items: center;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(./君名.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table &#123;</span><br><span class="line">            margin-top: <span class="number">20</span>px;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            width: <span class="number">80</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th,</span><br><span class="line">        td &#123;</span><br><span class="line">            padding: <span class="number">8</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tr:nth-<span class="title function_ invoke__">child</span>(even) &#123;</span><br><span class="line">            background-color: <span class="comment">#f2f2f2;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a.button &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            padding: <span class="number">8</span>px <span class="number">16</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: white;</span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            margin-right: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a.button.blue &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .<span class="keyword">return</span> &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border: <span class="number">2</span>px solid black;</span><br><span class="line">            border-radius: <span class="number">20</span>px;</span><br><span class="line">            padding: <span class="number">5</span>px;</span><br><span class="line">            margin: <span class="number">5</span>px;</span><br><span class="line">            background-image: linear-<span class="title function_ invoke__">gradient</span>(to right, #<span class="number">0849</span>ebf5, #e6134f);</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            font-size: <span class="number">32</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;学生信息展示&lt;/h1&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;专业名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;出生日期&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;总学分&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;备注&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;功能&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from xs&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;姓名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;专业名&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;性别&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;出生日期&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;总学分&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">&#123;$row[&#x27;备注&#x27;]&#125;</span>&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&lt;a href=&#x27;delete.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27; class=&#x27;button&#x27;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;a href=&#x27;modify.php?ID=<span class="subst">&#123;$row[&#x27;学号&#x27;]&#125;</span>&#x27; class=&#x27;button blue&#x27;&gt;修改&lt;/a&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td colspan=&#x27;8&#x27;&gt;没有输出结果&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;./index.html&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">return</span>&quot;&gt;返回主界面&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有任何问题，可以发邮件给我🤔</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.神经网络</title>
      <link href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章主要介绍人工神经网络的基本概念，以及几种重要模型，包括“单层感知机、两层感知机、多层感知机”等。</p><p>在此基础上，介绍两种重要的基础神经网络“Hopfield神经网络、BP神经网络”。</p><p>最后，着重介绍了深度学习中最常用的“卷积神经网络”。</p><h2 id="人脑结构"><a href="#人脑结构" class="headerlink" title="人脑结构"></a>人脑结构</h2><p>人脑由一千多亿（1011亿－1014 亿）个神经细胞（神经元）交织在一起的网状结构组成，其中大脑皮层约140亿个神经元，小脑皮层约1000亿个神经元。</p><h3 id="人脑构造"><a href="#人脑构造" class="headerlink" title="人脑构造"></a>人脑构造</h3><ul><li>大脑-皮层（cortex）</li><li>中脑（midbrain）</li><li>脑干（brainstem）</li><li>小脑（cerebellum）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150106149.png" alt="image-20240718150106149"></p><h2 id="人脑神经元结构"><a href="#人脑神经元结构" class="headerlink" title="人脑神经元结构"></a>人脑神经元结构</h2><p>人脑的神经元：约有1000种类型，每个神经元大约与103－104个其他神经元相连接，形成极为错综复杂而又灵活多变的神经网络。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150133616.png" alt="image-20240718150133616"></p><p>工作状态：</p><p>兴奋状态：细胞膜电位 &gt; 动作电位的阈值 → 神经冲动</p><p>抑制状态：细胞膜电位 &lt; 动作电位的阈值</p><p>学习与遗忘：由于神经元结构的可塑性，突触的传递作用可增强和减弱 。</p><h2 id="人脑神经元结构-–-术语"><a href="#人脑神经元结构-–-术语" class="headerlink" title="人脑神经元结构 – 术语"></a>人脑神经元结构 – 术语</h2><p>人脑神经网络是一个具有学习能力的系统，不同神经元之间的突触有强有弱，其强度是可以通过学习（训练）不断改变，具有一定可塑性。单个神经元的神经活动不具备重要性，关键是神经元之间如何组成一个复杂的网络。</p><table><thead><tr><th>神经元结构</th><th>功能</th></tr></thead><tbody><tr><td>细胞体  (Soma)</td><td>包含细胞核和其他细胞器，是神经元的代谢中心。</td></tr><tr><td>细胞膜</td><td>含有各种受体和离子通道，是神经元兴奋和抑制的产生部位。</td></tr><tr><td>树突  (Dendrite)</td><td>接收来自其他神经元的信号，并将兴奋传入细胞体。</td></tr><tr><td>轴突(Axon)</td><td>将自身的兴奋状态从胞体传送到另一个神经元或其他组织。</td></tr><tr><td>突触  (Synapse)</td><td>神经元之间的连接“接口”，将一个神经元的兴奋状态传到另一个神经元。</td></tr></tbody></table><h2 id="人工神经网络-起源与概念"><a href="#人工神经网络-起源与概念" class="headerlink" title="人工神经网络 - 起源与概念"></a>人工神经网络 - 起源与概念</h2><p>生物神经网络( natural neural network, NNN): 由中枢神经系统（脑和脊髓）及周围神经系统（感觉神经、运动神经等）所构成的错综复杂的神经网络，其中最重要的是脑神经系统。</p><p>人工神经网络(artificial neural networks, ANN): 模拟人脑神经系统的结构和功能，运用大量简单处理单元经广泛连接而组成的人工网络系统。</p><h2 id="神经网络发展演进-三起三落"><a href="#神经网络发展演进-三起三落" class="headerlink" title="神经网络发展演进 - 三起三落"></a>神经网络发展演进 - 三起三落</h2><p>神经网络发展曲折，从单层神经网络（感知器）开始，到包含一个隐藏层的两层神经网络，再到多层的深度神经网络，一共有三次兴起过程。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150214422.png" alt="image-20240718150214422"></p><p>这两个10年间人们对于神经网络的期待并不现在低，可结果都逐渐衰落。</p><p>冷静才是对待目前深度学习热潮的最好办法。如果因为深度学习火热，或者可以有 “钱景”就一窝蜂的涌入，那么最终的受害人只能是自己。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150226540.png" alt="image-20240718150226540"></p><h2 id="神经网络的学习-决定性能的三大要素"><a href="#神经网络的学习-决定性能的三大要素" class="headerlink" title="神经网络的学习 - 决定性能的三大要素"></a>神经网络的学习 - 决定性能的三大要素</h2><p>神经网络方法：是一种“知识表示方法和推理方法”。</p><p>神经网络知识表示：是一种隐式的表示方法，它将某个问题的若干知识通过学习表示在一个网络中。（谓词、产生式、语义网络等是显示表示法）</p><p>神经网络的学习：指调整神经网络的“连接权值或结构”，使输入和输出能满足需要。</p><h3 id="决定人工神经网络性能的三大要素"><a href="#决定人工神经网络性能的三大要素" class="headerlink" title="决定人工神经网络性能的三大要素"></a>决定人工神经网络性能的三大要素</h3><ul><li>神经元的特性。</li><li>神经元之间相互连接的形式 – 拓扑结构（见下页PPT）。</li><li>为适应环境而改善性能的学习规则。</li></ul><h3 id="Hebb学习规则"><a href="#Hebb学习规则" class="headerlink" title="Hebb学习规则"></a>Hebb学习规则</h3><p>1944年，赫布提出改变神经元连接强度的规则：学习过程最终发生在神经元之间的突触部位，突触的联结强度随着突触前后神经元的活动而变化，变化的量与两个神经元的活性之和成正比。当某一突触两端的神经元同时处于兴奋状态，那么该连接的权值应该增强。（教材P215给出了数学表达公式）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150242624.png" alt="image-20240718150242624"></p><h2 id="神经网络结构-分类"><a href="#神经网络结构-分类" class="headerlink" title="神经网络结构 - 分类"></a>神经网络结构 - 分类</h2><p>根据神经网络中神经元的连接方式，可以划分为不同类型。主要包括“前馈型、反馈型”两种。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150258207.png" alt="image-20240718150258207"></p><h3 id="前馈型（-前向型）"><a href="#前馈型（-前向型）" class="headerlink" title="前馈型（ 前向型）"></a>前馈型（ 前向型）</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150301748.png" alt="image-20240718150301748"></p><h3 id="反馈型"><a href="#反馈型" class="headerlink" title="反馈型"></a>反馈型</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150316109.png" alt="image-20240718150316109"></p><h2 id="神经网络结构-应用"><a href="#神经网络结构-应用" class="headerlink" title="神经网络结构 - 应用"></a>神经网络结构 - 应用</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150357971.png" alt="image-20240718150357971"></p><h2 id="神经元-MP模型（单层感知机）"><a href="#神经元-MP模型（单层感知机）" class="headerlink" title="神经元 - MP模型（单层感知机）"></a>神经元 - MP模型（单层感知机）</h2><p>AI诞生之时，很容易联想到是否可借鉴人脑的构成。尽管人脑的奥秘还存在很多未知领域，但在已知领域，科学家一直在尝试让计算机模拟人脑运行。首先要做的，就是从人脑的最小单元—神经元入手，让计算机模拟它的工作机制。</p><p>1943年，麦克洛奇和皮兹发现了大脑中神经元的工作机制MP模型。</p><h3 id="真实的人脑神经3D模拟"><a href="#真实的人脑神经3D模拟" class="headerlink" title="真实的人脑神经3D模拟"></a>真实的人脑神经3D模拟</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150416064.png" alt="image-20240718150416064"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150422241.png" alt="image-20240718150422241"></p><h2 id="单层感知机-数学模型"><a href="#单层感知机-数学模型" class="headerlink" title="单层感知机 - 数学模型"></a>单层感知机 - 数学模型</h2><p>图中每个中枢点可认为是一个神经元，把神经元的生物工作机制简单的绘制出来，并以此建模，得到一个计算机能识别的模型，称之为—Perceptron（感知器）。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150433990.png" alt="image-20240718150433990"></p><blockquote><p>可以把一个神经元细胞想象成一个有多个听筒（输入），但只有一个话筒（输出）的电话。</p><p>听筒就是神经元的树突，话筒是神经元的轴突。</p></blockquote><h2 id="单层感知机-激活函数（输出变换函数）"><a href="#单层感知机-激活函数（输出变换函数）" class="headerlink" title="单层感知机 - 激活函数（输出变换函数）"></a>单层感知机 - 激活函数（输出变换函数）</h2><p>激活函数：也叫非线性激励函数、输出变换函数。</p><p>激活的概念意味着：通过某个门槛值就是1，否则是0。不恰当的比喻是考试到60分就及格，可以升级。从这个定义来看考0和59是一样的不会被激活，而60和100是一样的，都会被激活。</p><h2 id="单层感知机的本质-线性分类器"><a href="#单层感知机的本质-线性分类器" class="headerlink" title="单层感知机的本质 - 线性分类器"></a>单层感知机的本质 - 线性分类器</h2><p>感知器中的权值是通过训练得到的。因此，根据以前机器学习的知识可知，感知器类似一个逻辑回归模型，可以做线性分类任务。可以用决策分界来形象的表达分类的效果。</p><p>决策分界：就是在二维的数据平面中划出一条直线，当数据的维度是3维的时候，就是划出一个平面，当数据的维度是n维时，就是划出一个n-1维的超平面。</p><p>感知机可以被视为一种最简单形式的前馈式人工神经网络，它是一种二分类的线性分类判别模型， 其输入为实例的特征向量想（x1,x2…），神经元的激活函数f为sign，输出为实例的类别（+1或者-1），模型的目标是要将输入实例通过超平面将正负二类分离。</p><p>下图显示了在二维平面中划出决策分界的效果，也就是感知器的分类效果。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150510264.png" alt="image-20240718150510264"></p><h2 id="单层感知机-局限性（无法计算异或XOR）"><a href="#单层感知机-局限性（无法计算异或XOR）" class="headerlink" title="单层感知机 - 局限性（无法计算异或XOR）"></a>单层感知机 - 局限性（无法计算异或XOR）</h2><p>把异或运算的两个输入当做感知器的输入值，期待感知器能把输入值加权求和，然后再用一个激活函数得到两个输入值的异或值。同样我们像刚才一样将A,B 的四个值（0,0), (0,1),(1,0),(1,1)作为X1, X2画在坐标系里（更准确的此时应该说是一个二维向量空间）。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150547264.png" alt="image-20240718150547264"></p><p>请问是否可以找到一条线将红绿点分开？答案是不能。似乎感知器真不能解决这样简单的问题。</p><p>那为什么我们现在还在用这个模型呢？ 答案是MLP(Multilayer perceptron)，多层感知器。</p><h2 id="两层感知机-明斯基的“功与罪”"><a href="#两层感知机-明斯基的“功与罪”" class="headerlink" title="两层感知机 - 明斯基的“功与罪”"></a>两层感知机 - 明斯基的“功与罪”</h2><p>1951年在普林斯顿攻读phD时，年仅24岁的Minsky发明了第一台物理的基于感知器的人工神经网络- 随机神经模拟强化计算器SNARC （ Stochastic Neural Analog Reinforcement Calculator）。在Minsky晚年接受采访时，仍然不忘拿出来show了一把。按理说他应该是感知器的发扬光大者才对。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150602294.png" alt="image-20240718150602294"></p><p>但是他非常聪明，很早就发现了“单层感知器”的局限，这也体现在1969年他和 Parpet 写 的 一 本 书 中 ， 书 的 名 字 叫 《Perceptrons: An Introduction to Computational Geometry》。书中提到最为典型的例子是感知器无法解决像“异或”这么简单的问题。</p><h2 id="两层感知机-罗森布拉特（0到1的突破）"><a href="#两层感知机-罗森布拉特（0到1的突破）" class="headerlink" title="两层感知机 - 罗森布拉特（0到1的突破）"></a>两层感知机 - 罗森布拉特（0到1的突破）</h2><p>Minsky说过单层神经网络无法解决异或问题。但是当增加一个计算层以后，两层神经网络不仅可以解决异或问题，而且具有非常好的非线性分类效果。算力受限：不过两层神经网络的计算是一个问题，在当时算力受限的情况下，并没有一个较好的解法。1961年，Frank Rosenblatt（感知器模型的坚定支持者，也是明斯基的高中同学）就发表了论文《Perceptrons and the theory of brain mechanisms》，提出多层感 知器的概念，只是当时并没有被人注意到。非常遗憾，Rosenblatt在明斯基出版《Perceptrons: An Introduction to Computational Geometry》一书的同一年（1969年），就英年早逝（享年41岁）。甚至有人说，如果Rosenblatt在世，可能Marvin根本不会是图灵奖得主。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150617282.png" alt="image-20240718150617282"></p><h2 id="两层感知器-解决异或XOR问题"><a href="#两层感知器-解决异或XOR问题" class="headerlink" title="两层感知器 - 解决异或XOR问题"></a>两层感知器 - 解决异或XOR问题</h2><p>异或运算举例，假使我们不是做一条线，而是做两条线是不是就可以将红绿点分开了呢。</p><p>拆解一下这两条线划分的步骤，以及它如何解决了异或问题。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150637811.png" alt="image-20240718150637811"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150632502.png" alt="image-20240718150632502"></p><h2 id="两层感知器-解决异或XOR问题-1"><a href="#两层感知器-解决异或XOR问题-1" class="headerlink" title="两层感知器 - 解决异或XOR问题"></a>两层感知器 - 解决异或XOR问题</h2><p>第1步：我们在单层感知器的中间加上一层隐式层，在隐式层里加上两个神经元h1， h2。</p><p>第2步：X1, X2信号经过h1感知器后，可以将点(1,0)和其他点分开。</p><p>第3步：X1, X2信号经过h2感知器后，可以将点(0,1)和其他点分开，在这里，我们对h2的激活函数</p><p>第4步：此时，h1，h2就会有三种输出，即（红，绿），（绿，绿），（绿，红），我们用0代表红色，1代表绿色，那就是(0,1), (1,1), (1,0) 就很容易分开了。这样我们就用一个多层感知器解决了异或XOR问题。</p><p>用通用的方法表示以上结构就是下图的神经网络的雏形：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150707437.png" alt="image-20240718150707437"></p><h2 id="两层感知器的本质-非线性分类器"><a href="#两层感知器的本质-非线性分类器" class="headerlink" title="两层感知器的本质 - 非线性分类器"></a>两层感知器的本质 - 非线性分类器</h2><p>从以上可看出，感知器本质上就是一个分类器，计算机首先通过学习来划出一个空间（多维向 量空间），然后根据这个学习结果来区分新的 输入是落在这个空间之外，还是之内。计算机不可能像人通过“看一眼”就能划出这个空间，它是采用的是无限逼近的方法。（比如随机给一组权重，然后看看通过这个权重算出来的值与训练给出的已知值有多大差异，直到这个差异值达到最小值，就停止逼近。）如何使计算机更快更好的逼近这个最佳权重，就是所有的基于神经网络的算法要解决的问题。（最简单的比如刚做的将单层感知器增加一层，还比如增加神经元，都可以更好更快地划出这个空间。）【右图是斯坦福网站<a href="https://link.zhihu.com/?target=https://cs.stanford.edu/people/karpathy/convnetjs/demo/classify2d.html">有趣的实验</a>，支持2层神经网络】当把一层感知器增加为两层的时候，就会画出两条线来来划出一个二维空间。在两层感知器中，通过增加神经元可以对更复杂的点分布做出分类。即，可通过多层神经元这种结构可以对一切进行分类。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150724105.png" alt="image-20240718150724105"></p><h2 id="多层感知机-深度学习（1到100的发展）"><a href="#多层感知机-深度学习（1到100的发展）" class="headerlink" title="多层感知机 - 深度学习（1到100的发展）"></a>多层感知机 - 深度学习（1到100的发展）</h2><p>多层感知机通过对线性分类器的组合叠加，具有拟合非线性函数的能力。Hornik在1989年证明，当中间隐含层的神经元数量趋于无穷多时，多层感知机可以拟合任何非线性函数。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150737296.png" alt="image-20240718150737296"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150740253.png" alt="image-20240718150740253"></p><h2 id="神经网络发展小结-算法、算力的影响"><a href="#神经网络发展小结-算法、算力的影响" class="headerlink" title="神经网络发展小结 - 算法、算力的影响"></a>神经网络发展小结 - 算法、算力的影响</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150753227.png" alt="image-20240718150753227"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150756259.png" alt="image-20240718150756259"></p><h2 id="神经网络发展小结-扩展"><a href="#神经网络发展小结-扩展" class="headerlink" title="神经网络发展小结 - 扩展"></a>神经网络发展小结 - 扩展</h2><p>理论上来说，神经元数量越多，层数越多，产生的力量越大。可借鉴互联网的网络效应，网络效应粗略可根据节点间的连接数量来确定，而网络的力量就蕴含在这些连接当中。（假设一个网络中有N的节点，最佳情况下，每两个节点都可以相连，就可以产生： N（N-1）&#x2F;2次连接（1个节点可以和其他N-1个节点连接，总共就是N（N-1）个连接，但因为每个连接会重复算一次，所以要除以2））。在人类大脑里，平均每人拥有860亿个神经元，这860个神经元总共有100万亿个突触，即可以发生100万亿次连接（这里并非每两个神经元之间都有连接)。在已知领域内，大脑的所产生的力量也是蕴含在这些神经元的连接中（至于其他未知领域，相信还有很多，毕竟人脑进化了几百万年，不是我们几百年就能研究清楚的），所以你大概能知道人与人脑力的差别可能就在于：神经元的数量。神经元之间的连接，这种连接是可以被训练的。20世纪60年前关于感知器局限性的争论，然后又对AI这座大厦最底层原理做了一个简单的阐述。最大感受是：一座大厦，不管它多么宏伟，也离不开底层的一砖一瓦；一个个体，不管它多么渺小，汇聚在一起也能产生意想不到的力量。在整个人工智能的知识体系里，感知器这个小小的概念最终扛住了时间的考验，成为今天的AI的基石。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150811982.png" alt="image-20240718150811982"></p><h2 id="Hopfield网络-概念与原理"><a href="#Hopfield网络-概念与原理" class="headerlink" title="Hopfield网络 - 概念与原理"></a>Hopfield网络 - 概念与原理</h2><p>1982年， Hopfield的一篇论文横空出世，仿佛神经网络这匹困兽再次苏醒，也预示着神经网络在AI 领域的崛起。论文中提到的associative neural network就是后来的“Hopfield network”，它是当前学习神经网络绕不开的话题。Hopfield 并非图灵奖得主，但他对计算机AI 领域的开创性贡献却启发了三位未来的图灵奖得主（ Geoffery Hiton, Bengjo, Yann Lecun）。Hopfield 所从事的领域并非计算机科学，Hopfield在物理学的的成就更为显著。在2001年， Hopfield 被授予Dirac奖（理论物理学界的诺贝尔奖）Hopfield 网络就是他从物理学角度去研究神经科学，最后却被应用于计算机科学的一个案例。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150833703.png" alt="image-20240718150833703"></p><h2 id="Hopfield网络-伊辛模型（Ising-model）"><a href="#Hopfield网络-伊辛模型（Ising-model）" class="headerlink" title="Hopfield网络 - 伊辛模型（Ising model）"></a>Hopfield网络 - 伊辛模型（Ising model）</h2><p>伊辛模型：在解释物体呈现“固态、液态或者气态”，是内部粒子实现“动态平衡”的表现。就像湖里的水不变，不是因为它没有输入输出，只是因为输入输出恰好一样。类似，Hopefield网络认为，人脑记忆也是一种动态平衡。当磁体在高温时磁性会消失，而降到一定温度后，又会恢复磁性。磁性的产生是因为磁体内部粒子的磁性方向一致。高温时，粒子的磁性方向杂乱无章，彼此磁性抵消，呈现整体没有磁性的状态。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150859903.png" alt="image-20240718150859903"></p><p>假设某个内容被记忆（存储）在N个神经元中。和伊辛模型类似，Hopfield认为每个神经元的状态仅仅与它相邻神经元的状态相关，同时反过来，每个神经元的状态又影响着与其相邻的神经元。</p><p>这种动态平衡是由这样一个规则在维持：当相邻两个神经元的状态相反时（相当于彼此想让对方翻转），彼此作为输入信号的权重为-1， 当相邻两个粒子状态相同时，权重为+1。</p><h2 id="Hopfield神经网络-网络结构"><a href="#Hopfield神经网络-网络结构" class="headerlink" title="Hopfield神经网络 - 网络结构"></a>Hopfield神经网络 - 网络结构</h2><p>Hopfield神经网络是反馈神经网络，其输出端又会反馈到其输入端，在输入的激励下，其输出会产生不断的状态变化，这个反馈过程会一直反复进行。假如Hopfield神经网络是一个收敛的稳定网络，则这个反馈与迭代的计算过程所产生的变化越来越小，一旦达到了稳定的平衡状态，Hopfield网络就会输出一个稳定的恒值（吸引因子(W矩阵)）。对于一个Hopfield神经网络来说，关键在于确定它在稳定条件下的权重系数。原始Hopfield神经网络是个全连接网络，即网络中任意两个神经元之间都有连接，在数学上这叫完全图（complete graph）。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150918897.png" alt="image-20240718150918897"></p><p>可以认为Hopfield网络里的神经元都是社交高手，跟谁都是朋友。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150925072.png" alt="image-20240718150925072"></p><h2 id="Hopfield神经网络-平衡状态规则"><a href="#Hopfield神经网络-平衡状态规则" class="headerlink" title="Hopfield神经网络 - 平衡状态规则"></a>Hopfield神经网络 - 平衡状态规则</h2><p>动态平衡的维持规则：当相邻两个神经元的状态相反时（相当于彼此想让对方翻转），彼此作为输入信号的权重为-1， 当相邻两个粒子状态相同时，权重为+1</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718150955364.png" alt="image-20240718150955364"></p><h3 id="权重计算"><a href="#权重计算" class="headerlink" title="权重计算"></a>权重计算</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718151007450.png" alt="image-20240718151007450"></p><h3 id="结果计算"><a href="#结果计算" class="headerlink" title="结果计算"></a>结果计算</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718151017674.png" alt="image-20240718151017674"></p><h2 id="Hopfield神经网络-求解权重矩阵"><a href="#Hopfield神经网络-求解权重矩阵" class="headerlink" title="Hopfield神经网络 - 求解权重矩阵"></a>Hopfield神经网络 - 求解权重矩阵</h2><p>以此类推，经过这样多个权重定义，其他几个神经元的状态也能保持状态不变。因此，核心任务转换为“求解权重矩阵”。特点： 权重矩阵W 完全无需人工参与调节， 由神经元自身状态值产生， 因此，Hopefield 网络也被认为是第一个无监督式学习模型。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718151033682.png" alt="image-20240718151033682"></p><h2 id="Hopfield网络-如何通过片段回忆整个记忆内容"><a href="#Hopfield网络-如何通过片段回忆整个记忆内容" class="headerlink" title="Hopfield网络 - 如何通过片段回忆整个记忆内容"></a>Hopfield网络 - 如何通过片段回忆整个记忆内容</h2><p>要想通过片段唤起整个记忆，相当于是把片段作为一个输入值，经过某种变换之后，输出整个记忆。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152444135.png" alt="image-20240718152444135"></p><p>当然，这只是4个神经元的恢复，现实中可能是成千上万个神经元参与，这个回忆过程不会一步完成，而是一个围绕记忆上下振荡的过程，但是由于W矩阵的存在，最终会恢复到记忆，就像我们回忆某个事情的时候，也要经历一些过程。</p><h2 id="BP神经网络-概念"><a href="#BP神经网络-概念" class="headerlink" title="BP神经网络 - 概念"></a>BP神经网络 - 概念</h2><ul><li>定义：是一种按误差逆传播算法训练的多层前馈神经网络，是目前应用很广泛。</li><li>作用：BP网络能学习和存贮大量的“输入-输出”模式映射关系，而无需事前揭示描述这种映射关系的数学方程。</li><li>学习规则：使用“最速梯度下降法”，通过反向传播来“不断调整网络的权值和阈值”，使网络的误差平方和最小。</li><li>基本思想：通过计算“输出层”与“期望值”之间的误差来调整网络参数，从而使得误差变小。其思想很简单，然而人们认识到它的重要作 用却经过了很长的时间。</li><li>重要性：BP算法是深度学习中求取各层梯度的核心算法，理解该算法对于理解深度学 习原理至关重要。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152503535.png" alt="image-20240718152503535"></p><h2 id="BP神经网络-起源"><a href="#BP神经网络-起源" class="headerlink" title="BP神经网络 - 起源"></a>BP神经网络 - 起源</h2><p>1974年，哈佛大学沃伯斯(Paul Werbos)博士论文里，首次提出了通过误差的反向传播(BP，Backpropagation)来训练人工神经网络，但在该时期未引起重视。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152516826.png" alt="image-20240718152516826"></p><p>1986 年， Rumelhart 和Hinton 等发展了反向传播BP算法，解决了两层神经网络所需要的复杂计算量问题，带动业界使用两层神经网络研究的热潮。（ 参 见 他 们 发 表 在 Nature 上 的 论 文 Learning  representations  by  back- propagating errors ）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152531739.png" alt="image-20240718152531739"></p><h2 id="BP神经网络-算法原理"><a href="#BP神经网络-算法原理" class="headerlink" title="BP神经网络 - 算法原理"></a>BP神经网络 - 算法原理</h2><ul><li>MLP存在问题：多层感知器在如何获取“隐层的权值”问题上遇到了瓶颈。</li><li>解决思路：既然我们无法直接得到隐层的权值，能否先通过输出层得到“输出结果和期</li><li>望输出的误差”来间接调整隐层的权值呢？ BP算法就是采用这样的思想设计出来的。</li><li>基本思想：学习过程由“信号的正向传播”与“误差的反向传播”两个过程组成。。</li><li>前向传播（阶段1）：从输入层开始，逐层计算输出，直至输出层。“每个神经元的输出”通过加权和和激活函数的处理得到。</li><li>反向传播：在前向传播结束后，通过比较“网络输出”和“期望输出”的差异来计算误差。然后，误差以反向传播的方式逐层传递回输入层，通过调整各层间连接权重，使误差逐步减小。</li><li>权值更新：在反向传播过程中，根据误差和梯度下降法，更新神经网络的权值和阈值。通过不断迭代，使得网络输出逼近期望输出，达到训练的目标。</li></ul><h2 id="BP神经网络-算法原理（通俗举例解释）"><a href="#BP神经网络-算法原理（通俗举例解释）" class="headerlink" title="BP神经网络 - 算法原理（通俗举例解释）"></a>BP神经网络 - 算法原理（通俗举例解释）</h2><ul><li>前向传播：三个人在玩你画我猜的游戏，然后第一个人给第二个人描述，再将信息传递给第三个人，由第三个人说出画的到底是啥。</li><li>反向传播：第三个人得知自己说的和真实答案之间的误差后，发现他们在传递时的问题差在哪里，向前面一个人说下次描述的时候怎样可以更加准确的传递信息。就这样一直向前一个人告知。</li></ul><p>不断磨合：三个人之间的的默契一直在磨合，然后描述的更加准确。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152551154.png" alt="image-20240718152551154"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152555467.png" alt="image-20240718152555467"></p><h2 id="BP神经网络-数学模型"><a href="#BP神经网络-数学模型" class="headerlink" title="BP神经网络 - 数学模型"></a>BP神经网络 - 数学模型</h2><p>BP网络结构：在输入层与输出层之间增加若干层(一层或多层)神经元，这些神经元称为隐藏层，它们与外界没有直接的联系，但其状态的改变，则能影响输入与输出之间的关系，每一层可以有若干个节点。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152827898.png" alt="image-20240718152827898"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152830546.png" alt="image-20240718152830546"></p><p>要解决的问题：如何获取“隐层的权值(W, b) ” 。</p><h2 id="BP神经网络-前向传播"><a href="#BP神经网络-前向传播" class="headerlink" title="BP神经网络 - 前向传播"></a>BP神经网络 - 前向传播</h2><p>过程：从输入层开始，逐层计算输出，直至输出层。每个神经元的输出通过加权和和激活函数的处理得到。</p><p>即：构建函数模型，并计算出Loss函数 的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152848700.png" alt="image-20240718152848700"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152859811.png" alt="image-20240718152859811"></p><h2 id="BP神经网络-反向传播（反馈与调整）"><a href="#BP神经网络-反向传播（反馈与调整）" class="headerlink" title="BP神经网络 - 反向传播（反馈与调整）"></a>BP神经网络 - 反向传播（反馈与调整）</h2><p>过程：在已知Loss函数 的情况下，对该函数做数学优化，得到最小化Loss函数 时，各个参数(W, b) 的值。</p><p>优化技巧（梯度下降法）：利用Loss函数 求得其关于所有参数(W, b) 的梯度，再基于梯度下降法更新参数。</p><p>反向传播知道如何更改网络中的权重w和偏差b，来改变代价函数Loss函数值。最终这意味着它能够计算关于(W, b) 的偏导数。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152921285.png" alt="image-20240718152921285"></p><p>为计算以上w和b的偏导数，先引入一个中间变量（网络中第 𝑙 层第 𝑗 个神经元的误差）。后向传播能够计算出误差，即可返回计算出w和b。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152940319.png" alt="image-20240718152940319"></p><p>上式表示“损失函数在 𝑧 [𝑙] 上的偏导数”，为什么误差能定义成这样？这是因为目标点在损失函数曲面的最低点的梯度为0，即所有维度上的偏导值为0，所以将当前点处的偏导值定义为当前的误差是非常合理的。</p><p>根据链式法则</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718152958476.png" alt="image-20240718152958476"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153029627.png" alt="image-20240718153029627"></p><p>以下表示本层δ值 与下一层δ值 间的关系，这种反向计算关系，就是反向传播算法这个名字的由来。其实误差并没有真的在神经网络中传播，而是上一层的δ值与下一层δ值之间存在这种数学关系，所谓误差的反向传播就是对这种反向计算方式的形象表达。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153056193.png" alt="image-20240718153056193"></p><p>注意：截图中的的C函数就是Loss函数。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153150551.png" alt="image-20240718153150551"></p><h2 id="BP神经网络-小结"><a href="#BP神经网络-小结" class="headerlink" title="BP神经网络 - 小结"></a>BP神经网络 - 小结</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153157791.png" alt="image-20240718153157791"></p><h2 id="卷积神经网络CNN-起源与原理"><a href="#卷积神经网络CNN-起源与原理" class="headerlink" title="卷积神经网络CNN - 起源与原理"></a>卷积神经网络CNN - 起源与原理</h2><p>1968年，Hubel和Wiesel的论文，讲述猫和猴的视觉皮层含有对视野的小区域单独反应的神经元。</p><p>感受野（Receptive Field）：如果眼睛没有移动，则视觉刺激影响单个神经元的视觉空间区域。相邻细胞具有相似和重叠的感受野。感受野大小和位置在皮层之间系统地变化，形成完整的视觉空间图。</p><p>以上为CNN的局部感知奠定了一个基础。</p><p>Hubel和Wiesel将猫麻醉后，把电极插到其视觉神经上，并连接示波器。然后给它们看不同图像，观察脑电波反应。发现猫看到鱼的图片神经元并不会兴奋。但意外发现，切换幻灯片时，猫神经元会兴奋，即“图片的边缘会引起猫咪神经元的兴奋”。</p><p>由此，两人获得1981年诺贝尔奖。这项发现在生物学上留下浓墨重彩的一笔，且对20年后人工智能的发展埋下了伏笔。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153722276.png" alt="image-20240718153722276"></p><blockquote><p>1980年，日本人福岛邦彦在论文《Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffectedby shift in position》提出一个包含卷积层、池化层的神经网络结构。</p></blockquote><h2 id="卷积神经网络CNN-突破-LeNet-5"><a href="#卷积神经网络CNN-突破-LeNet-5" class="headerlink" title="卷积神经网络CNN - 突破(LeNet-5)"></a>卷积神经网络CNN - 突破(LeNet-5)</h2><p>1998年，在这个基础上，Yann Lecun在论文《Gradient-Based Learning Applied to Document Recognition》中提出了LeNet-5，将BP算法应用到这个神经网络结构的训练上，就形成了当代卷积神经网络的维形。</p><p>Yann Lecun最早将CNN用于手写数字识别。</p><p>LeNet-5的结构和现在用的 CNN网络结构已经非常接近。网络层数加深到了7层，其中两层卷积两层池化。</p><p>LeNet-5 标志卷积神经网络的开端，因为当时计算机算力的限制， 所以其使用了复杂的局部连接。</p><p>并 且 当 时 并 没 有 使 用 softmax和交叉熵，而是使用了欧式径向基函数和均方误差。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153739809.png" alt="image-20240718153739809"></p><h2 id="卷积神经网络-结构"><a href="#卷积神经网络-结构" class="headerlink" title="卷积神经网络 - 结构"></a>卷积神经网络 - 结构</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153749182.png" alt="image-20240718153749182"></p><table><thead><tr><th>名称</th><th>操作内容</th><th>数学意义</th></tr></thead><tbody><tr><td>输入层</td><td>接收原始图像数据（常是像素矩阵）；  对彩色图像，矩阵的深度（即通道数）通常为3，代表红、绿、蓝。</td><td>-</td></tr><tr><td>卷积层  （核心）</td><td>拿着滤镜查找和提取特征；  滤波器在输入数据上滑动并进行卷积运算，以提取输入数据的局部特征。  随着网络深度的增加，卷积层能够从低级特征中提取更复杂的特征。</td><td>卷积就是2个函数的叠加，即矩阵相乘。</td></tr><tr><td>池化层  （下采样层）</td><td>为减少训练的参数，在保持采样不变下，忽略掉一些信息，降低网络的参数数量。  同时增强对微小形变的鲁棒性。</td><td>取最大值、或平均值等，达到降维目的。</td></tr><tr><td>全连接层</td><td>将卷积层和池化层提取的特征进行整合  做分类或回归任务判断，并输出最终预测结果。</td><td>矩阵相乘</td></tr></tbody></table><h2 id="CNN算法框架1-卷积层（卷积操作）"><a href="#CNN算法框架1-卷积层（卷积操作）" class="headerlink" title="CNN算法框架1 - 卷积层（卷积操作）"></a>CNN算法框架1 - 卷积层（卷积操作）</h2><p>主要是用来提取图像数据的特征和学习图像数据的特征表示。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153808784.png" alt="image-20240718153808784"></p><h2 id="CNN算法框架-卷积层（子卷积层）"><a href="#CNN算法框架-卷积层（子卷积层）" class="headerlink" title="CNN算法框架 - 卷积层（子卷积层）"></a>CNN算法框架 - 卷积层（子卷积层）</h2><p>输入图像有RGB 3个通道，会增加网络的深度，此时就有了子卷积层的概念。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153820083.png" alt="image-20240718153820083"></p><h2 id="CNN算法框架-卷积层"><a href="#CNN算法框架-卷积层" class="headerlink" title="CNN算法框架 - 卷积层"></a>CNN算法框架 - 卷积层</h2><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153843197.png" alt="image-20240718153843197"></p><h3 id="选择卷积的步长"><a href="#选择卷积的步长" class="headerlink" title="选择卷积的步长"></a>选择卷积的步长</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153930566.png" alt="image-20240718153930566"></p><h3 id="卷积核个数的确定"><a href="#卷积核个数的确定" class="headerlink" title="卷积核个数的确定"></a>卷积核个数的确定</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153942232.png" alt="image-20240718153942232"></p><h2 id="CNN算法框架-池化层（下采样）"><a href="#CNN算法框架-池化层（下采样）" class="headerlink" title="CNN算法框架 - 池化层（下采样）"></a>CNN算法框架 - 池化层（下采样）</h2><p>作用：是减小数据处理量同时保留有用信息。理论上，任何类型的操作（如求最大、求平均等）都可以在池化层中完成，但实际上，一般只使用最大池化，这是因为卷积已经提取出特征，相邻区域的特征是类似，近乎不变。这时，池化只是选出最能表征特征的像素，缩减了数据量，同时保留了特征。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153953415.png" alt="image-20240718153953415"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718153956350.png" alt="image-20240718153956350"></p><h2 id="CNN算法框架-池化层（技术分析）"><a href="#CNN算法框架-池化层（技术分析）" class="headerlink" title="CNN算法框架 - 池化层（技术分析）"></a>CNN算法框架 - 池化层（技术分析）</h2><p>池化是一种down-sampling技术，本质是基于滑动窗口的思想，可以去除特征图中的冗余信息，对卷积层结果压缩的到重要特征，同时还可以有效的控制过拟合。池化一般通过简单的“最大值、最小值或平均值”操作完成。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/84c61769fc59414897356d02330c39b9.png" alt="在这里插入图片描述"></p><h2 id="CNN算法框架-激活函数"><a href="#CNN算法框架-激活函数" class="headerlink" title="CNN算法框架 - 激活函数"></a>CNN算法框架 - 激活函数</h2><p>CNN最成功的非线性是整流非线性单元（ReLU），它可以解决sigmoids中出现的消失梯度问题。</p><p>缺点：ReLU更容易计算并产生稀疏性（因此，并不总是有益）。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/260f259d860f4a5281ffe9e5b8726db5.png" alt="在这里插入图片描述"></p><h2 id="CNN算法框架-分批归一化（Batch-Nomarliaztion）"><a href="#CNN算法框架-分批归一化（Batch-Nomarliaztion）" class="headerlink" title="CNN算法框架 - 分批归一化（Batch Nomarliaztion）"></a>CNN算法框架 - 分批归一化（Batch Nomarliaztion）</h2><p>为了解决层与层之间传输数据，前面层的数据更新，导致后面层数据分布的变化，会产生网络收敛慢、学习速度降低问题。</p><p>分批归一化：简化了计算过程，并保留了原始数据的表达能力。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/6ec1420b23b6469d85fb8f96ab35d5e3.png" alt="在这里插入图片描述"></p><h2 id="CNN算法框架-全连接层-dense-layer"><a href="#CNN算法框架-全连接层-dense-layer" class="headerlink" title="CNN算法框架 - 全连接层 (dense layer)"></a>CNN算法框架 - 全连接层 (dense layer)</h2><p>定义：当一层中的神经元与前一层的所有神经元都相连时，该层则称为全连接层。</p><p>主要作用：是将输入图像，在经过卷积和池化操作后提取的特征进行压缩，并且根据压缩的特征，完成模型的分类功能。</p><p>对经过多次卷积层和多次池化层所得出来的高级特征进行全连接（全连接就是常规神</p><p>经网络的性质），算出最后的预测值。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/888773ca8b244d3389c9f34687a38d7f.png" alt="在这里插入图片描述"></p><h2 id="卷积神经网络CNN-特点总结"><a href="#卷积神经网络CNN-特点总结" class="headerlink" title="卷积神经网络CNN - 特点总结"></a>卷积神经网络CNN - 特点总结</h2><table><thead><tr><th></th><th>类别</th><th>内容</th><th>优点</th><th></th></tr></thead><tbody><tr><td>局部感知</td><td>采用卷积操作实现图像特征提取，具有“局部感知”力。</td><td>模仿生物的视知觉机制，通过局部感知的方式处理图像。</td><td></td><td></td></tr><tr><td>参数共享</td><td>指某个特征图中的所有神经元使用相同的“权值和偏置”。</td><td>l可大大减少模型的参数数量和运算时间，提升效率。  l实现了对不同位置上的局部特征的相同处理。</td><td></td><td></td></tr><tr><td>下采样  （池化）</td><td>指在特征映射上定期地探索每个子区域，并简化映射内容，将多个相邻像素的值合并成一个值。</td><td>可以逐渐降低数据体的空间尺寸，减少网络中参数的数量，使计算资源耗费变少，也能有效控制过拟合。</td><td></td><td></td></tr><tr><td>层次化  表达</td><td>所提取的特征逐渐由高层次到低层次。（低层提取简单特  征，中间层变得抽象，高层次则更加抽象）</td><td>这种层次化表达使得CNN能从原始输入中提取出从“局部  到全局”的丰富特征。</td><td></td><td></td></tr><tr><td>稀疏连接</td><td>与传统神经网络的全连接不同，CNN采用稀疏连接方式。</td><td>l这意味着图像中感兴趣特征可能只存在于图像上的一小块，而非整个图像。  l通过使用较小的卷积核，卷积神经网络能够有效地提取出这些特征，同时减少计算量和冗余。</td><td></td><td></td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718154152317.png" alt="image-20240718154152317"></p><h2 id="卷积神经网络CNN-应用"><a href="#卷积神经网络CNN-应用" class="headerlink" title="卷积神经网络CNN - 应用"></a>卷积神经网络CNN - 应用</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/b401369e053b4cc89b113959ef7c4854.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.机器学习概述</title>
      <link href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章主要介绍的机器学习的概念、发展历程、发展趋势、相关应用，着重拓展机监督学习和无监督学习的相关知识。</p><p>重点：机器学习的定义和应用；</p><p>难点：机器学习算法及分类。</p><h2 id="机器学习-重要性"><a href="#机器学习-重要性" class="headerlink" title="机器学习 - 重要性"></a>机器学习 - 重要性</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718134848017.png" alt="image-20240718134848017"></p><h3 id="MachineLeaning出现前"><a href="#MachineLeaning出现前" class="headerlink" title="MachineLeaning出现前"></a>MachineLeaning出现前</h3><p>自从50年代以后，AI的发展就磕磕碰碰，没达到足够震撼从早期的逻辑推理，到中期的专家系统，这些科研进步确实使我们离机器的智能有点接近了，但还有一大段距离</p><h3 id="MachineLeaning出现后"><a href="#MachineLeaning出现后" class="headerlink" title="MachineLeaning出现后"></a>MachineLeaning出现后</h3><p>直到机器学习诞生以后，人工智能界感觉终于找对了方向。基于机器学习的图像识别和语音识别在某些垂直领域达到了跟人相媲美的程度。机器学习使人类第一次如此接近AI的梦想。</p><h2 id="机器学习-类比人脑思考与决策"><a href="#机器学习-类比人脑思考与决策" class="headerlink" title="机器学习 - 类比人脑思考与决策"></a>机器学习 - 类比人脑思考与决策</h2><p>机器善于处理数据不断提高性能</p><p>人类学习利用经验不断提高性能</p><p>思考：能否把“经验”变成数据，让机器可以“模仿”人类进行学习？</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718134907196.png" alt="image-20240718134907196"></p><h2 id="机器学习-何谓智慧"><a href="#机器学习-何谓智慧" class="headerlink" title="机器学习 - 何谓智慧"></a>机器学习 - 何谓智慧</h2><p>人类区别于其他物体（植物，动物）的最主要区别是 “智慧”。智慧是对生活的感悟，是对人生的积淀与思考，这与我们机器学习的思想何其相似？通过经验获取规律，指导人生与未来。没有经验就没有智慧。学习沉淀，总结规律、产生决策</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718134919876.png" alt="image-20240718134919876"></p><ul><li>是计算能力么，应该不是，心算速度快的人我们一般称之为天才。</li><li>是反应能力么，也不是，反应快的人我们称之为灵敏。</li><li>是记忆能力么，也不是，记忆好的人我们一般称之为过目不忘。</li><li>是推理能力么，这样的人我也许会称他智力很高，类似“福尔摩斯”，但不会称他拥有智慧。</li><li>是知识能力么，这样的人我们称之为博闻广，也不会称他拥有智慧。</li></ul><h2 id="机器学习-发展历程"><a href="#机器学习-发展历程" class="headerlink" title="机器学习 - 发展历程"></a>机器学习 - 发展历程</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135040103.png" alt="image-20240718135040103"></p><h2 id="机器学习-与AI关系"><a href="#机器学习-与AI关系" class="headerlink" title="机器学习 - 与AI关系"></a>机器学习 - 与AI关系</h2><p>区别1：人工智能是一种广泛的概念，而机器学习是人工智能的一部分。机器学习（ML）是一种人工智能的子领域，它使用算法和统计模型来让计算机自动从数据中学习，其目 标是让计算机自动发现数据中的模式和规律，从而可以预测未来的结果。</p><p>区别2：人工智能需要程序员来编写算法和规则，而机器学习则是让计算机自己学习。这意味着，机器学习算法可以从数据中自动发现模式和规律，而不需要手动编写规则。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135059521.png" alt="image-20240718135059521"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135103786.png" alt="image-20240718135103786"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135113283.png" alt="image-20240718135113283"></p><h2 id="机器学习-定义"><a href="#机器学习-定义" class="headerlink" title="机器学习 - 定义"></a>机器学习 - 定义</h2><p>定义：机器学习（Machine Learning）本质上就是让计算机在数据中学习规律，并根据所得到的规律对未来数据进行预测。</p><p>基本思路：让机器模仿人类学习行为的过程。如人类解决新问题一般是通过“经验归纳，总结规律，从而预测未来”的过程。则机器学习的基本过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135325716.png" alt="image-20240718135325716"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135329519.png" alt="image-20240718135329519"></p><h2 id="机器学习-工作原理"><a href="#机器学习-工作原理" class="headerlink" title="机器学习 - 工作原理"></a>机器学习 - 工作原理</h2><p>定义：机器学习（Machine Learning）本质上就是让计算机在数据中学习规律，并根据所得到的规律对未来数据进行预测。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135342390.png" alt="image-20240718135342390"></p><blockquote><p>Machine Learning &#x3D; task + data + objective + algorithm</p><p>–Tom Mitchell</p></blockquote><h2 id="机器学习-分类"><a href="#机器学习-分类" class="headerlink" title="机器学习 - 分类"></a>机器学习 - 分类</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135430891.png" alt="image-20240718135430891"></p><h2 id="机器学习-分类（3种重点类型"><a href="#机器学习-分类（3种重点类型" class="headerlink" title="机器学习 - 分类（3种重点类型)"></a>机器学习 - 分类（3种重点类型)</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135505570.png" alt="image-20240718135505570"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135516001.png" alt="image-20240718135516001"></p><h2 id="分类1-监督学习"><a href="#分类1-监督学习" class="headerlink" title="分类1 - 监督学习"></a>分类1 - 监督学习</h2><p>定义：是使用标记数据集来训练算法，以便对数据进行分类或准确预测结果。当输入数据被输入到模型中时，它会调整其权重，直到模型被适当地拟合，这是交叉验证过程的一部分。</p><p>应用：监督式学习可以帮助组织大规模地解决各种现实世界的问题，例如对收件箱中单独文件夹中的垃圾邮件进行分类。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135529192.png" alt="image-20240718135529192"></p><h2 id="分类2-–-半监督学习"><a href="#分类2-–-半监督学习" class="headerlink" title="分类2 – 半监督学习"></a>分类2 – 半监督学习</h2><p>定义：侧重于在“有监督”的分类算法中加入无标记样本来实现半监督分类。</p><p>典型算法：如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135540559.png" alt="image-20240718135540559"></p><h2 id="分类3-无监督学习"><a href="#分类3-无监督学习" class="headerlink" title="分类3 - 无监督学习"></a>分类3 - 无监督学习</h2><p>定义：从无标注数据样本出发，学习数据样本中蕴含的模式，完成如聚类或降维等特定任务。本质是一种统计手段，即从未标注数据中寻找隐含结构的过程。</p><p>在现实生活中，高质量标注数据难以获得，因此，无监督学习多数情况下是监督学习的补充。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718135553896.png" alt="image-20240718135553896"></p><table><thead><tr><th>监督学习</th><th>无监督学习</th></tr></thead><tbody><tr><td>任务目标明确</td><td>任务目标不明确  （适用范围广）</td></tr><tr><td>训练数据带标签</td><td>训练数据不带标签  （减少数据分析成本）</td></tr><tr><td>效果易于评估</td><td>效果不易于评估  （需要科学选择）</td></tr></tbody></table><h2 id="分类4-强化学习"><a href="#分类4-强化学习" class="headerlink" title="分类4 - 强化学习"></a>分类4 - 强化学习</h2><p>定义：类似监督学习，但未使用样本数据进行训练，而是通过不断试错进行学习的模式。</p><p>重要构成：2个交互对象 + 4个核心要素</p><p>应用：机器人避障、棋牌类游戏、广告和推荐等应用场景中。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140229457.png" alt="image-20240718140229457"></p><table><thead><tr><th>四要素</th><th>说明</th></tr></thead><tbody><tr><td>策略  （Policy）</td><td>•定义智能体的行为  •是从状态到行为的映射  •本身可是具体映射，也可是随机分布</td></tr><tr><td>奖励函数  （Reward）</td><td>•是一个标量的反馈信号  •能表征在某一步智能体的表现如何  •智能体的任务就是使得一个时段内积累的总奖励值最大</td></tr><tr><td>价值函数  （Value）</td><td>•价值函数是对未来奖励的预测  •它可以评估状态的好坏  •价值函数的计算需要对状态之间的转移  进行分析</td></tr><tr><td>环境模型  （Model）</td><td>•模型可以预测环境下一步的表现  •表现具体可由预测状态和奖励来反映  •模型可选择</td></tr></tbody></table><h2 id="分类4-强化学习-1"><a href="#分类4-强化学习-1" class="headerlink" title="分类4 - 强化学习"></a>分类4 - 强化学习</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140622869.png" alt="image-20240718140622869"></p><h2 id="机器学习-趋势分析"><a href="#机器学习-趋势分析" class="headerlink" title="机器学习- 趋势分析"></a>机器学习- 趋势分析</h2><p>机器学习正真开始研 究和发展应该从80年代开始， 我们借助 AMiner 平台， 将近些年机器学习论文进行统计分析所生成的发展趋势图以深度神经网络、强化学习为代表的深度学习相关的技术研究热度上升很快，近几年仍然是研究热点。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140647692.png" alt="image-20240718140647692"></p><h2 id="机器学习算法-分类及应用"><a href="#机器学习算法-分类及应用" class="headerlink" title="机器学习算法 - 分类及应用"></a>机器学习算法 - 分类及应用</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140658970.png" alt="image-20240718140658970"></p><table><thead><tr><th></th><th>回归</th><th>分类</th></tr></thead><tbody><tr><td>输出  类型</td><td>预测连续值（如价格、  温度等）</td><td>预测离散标签  （如是&#x2F;否）</td></tr><tr><td>评估指标</td><td>通常使用“均方误差  （MSE）、R²分数”等</td><td>常使用“准确率、 F1分数”等</td></tr></tbody></table><table><thead><tr><th></th><th>分类</th><th>聚类</th></tr></thead><tbody><tr><td>区别</td><td>按某种标准给对象贴标签(label)，再根据标签来区分归类。</td><td>事先没有“标签”；  通过某种成因分析找出事物间存在聚集性的原因。</td></tr><tr><td>分类器需由人工标注的分类训练得到，属于有指导学习。</td><td>无需人工标注和预先训练分类器，类别在聚类过程中自动生成，属于无指导学习。</td><td></td></tr><tr><td>应用场景</td><td>l适合类别或分类体  系已经确定的场合；  l比如按照国图分类法分类图书</td><td>l适合不存在分类体系、 类别数不确定的场合，  常作为某些应用的前端；  l如多文档文摘、搜索引  擎结果后聚类(元搜索)等。</td></tr></tbody></table><h2 id="回归分析-预测连续、具体的数据"><a href="#回归分析-预测连续、具体的数据" class="headerlink" title="回归分析(预测连续、具体的数据)"></a>回归分析(预测连续、具体的数据)</h2><p>回归分析：是一种预测性的建模技术，研究因变量（目标）和自变量（预测器）之间的关系。通过这个模型，可以用一组特征（自变量）来预测一个连续的结果（因变量）。</p><p>应用：通常用于“预测分析、时间序列模型以及发现变量之间的因果关系”。例如，司机的鲁莽驾驶与道路交通事故数量之间的关系，最好的研究方法就是回归。</p><p>重要性：回归问题是机器学习领域中最古老、最基础，同时也是最广泛应用的问题之一。无论是在金融、医疗、零售还是自然科学中，回归模型都扮演着至关重要的角色。</p><p>举例：用房间面积、位置等特征来预测房价。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140722514.png" alt="image-20240718140722514"></p><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>定义：一种通过属性的线性组合来进行预测的线性模型。</p><p>目标：是找到一条直线或者一个平面或者更高维的超平面，使得预测值与真实值之间的误差最小化。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140752927.png" alt="image-20240718140752927"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140755700.png" alt="image-20240718140755700"></p><h2 id="多项式回归（曲线）"><a href="#多项式回归（曲线）" class="headerlink" title="多项式回归（曲线）"></a>多项式回归（曲线）</h2><p>定义：与线性回归尝试使用直线拟合数据不同，多项式回归使用多项式方程进行拟合。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140808699.png" alt="image-20240718140808699"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140811733.png" alt="image-20240718140811733"></p><h2 id="支持向量回归（超平面）"><a href="#支持向量回归（超平面）" class="headerlink" title="支持向量回归（超平面）"></a>支持向量回归（超平面）</h2><p>定义：是支持向量机（SVM）的回归版本，用于解决回归问题。它试图找到一个超平面，以便在给定容忍度内最大程度地减小预测和实际值之间的误差。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140826672.png" alt="image-20240718140826672"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140829587.png" alt="image-20240718140829587"></p><h2 id="决策树回归（树结构）"><a href="#决策树回归（树结构）" class="headerlink" title="决策树回归（树结构）"></a>决策树回归（树结构）</h2><p>定义：是一种非参数的、基于树结构的回归方法。它通过将特征空间划分为一组简单的区域，并在每个区域内进行预测。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140841943.png" alt="image-20240718140841943"></p><h3 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h3><p>决策树回归不依赖于具体的数学模型。它通过递归地将数据集划分为不同的子集，并在每个子集内计算目标变量的平均值作为预测</p><h2 id="分类分析-预测非连续、离散型数据-模式识别"><a href="#分类分析-预测非连续、离散型数据-模式识别" class="headerlink" title="分类分析(预测非连续、离散型数据-模式识别)"></a>分类分析(预测非连续、离散型数据-模式识别)</h2><ul><li>定义：分类算法也称为模式识别，其主要目的是从数据中发现规律，并将数据分成不同的类别。</li><li>过程：分类算法通过对已知类别训练集的计算和分析，从中发现类别规则并预测新数据的类别。</li><li>典型算法：包括决策树、朴素贝叶斯、逻辑回归、K-最近邻、支持向量机等。</li><li>应用：金融、医疗、电子商务等领域，以帮助人们更好地理解和利用数据。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140857107.png" alt="image-20240718140857107"></p><h2 id="基础分类算法-决策树、逻辑回归"><a href="#基础分类算法-决策树、逻辑回归" class="headerlink" title="基础分类算法 - 决策树、逻辑回归"></a>基础分类算法 - 决策树、逻辑回归</h2><h3 id="决策树（n叉树）"><a href="#决策树（n叉树）" class="headerlink" title="决策树（n叉树）"></a>决策树（n叉树）</h3><p>通过将数据集划分为不同的子集来预测目标变量。它从根节点开始，根据某个特征对数据集进行划分，然后递归地生成更多的子节点，直到满足停止条件为止。决策树的每个内部节点表示一个特征属性上的判断条件，每个分支代表一个可能的属性值，每个叶节点表示一个分类结果。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140931559.png" alt="image-20240718140931559"></p><h3 id="逻辑回归："><a href="#逻辑回归：" class="headerlink" title="逻辑回归："></a>逻辑回归：</h3><p>一种用于二元分类的算法，通过使用逻辑函数将线性回归的结果映射到 [0,1]范围内。将输入特征与输出类别之间的关系表示为线性回归函数，然后通过逻辑函数将线性回归的结果转换为一个概率值，用于预测目标变量。</p><p>特点：计算效率高，但在处理高维数据时可能会过拟合。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718140942080.png" alt="image-20240718140942080"></p><h2 id="基础分类算法-SVM、朴素贝叶斯"><a href="#基础分类算法-SVM、朴素贝叶斯" class="headerlink" title="基础分类算法 - SVM、朴素贝叶斯"></a>基础分类算法 - SVM、朴素贝叶斯</h2><p>支持向量机（SVM）：通过找到一个超平面来划分不同的类别。它试图最大化两个类别之间的边界，这个边界被称为间隔。</p><p>目标：找到一个能够将数据集中的点正确分类的超平面，同时最大化间隔。在二分类问题中， SVM通过求解一个二次优化问题来找到这个超平面。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141306925.png" alt="image-20240718141306925"></p><p>朴素贝叶斯：是一种基于贝叶斯定理的分类算法，通过计算每个类别的条件概率来预测目标变量。假设每个特征之间独立，然后根据这个假设来计算类别的条件概率，并选择概率最大的类别作为预测结果</p><p>优点：在处理高维数据时效率高，并且对数据集的大小和分布不敏感。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141315525.png" alt="image-20240718141315525"></p><h2 id="集成分类算法-随机森林、AdBoost"><a href="#集成分类算法-随机森林、AdBoost" class="headerlink" title="集成分类算法 - 随机森林、AdBoost"></a>集成分类算法 - 随机森林、AdBoost</h2><p>随机森林：是一种使用多棵树对样本进行训练并预测的分类器。既可以用于处理分类和回归问题，也适用于降维问题。</p><p>它通过随机选择样本和特征来生成多个决策树，然后以投票的方式将最多个数的结果作为最终分类结果。</p><p>优点：对异常值与噪音也有很好的容忍，相较于决策树有着更好的预测和分类性能。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141327571.png" alt="image-20240718141327571"></p><p>AdBoost：是一种迭代算法，通过将多个弱分类器的结果组合来预测目标变量。</p><p>将数据集分成多个子集，然后针对每个子集训练一个弱分类器，并调整每个弱分类器的权重，使得分类错误的样本得到更大的权重，然后再次训练弱分类器。如此反复迭代，直到达到预设的迭代次数或者弱分类器的精度达到某个阈值为止。</p><p>优点：可处理多类分类问题，且对噪声和异常值不敏感</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141332826.png" alt="image-20240718141332826"></p><h2 id="集成分类算法-GBDT"><a href="#集成分类算法-GBDT" class="headerlink" title="集成分类算法 - GBDT"></a>集成分类算法 - GBDT</h2><p>梯度提升决策树（GBDT）：GBDT算法是一种基于梯度提升的分类算法，它通过将多个决策树的结果组合来预测目标变量。</p><p>GBDT算法通过不断地添加树、更新模型参数和优化目标函数来提高模型的精度。每棵树都是通过对样本特征空间进行划分、寻找最佳划分点来生成的。每棵树生成后，就对应一个残差函数，用当前所有树的残差和作为下一棵树的生成依据。如此反复迭代，直到达到预设的迭代次数或者满足其他停止条件为止。最终的预测结果由所有树的加权和决定。</p><p>优点：在处理复杂和非线性问题时表现良好，并且对数据集的大小和分布不敏感。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141345213.png" alt="image-20240718141345213"></p><h2 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h2><p>定义：将物理或抽象对象的集合分成由类似的对象组成的多个类的过程被称为聚类。</p><p>目标：一类无监督学习的算法，其目标是将数据集中的样本划分为若干个互不重叠的子集，每个子集被称为一个“簇”，使得同一簇内的样本相似度较高，而不同簇之间的样本相似度较低。即，在不事先知道数 据的真实类别标签的情况下，发现数据中的内在结构和模式。</p><p>重要性：“物以类聚，人以群分”，在自然科学和社会科学中，存在着大量的分类问题。聚类分析又称群分析，它是研究（样品或指标）分类问题的一种统计分析方法。</p><p>聚类分析方法：系统聚类法、有序样品聚类法、动态聚类法、模糊聚类法、图论聚类法、聚类预报法等。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141355500.png" alt="image-20240718141355500"></p><h2 id="聚类算法-K-Means、DBSCAN"><a href="#聚类算法-K-Means、DBSCAN" class="headerlink" title="聚类算法 - K-Means、DBSCAN"></a>聚类算法 - K-Means、DBSCAN</h2><p>K均值聚类（K-Means）： 最经典和常用的聚类算法之一。它通过将数据划分为K个簇，并使每个样本点到其所属簇的中心距离最小化来实现。</p><p>K-Means算法迭代更新簇的中心，直至达到收敛条件。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141407346.png" alt="image-20240718141407346"></p><p>DBSCAN（Density-Based Spatial Clustering of Applications with Noise）： 一种基于样本密度的聚类算法。</p><p>通过寻找高密度区域，将数据划分为不同的簇，并可以识别噪声点。不需要预先指定簇的数量，适用于不规则形状的簇和对噪声相对鲁棒的场景。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141426211.png" alt="image-20240718141426211"></p><h2 id="K-Means聚类-算法原理"><a href="#K-Means聚类-算法原理" class="headerlink" title="K-Means聚类 - 算法原理"></a>K-Means聚类 - 算法原理</h2><ul><li>初始化：随机选择k个中心点，作为初始的聚类中心。</li><li>计算距离：计算每个样本到k个中心点的距离，将各样本划分到距离最近的中心点所在的簇。</li><li>重新计算中心：为各簇所有点的均值，重新计算各簇的中心。</li><li>迭代：不断迭代2、3步骤，直到各簇不再发生变化或者达到预设的迭代次数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141439593.png" alt="image-20240718141439593"></p><h2 id="层次聚类及其他"><a href="#层次聚类及其他" class="headerlink" title="层次聚类及其他"></a>层次聚类及其他</h2><p>定义：是一种基于树形结构的聚类算法，通过将数据点逐步合并成簇，最终形成一棵树形的聚类结构。</p><p>分为两种：自底向上聚类（Agglomerative Clustering）和自上向下聚类（Divisive Clustering）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141451168.png" alt="image-20240718141451168"></p><table><thead><tr><th>其他聚类算法</th></tr></thead><tbody><tr><td>DBSCAN聚类</td></tr><tr><td>均值漂移聚类</td></tr><tr><td>谱聚类</td></tr><tr><td>模糊聚类  Fuzzy Clustering</td></tr><tr><td>密度峰值聚类  Density  Peaks  Clustering</td></tr><tr><td>基于高斯混合模型GMM</td></tr><tr><td>最大值期望EM的聚类</td></tr></tbody></table><h2 id="降维-引入原因"><a href="#降维-引入原因" class="headerlink" title="降维 - 引入原因"></a>降维 - 引入原因</h2><ul><li>存在问题：在机器学习中经常会碰到一些高维的数据集，导致出现以下情况：</li><li>维度灾难：指“数据样本稀疏，距离计算”等困难，这是所有机器学习方法共同面临的严重问题。</li><li>特征冗余：另外，在高维特征中容易出现特征之间的线性相关，这也就意味着有些特征存在冗余。</li><li>基本思想：为解决以上问题，可“将高维数据集投影到低维空间”，同时尽量保留变量的信息或方差。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th></th><th>线性降维</th><th>非线性降维</th></tr></thead><tbody><tr><td>原理</td><td>基于线性变换将数据映射到低维空间，</td><td>通过非线性变换将数据映射到低维空间</td></tr><tr><td>范围</td><td>线性可分的数据集</td><td>非线性结构的数据集</td></tr><tr><td>复杂度</td><td>算法简单，所以计算效  率高，易于理解和实现</td><td>计算复杂度较高，通常需要  更多的计算资源和时间</td></tr><tr><td>完整性</td><td>通常不能捕捉数据中的非线性结构，可能会导致信息丢失</td><td>l能够更好地保留数据中的非线性结构和局部关系，  l提供更好的可视化效果</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141512529.png" alt="image-20240718141512529"></p><h2 id="线性降维-PCA"><a href="#线性降维-PCA" class="headerlink" title="线性降维 - PCA"></a>线性降维 - PCA</h2><ul><li>主成分分析 (Principal component analysis) ：用于将高维数据集转换为低维表示，同时保留数据集的主要特征。</li><li>目标：通过找到数据中最大方差的方向（主成分），然后在低维空间中找到一个有效的投影轴，通过投影，将原始数据中相对重要的信息表达出来，达到降维目的。</li><li>应用：最常用的算法，在数据压缩，消除冗余等领域有着广泛使用。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141524072.png" alt="image-20240718141524072"></p><h2 id="线性降维-LDA"><a href="#线性降维-LDA" class="headerlink" title="线性降维 - LDA"></a>线性降维 - LDA</h2><ul><li>LDA（线性判别分析）：它与主成分分析（PCA）不同，因为它不仅考虑了数据的方差结构，还考虑了数据的类别信息。LDA旨在找到一个投影方向，最大化不同类别之间的距离（类间散布），同时最小化同一类别内部的距离（类内散布）。</li><li>目标：以 “类内方差最小化，类间方差最大化 “为目标，找到可以优化分类的特征子空间，对数据进行投影，以达到降维的目的。</li><li>应用：该方法广泛用于面部识别、情感分析等领域</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141549271.png" alt="image-20240718141549271"></p><h2 id="线性降维-奇异阵分解"><a href="#线性降维-奇异阵分解" class="headerlink" title="线性降维 - 奇异阵分解"></a>线性降维 - 奇异阵分解</h2><ul><li>奇异值分解（Singular Value Decomposition，SVD）：是一种用于矩阵分解的重要技术。它将一个矩阵分解为三个矩阵的乘积形式，这三个矩阵分别是一个“正交矩阵、一个对角矩阵和另一个正交矩阵的转置”。</li><li>目标：在降维中，只保留奇异值较大的项，可以实现对数据的有效压缩和表示。</li><li>应用：具有广泛的应用，包括数据压缩、降维、矩阵逆求解、推荐系统等。</li><li><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141601254.png" alt="image-20240718141601254"></li></ul><h2 id="非线性降维-核PCA"><a href="#非线性降维-核PCA" class="headerlink" title="非线性降维 - 核PCA"></a>非线性降维 - 核PCA</h2><ul><li>核PCA：可看作是正态主成分分析的非线性版本。</li><li>特点：常规PCA和核PCA都可以进行降维。但核PCA能很好处理线性不可分割的数据。因此，其主要用途是“使线性不可分的数据线性可分”，同时降低数据的维数。</li><li>应用：在图像处理、信号处理等领域中，可更准确地获取和分析数据信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141617670.png" alt="image-20240718141617670"></p><h2 id="非线性降维-LLE"><a href="#非线性降维-LLE" class="headerlink" title="非线性降维 - LLE"></a>非线性降维 - LLE</h2><ul><li>局部线性嵌入（Locally linear embedding，LLE）：能够使降维后的数据较好地保持原有流形结构。它是流形学习方法最经典的工作之一。很多后续的流形学习、降维方法都与 LLE 有密切联系。</li><li>对比：和传统的PCA，LDA 等关注样本方差的降维方法相比，LLE关注于降维时保持样本局部的线性特征。</li><li>应用：由于LLE保持了样本局部特征，广泛用于图像图像识别，高维数据可视化等。一个形象的流形降维过程如图有一块卷起来的布，希望将其展开到一个二维平面，且展开后的布能够在局部保持布结构的特征。其实也就是将其展开的过程，就像两个人将其拉开一样。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141636381.png" alt="image-20240718141636381"></p><h2 id="机器学习算法-总结与选用原则"><a href="#机器学习算法-总结与选用原则" class="headerlink" title="机器学习算法 - 总结与选用原则"></a>机器学习算法 - 总结与选用原则</h2><p>NFL定理（No Free Lunch）一个算法A若在某些问题上比算法B好，必定存在一些特殊问题使得算法B比A 好。因此，不存在绝对好的学习算法，必须要有具体问题，具体分析的思维。着重发现数据集中潜藏的结构来简化训练。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141645051.png" alt="image-20240718141645051"></p><h2 id="机器学习平台-技术框架"><a href="#机器学习平台-技术框架" class="headerlink" title="机器学习平台 - 技术框架"></a>机器学习平台 - 技术框架</h2><p>随着机器学习算法在许多领域取得长足 进步，对机器学习系统的需求不断增长，促成搭建专用的机器学习平台。</p><p>同时，基于效率考虑，希望机器学习应用可以自动化构建并使用。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141704097.png" alt="image-20240718141704097"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141707444.png" alt="image-20240718141707444"></p><p>自动化机器学习(AutoML) ：可在给定数据集上，自动选择使用哪种机器学习算法、如何预处理其特征，以及如何设置所有超参数。</p><h2 id="机器学习应用流程-如何应用？"><a href="#机器学习应用流程-如何应用？" class="headerlink" title="机器学习应用流程 - 如何应用？"></a>机器学习应用流程 - 如何应用？</h2><p>机器学习是将现实中的问题抽象为数学模型，利用历史数据对数据模型进行训练，然后基于数据模型对新数据进行求解，并将结果再转为现实问题的答案的过程。</p><p>机器学习一般的应用实现步骤如下：</p><p>将现实问题抽象为</p><ul><li>数学问题</li><li>数据准备</li><li>选择或创建模型</li><li>模型训练及评估</li><li>预测结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141733648.png" alt="image-20240718141733648"></p><h2 id="机器学习应用流程-参考框架"><a href="#机器学习应用流程-参考框架" class="headerlink" title="机器学习应用流程 - 参考框架"></a>机器学习应用流程 - 参考框架</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718141753803.png" alt="image-20240718141753803"></p><h2 id="应用案例-常见问题分类及案例"><a href="#应用案例-常见问题分类及案例" class="headerlink" title="应用案例 - 常见问题分类及案例"></a>应用案例 - 常见问题分类及案例</h2><p>回归任务：预计外卖送达的时间</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718142058689.png" alt="image-20240718142058689"></p><p>分类任务：垃圾邮件分类</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718142110829.png" alt="image-20240718142110829"></p><p>聚类任务：商品个性化推荐</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718142119041.png" alt="image-20240718142119041"></p><p>降维任务：人脸识别</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718142130457.png" alt="image-20240718142130457"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.群智能算法</title>
      <link href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>受自然界和生物界规律的启迪，人们根据其原理模仿设计了许多求解问题的算法，称为 “生物智能算法”，属于典型的元启发式随机优化方法。</p><p>主要包括“进化算法、群智能算法”两类。</p><p>遗传算法（重点）：提供了进化算法的框架，然后介绍几种比较典型的改进遗传算法及其应用。</p><p>群体智能算法（次重点）：包括“粒子群算法、蚁群算法”等。</p><h2 id="进化算法EA-定义、起源思想、应用"><a href="#进化算法EA-定义、起源思想、应用" class="headerlink" title="进化算法EA - 定义、起源思想、应用"></a>进化算法EA - 定义、起源思想、应用</h2><p>定义：进化算法(evolutionary algorithms)是一种基于自然选择和遗传学机理等生物进化机制的一种搜索算法，非常适用于处理“传统搜索方法”难以解决的“复杂和非线性优化问题”。</p><p>起源思想：以达尔文的进化论思想为基础，通过模拟生物进化过程与机制，而实现求解问题的自组织、自适应的人工智能技术。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232558145.png" alt="image-20240717232558145"></p><h2 id="进化算法EA-生物学背景"><a href="#进化算法EA-生物学背景" class="headerlink" title="进化算法EA - 生物学背景"></a>进化算法EA - 生物学背景</h2><p>大自然有种神奇的力量，生物通过进化，能够将优良的基因保留下来，从而进化出更加强大、更加适合生存的基因。</p><p>进化算法类似于生物进化，需经过长时间的成长演化，最后收敛到最优化问题的一个或多个解。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232610807.png" alt="image-20240717232610807"></p><h2 id="生物进化-基本过程"><a href="#生物进化-基本过程" class="headerlink" title="生物进化 - 基本过程"></a>生物进化 - 基本过程</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232620112.png" alt="image-20240717232620112"></p><p>如图所示，不适合的个体会逐步退出这个循环圈，成为被淘汰的群体。</p><h3 id="种群的多样性。"><a href="#种群的多样性。" class="headerlink" title="种群的多样性。"></a>种群的多样性。</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232623311.png" alt="image-20240717232623311"></p><h2 id="生物进化-物质基础"><a href="#生物进化-物质基础" class="headerlink" title="生物进化 - 物质基础"></a>生物进化 - 物质基础</h2><p>生物进化的物质基础是“种群中存在可遗传的变异”，简称“遗传多样性”。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232645286.png" alt="image-20240717232645286"></p><ul><li>染色体(chromosome)：生物的遗传物质的主要载体。</li><li>基因(gene) ： 具有遗传效应的 DNA片段，用于扩展生物性状的遗传物质的功能单元和结构单位。</li><li>基因座（locus）：染色体中基因的位置。</li><li>等位基因（alleles）：基因所取的值。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/fe8c6c8770e84b7fb6b267fc61bd5e24.png" alt="在这里插入图片描述"></p><h2 id="进化算法EA-基本框架"><a href="#进化算法EA-基本框架" class="headerlink" title="进化算法EA - 基本框架"></a>进化算法EA - 基本框架</h2><p>进化算法：类似于生物进化，需要长时间的成长演化。主要通过“选择、重组和变异”这三种操作实现优化问题的求解，最后会慢慢收敛到最优化问题的一个或者多个解。其中“适者生存”是生物演化的一个过程规律。算法簇都包括“遗传算法、遗传规划、进化策略、进化规划”。其中“ 遗传基因表达方式、交叉和变异算子、特殊算子、再生和选择方法” 等，都是可调变量。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232713736.png" alt="image-20240717232713736"></p><h2 id="进化算法EA-特点与对比"><a href="#进化算法EA-特点与对比" class="headerlink" title="进化算法EA - 特点与对比"></a>进化算法EA - 特点与对比</h2><table><thead><tr><th>对比项</th><th>普通搜索算法</th><th>进化算法EA的特点</th><th>备注（针对进化算法）</th></tr></thead><tbody><tr><td>算法类型</td><td>迭代搜索算法</td><td>-</td><td></td></tr><tr><td>起始点</td><td>从单一搜索点开始</td><td>从一组解出发，到另一组解</td><td>从一组解出发，通过选择、重组和变异操作，逐步改进到更优的解。</td></tr><tr><td>解的处理  （终点）</td><td>只对结果值进行参数优化</td><td>需对结果值进行编码</td><td>-</td></tr><tr><td>搜索过程</td><td>能否使用的辅助信息有限</td><td>有效利用“结构化、随机性”信  息</td><td>利用结构化和随机性的信息，使最满  足目标的决策获得最大的生存可能</td></tr><tr><td>搜索信息</td><td>目标函数的导数 或具体问题有关的特殊知  识（启发式信息）</td><td>目标函数值</td><td>广泛的应用性  l高度的非线性  l易修改性  l可并行性</td></tr><tr><td>全局优化方法</td><td>传统基于微积分的方法  穷举法</td><td>全局优化方法</td><td>自组织、自适应、自学习  l能适应不同环境和不同问题  l能够有效处理大规模复杂优化问题</td></tr></tbody></table><h2 id="进化算法EA-设计原则"><a href="#进化算法EA-设计原则" class="headerlink" title="进化算法EA - 设计原则"></a>进化算法EA - 设计原则</h2><table><thead><tr><th>原则</th><th>说明</th></tr></thead><tbody><tr><td>适用性</td><td>指该算法所能适用的问题种类，它取决于算法所需的限制与假  定。</td></tr><tr><td>可靠性</td><td>l能可靠地求解大多数问题，即使在问题数据或控制参数发生  微小变化时也能得到合理的结果。  l指算法对于所设计的问题，以适当的精度求解其中大多数问题的能力。</td></tr><tr><td>收敛性</td><td>能收敛到全局最优解，且收敛速度较快。</td></tr><tr><td>稳定性</td><td>对控制参数和问题数据不敏感，即对控制参数或问题数据的微  小扰动不应导致算法结果的剧烈变化。</td></tr><tr><td>生物类比</td><td>生物界有效方法及操作可以通过类比的方法引入到算法中，有  时会带来较好的结果。</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232733580.png" alt="image-20240717232733580"></p><h2 id="进化算法EA-应用"><a href="#进化算法EA-应用" class="headerlink" title="进化算法EA - 应用"></a>进化算法EA - 应用</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232744689.png" alt="image-20240717232744689"></p><h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232754952.png" alt="image-20240717232754952"></p><h2 id="遗传算法-概述"><a href="#遗传算法-概述" class="headerlink" title="遗传算法 - 概述"></a>遗传算法 - 概述</h2><p>遗传算法（Genetic Algorithm，GA）：是一种模拟自然选择和遗传学机理的生物进化过程的计算模型。它最早由美国学者John Holland于20世纪70年代提出，主要用于搜索最优解。它是进化算法的一种。</p><p>Holland的学生Goldberg总结出了基本遗传算法(Simple Genetic Algorithms)，只使用选择算子、交叉算子和变异算子三种基本遗传算子，其遗传进化操作过程简单，容易理解，给各种遗传算法提供了一个基本框架。</p><p>基本思想：在求解最优化问题时从多个解开始，然后通过一定的法则进行逐步迭代以产生新的解。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232810354.png" alt="image-20240717232810354"></p><h2 id="遗传算法的发展历史"><a href="#遗传算法的发展历史" class="headerlink" title="遗传算法的发展历史"></a>遗传算法的发展历史</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232823765.png" alt="image-20240717232823765"></p><h2 id="基本遗传算法SGA-特点"><a href="#基本遗传算法SGA-特点" class="headerlink" title="基本遗传算法SGA - 特点"></a>基本遗传算法SGA - 特点</h2><p>特点：遗传算法得到的是整体水平最优的一组解，各有好的特性，而不是以前最优化方法的单一的最优解。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232833822.png" alt="image-20240717232833822"></p><h2 id="遗传算法-重要概念"><a href="#遗传算法-重要概念" class="headerlink" title="遗传算法 - 重要概念"></a>遗传算法 - 重要概念</h2><table><thead><tr><th>生物遗传概念</th><th>遗传算法中的应用</th></tr></thead><tbody><tr><td>适者生存</td><td>l适应度越大的个体被保留到下一代的概率越大(并不是一定会保留)</td></tr><tr><td>个体（Individual）</td><td>l适应度函数中的特定解</td></tr><tr><td>染色体  （Chromosome）</td><td>l解的编码（字符串、向量等）</td></tr><tr><td>基因（Gene）</td><td>l解的编码中每一分量</td></tr><tr><td>适应性（Fitness）</td><td>l适应度函数的函数值</td></tr><tr><td>群体（Population）</td><td>l根据适应度值选定的一组解（解的个数为群体的规模）</td></tr><tr><td>婚配（Marry）</td><td>l交叉（Crossover）选择两个染色体进行交叉产生一组新的染色体的过程</td></tr><tr><td>变异（Mutation）</td><td>l编码的某一分量发生变化的过程</td></tr></tbody></table><h2 id="基本遗传算法SGA-流程与5大要素"><a href="#基本遗传算法SGA-流程与5大要素" class="headerlink" title="基本遗传算法SGA - 流程与5大要素"></a>基本遗传算法SGA - 流程与5大要素</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232852106.png" alt="image-20240717232852106"></p><h2 id="SGA1-选基因-参数编码"><a href="#SGA1-选基因-参数编码" class="headerlink" title="SGA1(选基因) - 参数编码"></a>SGA1(选基因) - 参数编码</h2><ul><li>重要性：对一个具体的应用问题如何编码，是应用遗传算法求解的首要问题，也是遗传算法应用的难点。</li><li>引入原因：为什么需要对空间参数进行编码？由于遗传算法不能直接处理问题空间的参数，因此，必须通过编码将要求的问题，表示成遗传空间的染色体或者个体（它们由基因按一定结构组成）。编码后即可进行一般性操作，与具体问题无关，形成一般性的方法，从而能用在工程学上。</li><li>影响度：由于遗传算法的健壮性，对编码的要求并不苛刻。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232905775.png" alt="image-20240717232905775"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232909856.png" alt="image-20240717232909856"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717232914364.png" alt="image-20240717232914364"></p><h2 id="SGA1-选基因-参数编码-1"><a href="#SGA1-选基因-参数编码-1" class="headerlink" title="SGA1(选基因) - 参数编码"></a>SGA1(选基因) - 参数编码</h2><table><thead><tr><th>编码方法（大类）</th><th></th><th>小类</th><th>优点</th><th>二进制编码  缺点  lHamming悬崖  l要先给出求解的精度。  l求解高维优</th></tr></thead><tbody><tr><td>位串编码（一维染色体编码方法）：将问题空间的参数编码为一维排列的染色体的方法。</td><td></td><td>二进制编码：用若干二进制数表示一个个体，将原问题的解空间映射到位串空间 B&#x3D;{0，1}上，然后在位串空间上进行遗传操作。</td><td>l类似于生物染色体的组成，算法易于用生物遗传理论解释，遗传操作如交叉、变异等很容易实现；  l算法处理的模式数最多。</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Gray编码：将二进制编码通过一个变换进行转换得到的编码。</td><td>克服了Hamming悬崖。</td><td></td><td></td><td></td></tr><tr><td>实数编码：用若干实数表示一个个体，然后在实数空间上进行遗传算法。</td><td>-</td><td>不必进行数制转换，可直接在解的表现型上进行遗传操作。</td><td></td><td></td></tr><tr><td>多参数映射编码：把每个参数  先进行二进制编码，得到子串，再把这些子串连成一个完整染  色体。</td><td>-</td><td>l主要用于“多参数优化问题”；  l每个子串对应各自的编码参数，所以，可以有不同的串长度和参数的取值范围。</td><td></td><td></td></tr></tbody></table><h2 id="SGA2-选人群-初始群体的设定"><a href="#SGA2-选人群-初始群体的设定" class="headerlink" title="SGA2(选人群) - 初始群体的设定"></a>SGA2(选人群) - 初始群体的设定</h2><h3 id="初始种群的产生"><a href="#初始种群的产生" class="headerlink" title="初始种群的产生"></a>初始种群的产生</h3><p>随机产生群体规模数目的个体作为初始群体。根据问题固有知识，把握最优解所占空间在整个问题空间中的分布范围，然后，在此分布范围内设定初始群体。随机产生一定数目的个体，从中挑选最好的个体加到初始群体中。这种过程不断迭代，直到初始群体中个体数目达到了预先确定的规模。</p><h3 id="种群规模的确定"><a href="#种群规模的确定" class="headerlink" title="种群规模的确定"></a>种群规模的确定</h3><p>太小：遗传算法的优化性能不太好，易陷入局部最优解；</p><p>太大：计算复杂；</p><p>模式定理表明：若群体规模为M，则遗传操作可从这M 个个体中生成和检测M3个模式，并在此基础上能够不断形成和优化积木块，直到找到最优解。</p><p>结论：种群规模一般取为20~100。</p><h2 id="SGA3-竞争-适应度函数设计-直观法）"><a href="#SGA3-竞争-适应度函数设计-直观法）" class="headerlink" title="SGA3(竞争) - 适应度函数设计(直观法）"></a>SGA3(竞争) - 适应度函数设计(直观法）</h2><p>在具体应用中，适应度函数的设计要结合求解问题本身的要求而定。一般而言，适应度函数是由目标函数变换得到的。</p><ul><li>直观法：就是直接将“目标函数”映射成“适应度函数”，不加额外的处理。</li><li>欺骗问题：指在遗传算法中，所有妨碍适应度值高的个体产生，从而影响遗传算法正常工作的问题，主要会造成以下两种情况。</li></ul><table><thead><tr><th>现象</th><th>原因</th><th>内容</th><th>解决方法</th></tr></thead><tbody><tr><td>过早收敛</td><td>存在超级个体</td><td>某个体的适应值远超过群体的平均适应度值，在按比例进行选择时，该具体很快会在群体  中占据绝对比例。</td><td>缩小这些个体的适应度，以降低这些超级个体的竞争力。</td></tr><tr><td>停滞现象</td><td>群体平均适应值接近最优适应度</td><td>搜索过程后期，群体有足够多样性，但群体  平均适应值会接近群体的最佳适应度值，导  致群体中已不存在竞争，搜索目标难以改善。</td><td>改变原始适应值的比例关系，以提高个体之间的竞争力。</td></tr></tbody></table><h2 id="SGA4-遗传操作1-–-自然选择1"><a href="#SGA4-遗传操作1-–-自然选择1" class="headerlink" title="SGA4(遗传操作1) – 自然选择1"></a>SGA4(遗传操作1) – 自然选择1</h2><p>选择（也称复制，reproduction）操作：是从当前群体中按照一定概率选出优良的个体，使它们有机会作为父代繁殖下一代子孙。判断个体优良与否的准则：是每个个体的适应度值；个体适应度越高，其被选择的机会就越多。</p><p>存在问题:</p><table><thead><tr><th>现象</th><th>原因</th><th>内容</th><th>解决方法</th></tr></thead><tbody><tr><td>过早收敛</td><td>总选择最好的个体</td><td>变成确定性优化方法，使种群过快收敛到局部最优解。</td><td>找到一个策略，即要种群能较快  ， 地收敛，也要维  持种群的多样性。</td></tr><tr><td>收敛时间长，或不收敛</td><td>只做随机选择</td><td>变成了完全随机方法，需要很长时间才能收敛甚至不收敛。</td><td></td></tr></tbody></table><p>其他的解决方法</p><table><thead><tr><th>类别</th><th>目标</th><th>可选方法</th><th>内容</th><th>特点</th></tr></thead><tbody><tr><td>根据个体适应度，确定分配  “每个个体被选择的概率”  （先验概率？）</td><td>既要使得种群较快地收敛，也要维持种群的多样性。</td><td>适应度比例法，  或叫蒙特卡罗法  （Monte  Carlo）</td><td>每个个体被选择的概率和其适应度值成比例；</td><td>容易“过早收  敛和停滞现象”</td></tr><tr><td>排序法</td><td>l线性排序：按适应值大小对个体进行排序，然后把事先设计好的概率按排序分配给个体，作为各自的选择概率。  l非线性排序：将群体成员按适应值从好到坏依次排列，并按某种方式分配选择概率。</td><td>克服了“过早收敛和停滞现象”</td><td></td><td></td></tr></tbody></table><h3 id="轮盘赌选择算法"><a href="#轮盘赌选择算法" class="headerlink" title="轮盘赌选择算法"></a>轮盘赌选择算法</h3><p>重要性：在遗传算法中使用得最多,同时也是其他选择算法的基本框架。</p><p>具体步骤：先按个体的选择概率产生一个轮盘，轮盘每个区的角度与个体的选择概率成比例，然后产生一个随机数，它落入转盘的哪个区域就选择相应的个体交叉。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233120110.png" alt="image-20240717233120110"></p><table><thead><tr><th>个体</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>适应度值</td><td>2</td><td>4</td><td>6</td><td>8</td><td>10</td></tr><tr><td>个体被选择的概率</td><td>0.07</td><td>0.13</td><td>0.2</td><td>0.27</td><td>0.33</td></tr><tr><td>累积概率</td><td>0.07</td><td>0.2</td><td>0.4</td><td>0.67</td><td>1</td></tr></tbody></table><h3 id="范-例"><a href="#范-例" class="headerlink" title="范 例"></a>范 例</h3><p>假设第一轮产生随机数0.21，则会落在个体3，表明本轮选择到了个体3(红色框框表示)</p><p>假设第二轮产生随机数0.04，则会落在个体1，表明本轮选择到了个体1(蓝色框框表示)</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><table><thead><tr><th></th><th>名称</th><th>内容</th><th>特点</th></tr></thead><tbody><tr><td>方法2</td><td>锦标赛选择  法</td><td>从群体中随机选择k个个体，将适应度最高的保存到下一代，反复执行直到保存到下一代的个体数达到预设数量。参数k称为竞赛规模。</td><td>克服了适应值比例选择和排名选择在大规模群体中的额外计算量问题。比轮盘赌选择方法能够得到更多样化的群体。  适应值好的个体有较大的生存机会。使用适应值相对值作为选择标准，避免超级个体的影响，一定程度上避免过早收敛和停滞现象。</td></tr><tr><td>方法3</td><td>最佳个体  保存法  （精英选拔法，保送生）</td><td>将群体中适应度最高的一个或多个个体不进行交叉，直接复制到下一代，保证遗传算法终止时得到历代最高适应度的个体</td><td>提高遗传算法的收敛速度。保留种群个体总数的2%~5%的适应度最高的个体，效果最理想。  l注意：在使用其他选择方法时，一般同时使用最佳个体保存方法，以保证不会丢失最优个体。</td></tr></tbody></table><h2 id="SGA4-遗传操作1-交叉"><a href="#SGA4-遗传操作1-交叉" class="headerlink" title="SGA4(遗传操作1) - 交叉"></a>SGA4(遗传操作1) - 交叉</h2><p>定义：当两个生物机体配对或者复制时，其染色体相互混合，产生一个由双方基因</p><p>组成的全新染色体组。该过程称为重组(recombination)或者交叉(crossover)。</p><p>单点交叉（常用方法）</p><p>原理：在随机设定一个交叉点，实行交叉时，该点前或后的两个个体的部分结构进行互换，并生成两个新的个体。该方法交叉混合的速度较慢。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233153818.png" alt="image-20240717233153818"></p><p>交叉概率：用来确定两个染色体进行局部互换以产生两个新子代的概率，取值为 0.25-1.00。实验表明通常取0.7比较理想。</p><p>其他修正交叉方法：部分匹配交叉、顺序交叉、循环交叉等。（详见课本内容）</p><h2 id="SGA4-基因突变-变异"><a href="#SGA4-基因突变-变异" class="headerlink" title="SGA4(基因突变) - 变异"></a>SGA4(基因突变) - 变异</h2><ul><li>定义：进化机制除了改进已有的特征，也能够产生新的特征。基因传送给子孙后代过程中，会有很小的概率发生差错，从而使基因发生微小的改变，这就是基因的变异。</li><li>主要目的：维持群体的多样性，为选择、交叉过程中可能丢失的某些遗传基因进行修复和补充。</li><li>具体实施方法：将个体编码中的一些位进行随机变化。</li><li>变异算子的基本内容：对群体中的个体串的某些基因座上的基因值作变动。</li><li>变异操作：按位进行的，即把某一位的内容进行变异。</li><li>变异概率：在一个染色体中按位进行变化的概率。在实际应用中通常取值为0.001左右</li></ul><table><thead><tr><th>变异方式</th><th>内容</th></tr></thead><tbody><tr><td>位点变异</td><td>群体中的个体码串，随机挑选一个或多个基因座，并对这些基因座的基因值以变异概率作变动</td></tr><tr><td>逆转变异</td><td>在个体码串中随机选择两点（逆转点），然后将两点之间的基因值以逆向排序插入到原位置中</td></tr><tr><td>插入变异</td><td>在个体码串中随机选择一个码，然后将此码插入随机选择的插入点中间</td></tr><tr><td>互换变异</td><td>随机选取染色体的两个基因进行简单互换</td></tr><tr><td>移动变异</td><td>随机选取一个基因，向左或者向右移动一个随机位数。</td></tr></tbody></table><h2 id="总结：遗传算法一般步骤"><a href="#总结：遗传算法一般步骤" class="headerlink" title="总结：遗传算法一般步骤"></a>总结：遗传算法一般步骤</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233245316.png" alt="image-20240717233245316"></p><h2 id="遗传算法的特点"><a href="#遗传算法的特点" class="headerlink" title="遗传算法的特点"></a>遗传算法的特点</h2><p>遗传算法比起其他普通的优化搜索，采用了许多独特的方法和技术，是一种全局优化搜索算法。</p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>编码操作</td><td>l可以直接对结构对象进行操作，如集合、序列、矩阵、树、图等，具有广泛的应用领域</td></tr><tr><td>随机技术</td><td>l利用随机技术来指导对被编码的参数空间进行高效率搜索，而不是无方向的随机搜索</td></tr><tr><td>群体搜索</td><td>l采用同时处理群体中多个个体的方法，同时对搜索空间中的多个解进行评估，具有较好的全局搜索性能，减少了陷于局部优解的风险，也易于并行化</td></tr><tr><td>适应度函数</td><td>l不用搜索空间的知识或其他辅助信息，而仅用适应度函数值来评估个体，并在此基础上进行遗传操作，使种群中个体之间进行信息交换。  l适应度函数不受连续可微的约束，定义域可以任意设定，只要能够算出可以比较的正值。适合于解决复杂优化问题</td></tr></tbody></table><h2 id="SGA的改进算法"><a href="#SGA的改进算法" class="headerlink" title="SGA的改进算法"></a>SGA的改进算法</h2><table><thead><tr><th>对比项</th><th>SGA(单体遗传)</th><th>双倍体遗传</th><th>双种群遗传</th><th>自适应遗传</th></tr></thead><tbody><tr><td>染色体数目</td><td>每个基因有一条染色体</td><td>两个染色体：显性和隐性进行进化，</td><td>不限</td><td>不限</td></tr><tr><td>适用生物群体</td><td>简单植物</td><td>高级植物  大多数动物</td><td>不限</td><td>不限</td></tr><tr><td>特点</td><td>简洁</td><td>提供一种记忆以前有用基因块的能力</td><td>使用多种群同时进化，并交换种群之间优秀个体所携带的遗传信息，以打破群内平衡状态达到更高平衡</td><td>使交叉概率Pc 和变异概率Pm 能随适应度变化而自动改变</td></tr><tr><td>优点</td><td>易实现</td><td>延长了有用基因块的寿命，提高算法收敛能力；  l在变异概率低的情况下也保持种群的多样性  l动态跟踪能力强于SGA</td><td>本质是一种并行算法，可提升算法效率  l有利于算法跳出局部</td><td>可以方便确定Pc和Pm  易于找到每个问题  的最佳值</td></tr></tbody></table><h2 id="群体智能算法-产生背景"><a href="#群体智能算法-产生背景" class="headerlink" title="群体智能算法 - 产生背景"></a>群体智能算法 - 产生背景</h2><p>群智能算法（Swarm algorithms，SI）：受动物群体智能启发的算法。</p><p>群体智能：由简单个体组成的群落与环境以及个体之间的互动行为。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240718022158856.png" alt="image-20240718022158856"></p><h2 id="粒子群优化算法PSO-背景与思想"><a href="#粒子群优化算法PSO-背景与思想" class="headerlink" title="粒子群优化算法PSO - 背景与思想"></a>粒子群优化算法PSO - 背景与思想</h2><p>产生背景：粒子群优化（Particle Swarm Optimization, PSO）算法是由美国普渡大学的Kennedy和Eberhart于1995年提出，它的基本概念源于对鸟群觅食行为的研究。</p><p>核心思想：利用群体中的个体对信息的共享使整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的可行解。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233353007.png" alt="image-20240717233353007"></p><h2 id="粒子群优化算法PSO-场景"><a href="#粒子群优化算法PSO-场景" class="headerlink" title="粒子群优化算法PSO - 场景"></a>粒子群优化算法PSO - 场景</h2><p>场景：一群鸟在随机搜寻食物，在这个区域里只有一块食物，所有的鸟都不知道食物在哪里，但是它们知道当前的位置离食物还有多远。</p><p>鸟群觅物最优策略：最简单有效的就是搜寻目前离食物最近的鸟的周围区域。小鸟们的目标很简单，要在这一带找到食物最充足的位置安家、休养生息。试着想一下一群鸟在寻找食物，在这个区域中只有一只虫子，所有的鸟都不知道食物在哪。但是若：1）它们知道自己的当前位置距离食物有多远；2）同时它们知道离食物最近的鸟的位置。想一下这时候会发生什么？</p><p>鸟A：哈哈哈，原来虫子离我最近！</p><p>鸟B,C,D：我得赶紧往 A 那里过去看看！</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233408095.png" alt="image-20240717233408095"></p><p>同时各只鸟在位置不停变化时候，离食物的距离也不断变化，所以一定有过离食物最近的位置，这也是它们的一个参考。</p><p>某鸟：我刚刚的位置好像靠近了食物，我得往那里靠近！（鸟类的这几种想法是粒子群算法的核心）</p><h2 id="粒子群优化算法PSO-基本原理"><a href="#粒子群优化算法PSO-基本原理" class="headerlink" title="粒子群优化算法PSO - 基本原理"></a>粒子群优化算法PSO - 基本原理</h2><p>基于以上情况，鸟群在该地方的搜索策略如下：</p><p>1.每只鸟随机找一个地方，评估这个地方的食物量；</p><p>2.所有的鸟一起开会，选出这群鸟遇到的食物量最多的地方作为安家的候选点G（未来）；</p><p>3.每只鸟回顾自己的旅程，记住自己曾经去过的食物量最多的地方P（过去）；</p><p>4.每只鸟为找到食物量更多的地方，于是向着G飞行，但是呢，不知是出于选择困难症还是对P的留恋，或者是对 G的不信任，小鸟向G飞行时，时不时也向P飞行，其实它自己也不知道到底是G的食物多还是向P的食物多。毕竟G和P方向的食物都比较多；</p><p>5.另外还考虑鸟儿飞行的惯性，也就是鸟儿无法立即停下来，由于惯性它会下一次飞行到达点Q（当前）；</p><p>6.又到开会时间，如果小鸟们决定停止寻找，则会选择G来安家；否则继续2-&gt;3-&gt;4-&gt;5-&gt;6来寻找栖息地。</p><p>现在我们赋予鸟儿一些参数：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233425096.png" alt="image-20240717233425096"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233429133.png" alt="image-20240717233429133"></p><h2 id="粒子群优化算法PSO-效果"><a href="#粒子群优化算法PSO-效果" class="headerlink" title="粒子群优化算法PSO - 效果"></a>粒子群优化算法PSO - 效果</h2><p>PSO的优势：在于简单容易实现并且没有许多参数的调节。目前已被广泛应用于函数优化、神经网络训练、模糊系统控制以及其他遗传算法的应用领域。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233439585.png" alt="image-20240717233439585"></p><h2 id="蚁群算法ACO-产生背景"><a href="#蚁群算法ACO-产生背景" class="headerlink" title="蚁群算法ACO - 产生背景"></a>蚁群算法ACO - 产生背景</h2><p>F20世纪90年代，意大利科学家Marco Dorigo提出模拟自然界中蚂蚁觅食行为的ACO。</p><p>ACO具有“分布计算、信息正反馈和启发式搜索”特征，是一种启发式全局优化算法。</p><p>该算法在网络路由中的应用受到广泛关注，因具有“信息分布式性、动态性、随机性和异步性”等特点，能够满足网络路由的需求。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233457043.png" alt="image-20240717233457043"></p><ul><li>灵感：来源于蚂蚁在寻找食物过程中发现最短路径的行为。</li><li>信息素累积：蚂蚁在觅食时会在其经过的路径上释放一种称为信息素的物质，其他蚂蚁能够感知环境中的信息素并倾向于选择信息素浓度较高的路径。</li><li>正反馈机制：随着时间的推移，信息素的积累和挥发形成了一种正反馈机制，使得蚁群能够找到最短路径到达食物源。</li></ul><h2 id="蚁群算法ACO-核心思想"><a href="#蚁群算法ACO-核心思想" class="headerlink" title="蚁群算法ACO - 核心思想"></a>蚁群算法ACO - 核心思想</h2><p>蚁群算法的核心包括三个方面：</p><ul><li><p>蚂蚁利用信息素进行通信。蚂蚁会在经过的路径上释放信息素，其他蚂蚁能够感知环境中的信息素并选择信息素浓度较高的路径。</p></li><li><p>蚂蚁具有记忆行为。一个蚂蚁一般不会选择相同的路径两次。</p></li><li><p>蚂蚁具有集群活动。某条路径上通过的蚂蚁越多，路径上留下的信息素就越高，信息素还会挥发。</p><p>蚁群算法的一个重要原则是避障原则，即蚂蚁不能穿过障碍物。此外，蚂蚁在刚离开窝或者食物附近播散的信息素最多，信息素会自然挥发。蚁 群 算 法 最 早 用 来 求 解 旅 行 商 问 题（Traveling Salesperson Problem, TSP），并且表现出了很大的优越性。它具有分布式特性、鲁棒性强并且容易与其他算法结合，但是同时也存在收敛速度慢、容易陷入局部最优等缺点。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717233513476.png" alt="image-20240717233513476"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6专家系统</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章主要介绍专家系统的概念、原理，创建过程，并补充知识发现与数据挖掘内容</p><p><strong>重点：</strong>专家系统的工作原理和体系结构,知识获取的过程和模式</p><p><strong>难点：</strong>如何设计和创建专家系统</p><h2 id="AI第2次高峰-60年代-费根鲍姆"><a href="#AI第2次高峰-60年代-费根鲍姆" class="headerlink" title="AI第2次高峰(60年代) - 费根鲍姆"></a>AI第2次高峰(60年代) - 费根鲍姆</h2><p>1968年，爱德华·费根鲍（Edward Feigenbaum）提出首个专家系统DENDRAL，并对知识库给出了初步定义，这也孕育了后来的第二次人工智能浪潮。</p><p>该系统具有非常丰富的化学知识，可根据质谱数据帮助化学家推断分子结构。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717221945494.png" alt="image-20240717221945494"></p><p>专家系统（Expert Systems）是AI的一个重要分支，同自然语言理解，机器人学并列为AI的三大研究方向。</p><p>定义：使用人类专家推理的计算机模型来处理现实世界中需要专家作出解释的复杂问题，并得出与专家相同的结论。</p><p>可视作“知识库(knowledge base)”和“推理机 (inferencemachine)” 的结合。</p><h2 id="专家系统-起源、演进发展"><a href="#专家系统-起源、演进发展" class="headerlink" title="专家系统 - 起源、演进发展"></a>专家系统 - 起源、演进发展</h2><p>研究目的：不是研制AI专家代替人类专家，而是研制人类专家的AI助手</p><table><thead><tr><th>开始时间</th><th>突出成果、里程碑事件</th><th>发展程度</th></tr></thead><tbody><tr><td>20世纪60年代中期</td><td>•DENDRAL系统(斯坦福大学费根鲍 ）：  用于推断化学分子结构  •MYCSYMA系统（MIT）：  用于数学运算</td><td>单问题专业系统</td></tr><tr><td>20世纪70年代中期</td><td>•MYCIN系统（斯坦福大学）：  用于血液感染病诊断  •PROSPCTOR系统（斯坦福研究所）：  辅助矿藏探测</td><td>单学科专业系统</td></tr><tr><td>20世纪80年代中期</td><td>•RI(XCON)系统（DEC公司、卡内基梅隆大学）  辅助制定计算机系统硬件配置方案  •Siri系统（苹果公司）：  苹果公司研发的语音识别接口专家系统</td><td>多学科专业系统</td></tr><tr><td>2022年-未来</td><td>基于人工智能大模型，引入多学科协同求解与并行推理机制，可以调用海量现有知识库</td><td>大型多专家协作系统</td></tr></tbody></table><h2 id="专家系统-定义"><a href="#专家系统-定义" class="headerlink" title="专家系统 - 定义"></a>专家系统 - 定义</h2><p>常规定义：是一类具有专业知识和经验的计算机智能程序系统，能凭借人工智能中的知识表示和知识推理来解决复杂问题，基于海量知识库，在功能上可以达到甚至超越同领域中人类专家的水平。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222037836.png" alt="image-20240717222037836"></p><p>让计算机系统像人类专家一样根据自身知识对问题进行逻辑推理、解释说明、给出解决方案，帮助人类解决问题是理解专家系统的基本出发点。</p><h2 id="专家系统-特点"><a href="#专家系统-特点" class="headerlink" title="专家系统 - 特点"></a>专家系统 - 特点</h2><table><thead><tr><th>特点</th><th>内容</th></tr></thead><tbody><tr><td>具有专家水平的专业知识</td><td>这是专家系统的最大特点。专家系统具有的知识越丰富，质量越高，解决问题的能力就越强</td></tr><tr><td>能进行有效的推理</td><td>不仅能根据确定性知识进行推理，而且能根据不确定的知识进行推理，其解决问题的方法都是经验性的，仅以一定的可能性存在</td></tr><tr><td>具有启发性</td><td>能根据某些条件选定一个假设，使推理继续进行，能依据经验来对求解  的问题做出多个假设。</td></tr><tr><td>具有灵活性</td><td>知识库和推理机相互独立，保证了当知识库做适当修改和更新时，推理  机部分可以不变，使系统易于扩充，具有较大的灵活性。</td></tr><tr><td>具有透明性</td><td>具有解释机构，向用户解释推理过程，给出推理过程</td></tr><tr><td>具有交互性</td><td>具有较好的人机交互界面。1）需要与领域专家和知识工程师进行对话以获取知识；2）也需要不断地从用户那里获得所需的已知事实，并回答用户的询问。</td></tr></tbody></table><h2 id="专家系统与传统系统的比较"><a href="#专家系统与传统系统的比较" class="headerlink" title="专家系统与传统系统的比较"></a>专家系统与传统系统的比较</h2><table><thead><tr><th></th><th>传统系统</th><th>专家系统</th></tr></thead><tbody><tr><td>编程思想</td><td>数据结构+算法</td><td>知识+推理</td></tr><tr><td>知识存储方式</td><td>求解问题的知识隐含在程序中</td><td>知识存储在知识库，与推理机分离</td></tr><tr><td>处理对象</td><td>数值计算和数据处理</td><td>符号处理</td></tr><tr><td>解释说明功能</td><td>不具备解释说明功能</td><td>具备解释说明功能</td></tr><tr><td>答案的可靠性</td><td>数学逻辑准确的情况下能产生正确答案</td><td>通常产生正确答案  有时产生错误答案</td></tr><tr><td>解决问题能力</td><td>较弱</td><td>较强，更灵活，可处理具有挑战性的决策问题并提供解决方案</td></tr><tr><td>系统体系结构</td><td>算法+主程序</td><td>推理机+知识库+用户接口+解释器</td></tr></tbody></table><h2 id="专家系统-系统分类、特点与应用"><a href="#专家系统-系统分类、特点与应用" class="headerlink" title="专家系统-系统分类、特点与应用"></a>专家系统-系统分类、特点与应用</h2><table><thead><tr><th>专家系统类型</th><th>任务</th><th>特点</th><th>举例</th></tr></thead><tbody><tr><td>解释型</td><td>通过对已知信息和数据的分析  与解释，确定它们的含义</td><td>•处理的数据量大，不准确  •能从不完全的信息中得到解释，并从数据中做  出假设</td><td>语音理解、图像分析</td></tr><tr><td>预测型</td><td>通过对过去和现在的已知状况的分析，推断可能发生的情况</td><td>•处理的数据随时间变化  •有适应时间变化的动态模型</td><td>气象预报、军事预测</td></tr><tr><td>诊断型</td><td>根据观察到的数据来推测出某  个对象出现故障的原因</td><td>•了解诊断对象或客体各组成部分的特性以及它们之间的联系。  •能够向用户提供测量的数据，并从不确切信息  中得出尽可能正确的诊断。</td><td>医疗诊断、电子机械和软件故  障诊断</td></tr><tr><td>设计型</td><td>分解设计要求，求出能够满足设计问题约束的目标配置</td><td>•善于从多方面的要求中得到符合要求的设计结果  •系统需要检索较大的可能解空间</td><td>电路设计、土木建工设计</td></tr><tr><td>规划型</td><td>寻找某个能够达到给定目标的多做序列或寻找步骤</td><td>•目标可能是动态的或静态的，需要对未来做出预测  •处理好各个子目标的关系和不确定数据信息</td><td>机器人规划、交通运输调度</td></tr><tr><td>监视型</td><td>任务在于对系统、对象或过程进行不断观察，并把观察到的行为与其应当有的行为进行比较，以发现异常并作警报</td><td>•具有快速反应能力，在造成事故之前及时发出警报  •系统能够随时间和条件的变化而动态地处理输入信息</td><td>防空监视与警报、国家财政监控</td></tr><tr><td>…</td><td>…</td><td>•…</td><td>…</td></tr></tbody></table><h2 id="专家系统-未来趋势展望"><a href="#专家系统-未来趋势展望" class="headerlink" title="专家系统-未来趋势展望"></a>专家系统-未来趋势展望</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222119302.png" alt="image-20240717222119302"></p><h2 id="专家系统-基本结构、工作原理"><a href="#专家系统-基本结构、工作原理" class="headerlink" title="专家系统 - 基本结构、工作原理"></a>专家系统 - 基本结构、工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222134202.png" alt="image-20240717222134202"></p><h3 id="网络环境下的专家系统"><a href="#网络环境下的专家系统" class="headerlink" title="网络环境下的专家系统"></a>网络环境下的专家系统</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222145519.png" alt="image-20240717222145519"></p><h2 id="专家系统-工作机制"><a href="#专家系统-工作机制" class="headerlink" title="专家系统 - 工作机制"></a>专家系统 - 工作机制</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222159182.png" alt="image-20240717222159182"></p><h2 id="专家系统-逻辑组成和名词解释"><a href="#专家系统-逻辑组成和名词解释" class="headerlink" title="专家系统-逻辑组成和名词解释"></a>专家系统-逻辑组成和名词解释</h2><p>专家系统的组成思路：理解问题+思考问题+逻辑推理+给出并解释方案</p><table><thead><tr><th>名词</th><th>功能</th></tr></thead><tbody><tr><td>人机交互界面  （人机接口）</td><td>用户输入基本信息，系统输出推理结果及相关的解释</td></tr><tr><td>知识库</td><td>知识库中知识的质量和数量决  定着专家系统的质量水平</td></tr><tr><td>推理机</td><td>针对当前问题的条件或已知信息，反复匹配知识库中的规则</td></tr><tr><td>解释器</td><td>人机交互的一部分，向专家系统解释问题，向人解释专家系统的解决方案</td></tr><tr><td>综合数据库</td><td>存储推理过程中所需的原始数据、中间结果和最终结论</td></tr><tr><td>知识获取</td><td>扩充和修改知识库中的内容</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222216002.png" alt="image-20240717222216002"></p><h2 id="专家系统-知识获取的过程与模式"><a href="#专家系统-知识获取的过程与模式" class="headerlink" title="专家系统-知识获取的过程与模式"></a>专家系统-知识获取的过程与模式</h2><p>知识获取：指把领域专家解决问题的经验和知识，变为专家系统解决问题所需的专门知识。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222236901.png" alt="image-20240717222236901"></p><h2 id="专家系统的开发-明确开发前提、评价标准"><a href="#专家系统的开发-明确开发前提、评价标准" class="headerlink" title="专家系统的开发-明确开发前提、评价标准"></a>专家系统的开发-明确开发前提、评价标准</h2><p>明确需求：1）该问题是否能用专家系统解决？2）专家系统是否有市场需求？3）是否有开发专家系统的能力？</p><table><thead><tr><th>开发前提</th><th>说明</th></tr></thead><tbody><tr><td>开发专家系 统是可能的</td><td>主要依靠经验性知识，不需运用大量常识性知识就可解决的任务。  存在真正的领域专家。  有明确的开发目标，且任务不太难实现。</td></tr><tr><td>开发专家系统是合理的</td><td>具有较高经济收益  人类专家稀缺  人类专家经验不断丢失  危险场合需要专业知识</td></tr><tr><td>开发专家系统是合适的</td><td>本质：问题能通过符号操作和符号结构求解，且需要使用启发式知识、经验规则才能得到答案  l较为复杂，需要专家级知识才能解决  范围：所选任务大小可驾驭、任务有实用价值</td></tr></tbody></table><table><thead><tr><th>一个好的专家系统</th><th></th></tr></thead><tbody><tr><td>正确性</td><td>有用性</td></tr><tr><td>•设计思想正确  •设计方法正确  •开发工具正确</td><td>•推理结论、求解结果、咨询建议回复准确  •系统知识水平和可用范围易于拓展和更新  •问题求解能力强，运用场景和环境  广  •良好的人机交互  •运行可靠、易于维护、易于移植  •经济性</td></tr><tr><td>•测试目的、方法、条件正确  •测试结果、数据、记录正确</td><td></td></tr><tr><td>•推理结论、求解结果、咨询建议正确  •推理解释及可信度估  算正确  •知识库知识储备正确</td><td></td></tr></tbody></table><h2 id="专家系统的开发-了解开发工具与环境"><a href="#专家系统的开发-了解开发工具与环境" class="headerlink" title="专家系统的开发-了解开发工具与环境"></a>专家系统的开发-了解开发工具与环境</h2><p>专家系统开发环境（专家系统开发工具包）：可为专家系统的开发提供多种方便的构件，例如知识获取的辅助工具、适用各种不同知识结构的知识表示模式、各种不同的不确定 推理机制、知识库管理系统等。</p><table><thead><tr><th></th><th>骨架型</th><th>通用型</th><th>工具箱型</th></tr></thead><tbody><tr><td>面向AI的  语言  符号处理）</td><td>•以成功应用的专家系统为基础，去掉知识内容，保留推理机制，再补充相应知识库  •MYCIN系统是诊断血液感染病的专家系统，当抽去血液感染病的知识、增强知识获取中的人机对话功能后,就形成了开发工具,称为EMYCIN,利用它装入肺功能的有关知识,就构成了用于诊断肺功能的专家系统，称PUFF</td><td>•提供一种较为通用的知识表达语言，并为这类语言配置相应的推理机构  •OPS-5是面向产生式系统  的语言  •PROLOG语言是面向一阶谓词逻辑的语言，只要输入一阶谓词形式的知识和事实，系统就能自动求出若干个解</td><td>•提供几种专家系统的框架组件(如推理框架,黑板框架等),每个框架又由若干模块组成  •ADVISE、AGE、 EXPERT-EASE和  RULEMASTER等就属  于这一类工具</td></tr><tr><td>面向对象的语言</td><td>Python</td><td>C语言</td><td>C++语言</td></tr></tbody></table><h2 id="专家系统的开发过程"><a href="#专家系统的开发过程" class="headerlink" title="专家系统的开发过程"></a>专家系统的开发过程</h2><p>专家系统的开发过程：设计初始知识库-&gt;原型系统开发与实验-&gt;知识库的改进与归纳</p><p>知识库是专家系统中最重要的组成部分，其设计和建立过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222319601.png" alt="image-20240717222319601"></p><ul><li>原型系统的开发与实验：当知识表示方式确定后，即可建立原型系统，包括整个模型的典型知识，而且只涉及与实验有关的简单的任务和推理过程</li><li>知识库的改进和归纳：在原型系统的基础上，对知识库和推理机反复进行改进试验，归纳出更完善的结果，如此进行下去，不断提高专家系统的水平，直到满意</li></ul><h2 id="专家系统的设计分析—以KAS骨架系统为例"><a href="#专家系统的设计分析—以KAS骨架系统为例" class="headerlink" title="专家系统的设计分析—以KAS骨架系统为例"></a>专家系统的设计分析—以KAS骨架系统为例</h2><p>以KAS系统为骨架(骨架型开发),加上相应的知识库和推理算法,就可以较低成本完成简单专家系统的设计</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222340369.png" alt="image-20240717222340369"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222354622.png" alt="image-20240717222354622"></p><h2 id="知识发现与数据挖掘"><a href="#知识发现与数据挖掘" class="headerlink" title="知识发现与数据挖掘"></a>知识发现与数据挖掘</h2><ul><li>背景：随着计算机和网络技术的迅速发展，出现了以数据库和数据仓库为存储单位的海量数据，如何从海量数据中筛选出有价值的数据？</li><li>知识发现：从数据库中发现知识（knowledge discovering from database，KDD）,主 要流行于人工智能和机器学习领域。在研究中通常将知识发现和数据挖掘同时列出。</li><li>数据挖掘：从数据库中挖掘知识（data mining，DM），主要流行于数据库领域。</li><li>知识发现和数据挖掘目的：都是从海量的数据中抽取和简化一般规律或模式。</li></ul><h3 id="知识发现流程图："><a href="#知识发现流程图：" class="headerlink" title="知识发现流程图："></a>知识发现流程图：</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222433274.png" alt="image-20240717222433274"></p><h2 id="知识发现-流程解释"><a href="#知识发现-流程解释" class="headerlink" title="知识发现 - 流程解释"></a>知识发现 - 流程解释</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>数据选取：根据需要确定好目标数据</li><li>数据预处理：消除噪声，推导计算缺值数据消除重复记录，完成数据类型转换等</li><li>数据变换：消减数据维数，减少变量</li></ul><h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><ul><li>确定挖掘任务和目的： 进行数据总结、分类、聚类？关联规则或序列模式？</li><li>确定挖掘算法：考虑不同数据特点及用户实际需求</li></ul><h3 id="对结果的解释和评价"><a href="#对结果的解释和评价" class="headerlink" title="对结果的解释和评价"></a>对结果的解释和评价</h3><p>数据挖掘阶段发现的知识模式中是否存在冗余或无关的模式？</p><p>对知识发现的模式进行可视化：把结果转化为用户易懂的表示</p><h2 id="知识发现-任务概述"><a href="#知识发现-任务概述" class="headerlink" title="知识发现-任务概述"></a>知识发现-任务概述</h2><table><thead><tr><th>任务</th><th>解释</th></tr></thead><tbody><tr><td>数据总结</td><td>对数据进行浓缩，从数据泛化的角度来讨论，给出它的紧凑描述。把数据从底层抽象到高层次上</td></tr><tr><td>概念描述</td><td>从学习任务相关的数据中提取总体特征，具体分为特征描述（数据集的总体特征）和判别描述（多个类之间的差异）</td></tr><tr><td>分类</td><td>提出一个分类函数或分类模型（也常常称作分类器），该模型能把数据库中的数据项映射到给定类别中的一个，从而可以l立用于数据预测。</td></tr><tr><td>聚类</td><td>根据数据的不同特征，将其划分为不同的类。包括统计方法、机器学习方法、神经网络方法和面向数据库的聚类方法等</td></tr><tr><td>相关性分析</td><td>发现特征之间或数据之间的相互依赖关系</td></tr><tr><td>偏差分析</td><td>寻找观察结果与参照量之间的有意义的差别</td></tr><tr><td>建模</td><td>通过数据挖掘，构造出能描述一种活动、状态或现象的数学模型</td></tr></tbody></table><h2 id="知识发现-方法分类及概述"><a href="#知识发现-方法分类及概述" class="headerlink" title="知识发现-方法分类及概述"></a>知识发现-方法分类及概述</h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>统计方法</td><td>常见的统计方法有回归分析、判别分析、聚类分析及探索分析等。其统计方法就是从事物的外在数量表现去推断事物可能的规律性。</td></tr><tr><td>粗糙集</td><td>由 Zdziskew Pawlak 于1982年提出，粗糙集是一种具有三值隶属函数的模糊集，即是、不是、也许。常与规则归纳、分类和聚类方法结合起来使用。</td></tr><tr><td>可视化</td><td>把数据、信息和知识转化为图形的过程。使抽象的数据信息形象  化，直观地对大量数据进行考察分析。</td></tr><tr><td>传统机器学习</td><td>包括符号学习和链接学习</td></tr></tbody></table><h2 id="知识发现的对象"><a href="#知识发现的对象" class="headerlink" title="知识发现的对象"></a>知识发现的对象</h2><table><thead><tr><th>方法</th><th>内容</th></tr></thead><tbody><tr><td>数据库  （短期+分散）</td><td>当前研究比较多的是关系数据库（海量的数据经过代数处理后得到的数据库）的知识发现</td></tr><tr><td>数据仓库  （长期+集成）</td><td>数据挖掘为数据仓库提供深层次数据分析的手段，数据仓库为数  据挖掘提供经过良好预处理的数据源。</td></tr><tr><td>Web信息</td><td>Web知识发现主要分内容发现和结构发现。内容发现是指从Web文档的内容中提取知识;结构发现是指从Web文档的结构信息中推导知识。</td></tr><tr><td>图像和视频数据</td><td>图像和视频数据中也存在有用的信息。比如，地球资源卫星每天  都要拍摄大量的图像或录像。</td></tr></tbody></table><h2 id="数据挖掘-数据的定义、类型与组织形式"><a href="#数据挖掘-数据的定义、类型与组织形式" class="headerlink" title="数据挖掘 - 数据的定义、类型与组织形式"></a>数据挖掘 - 数据的定义、类型与组织形式</h2><p>定义：是指对客观事件进行记录并可以鉴别的符号，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合，是可识别的、抽象的符号。</p><table><thead><tr><th>对比项</th><th>数据</th><th>信息</th></tr></thead><tbody><tr><td>层次</td><td>微观</td><td>宏观</td></tr><tr><td>概念</td><td>是构成信息的基本单位，离散的数据没有任何实用价值。</td><td>由数据的有序排列组合而成，传达给读者某个概念方法等。</td></tr></tbody></table><p>价值：Data被称为“未来的石油”；人类进入了Data时代（马云）。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222545683.png" alt="image-20240717222545683"></p><p>类型：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222600056.png" alt="image-20240717222600056"></p><ul><li>组织形式：计算机系统中的数据组织形式主要有两种，即文件和数据库。</li><li>文件：计算机系统中的很多数据都是以文件形式存在的，比如一个WORD文件、一个文本文件、一个网页文件、一个图片文件等等</li><li>数据库：计算机系统中另一种非常重要的数据组织形式就是数据库，数据库已经成为计算机软件开发的基础和核心。</li></ul><h2 id="数据挖掘-数据的演进、大数据出现"><a href="#数据挖掘-数据的演进、大数据出现" class="headerlink" title="数据挖掘 - 数据的演进、大数据出现"></a>数据挖掘 - 数据的演进、大数据出现</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222619027.png" alt="image-20240717222619027"></p><h2 id="大数据时代-第三次信息化浪潮"><a href="#大数据时代-第三次信息化浪潮" class="headerlink" title="大数据时代-第三次信息化浪潮"></a>大数据时代-第三次信息化浪潮</h2><p>根据IBM前首席执行官郭士纳的观点，IT领域每隔15年就会迎来一次重大变革。</p><p>三次信息化浪潮</p><table><thead><tr><th>信息化浪潮</th><th>发生时间</th><th>标志</th><th>解决问题</th><th>代表企业</th></tr></thead><tbody><tr><td>第一次浪潮</td><td>1980年前后</td><td>个人计算机</td><td>信息处理</td><td>Intel、AMD、IBM、苹果、  微软、联想、戴尔、惠普等</td></tr><tr><td>第二次浪潮</td><td>1995年前后</td><td>互联网</td><td>信息传输</td><td>雅虎、谷歌、阿里巴巴、百度、腾讯等</td></tr><tr><td>第三次浪潮</td><td>2010年前后</td><td>物联网、云计算和大数据</td><td>信息爆炸</td><td>将涌现出一批新的市场标杆  企业</td></tr></tbody></table><h2 id="大数据时代-数据产生方式的变革、发展历程"><a href="#大数据时代-数据产生方式的变革、发展历程" class="headerlink" title="大数据时代-数据产生方式的变革、发展历程"></a>大数据时代-数据产生方式的变革、发展历程</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222658957.png" alt="image-20240717222658957"></p><h3 id="大数据发展的三个阶段"><a href="#大数据发展的三个阶段" class="headerlink" title="大数据发展的三个阶段"></a>大数据发展的三个阶段</h3><table><thead><tr><th>阶段</th><th>时间</th><th>内容</th></tr></thead><tbody><tr><td>第一阶段（萌芽期）</td><td>上世纪90年代至本世纪初</td><td>随着数据挖掘理论和数据库技术的逐步成熟，一批商业智能工具和知识管理技术开始被应用，如数据仓库、专家系统、知识管理系统等。</td></tr><tr><td>第二阶段（成熟期）</td><td>本世纪前  10年</td><td>Web2.0应用迅猛发展，非结构化数据大量产生，传统处理方法难以应对，带动了大数据技术的快速突破，大数据解决方案逐渐走向成熟，形成了并行计算与分布式系统两大核心技术，谷歌的  GFS和MapReduce等大数据技术受到追捧，Hadoop平台开始大行其道</td></tr><tr><td>第三阶段（大规模应用期）</td><td>2010年以  后</td><td>大数据应用渗透各行各业，数据驱动决策，信息社会智能化程度大幅提高</td></tr></tbody></table><h2 id="大数据时代-概念与特征"><a href="#大数据时代-概念与特征" class="headerlink" title="大数据时代 - 概念与特征"></a>大数据时代 - 概念与特征</h2><p>定义：大数据（big data）是这样的数据集合：数据量增长速度极快，用常规的数据工具无法在一定的时间内进行采集、处理、存储和计算的数据集合。</p><p>大数据技术将被设计用于在成本可承受（economically）的条件下，通过非常快速（velocity）的采集、发现和分析，从大数据量（volumes）、多类别（variety）的数据中提取价值（value），将引起IT 领域新一轮的技术与架构的变革。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222723981.png" alt="image-20240717222723981"></p><h2 id="大数据技术-发展历史"><a href="#大数据技术-发展历史" class="headerlink" title="大数据技术 - 发展历史"></a>大数据技术 - 发展历史</h2><h3 id="数据仓库出现"><a href="#数据仓库出现" class="headerlink" title="数据仓库出现"></a>数据仓库出现</h3><p>20世纪90年代，商业智能（BI）诞生，它将企业已有的业务数据转化成为知识，帮助管理人员进行经营决策。BI离不开数据分析，它聚合多个业务系统的数据（比如交易系统、仓储系统），再进行大数据量的范围查询。而传统数据库都是面向单一业务的增删改查，无法满足此需求，这样就促使了数据仓库概念的出现。数据仓库第一次明确了数据分析的应用场景，并采用单独解决方案去实现，不依赖业务数据库。</p><h3 id="Hadoop诞生-数据湖"><a href="#Hadoop诞生-数据湖" class="headerlink" title="Hadoop诞生(数据湖)"></a>Hadoop诞生(数据湖)</h3><ul><li>2000年左右，PC互联网时代带来海量信息，数据仓库无法支撑起互联网时代的BI。</li><li>2003 年， Google 公布 3 篇鼻祖型论文（「3驾马车」），奠定理论基础。</li><li>2005年， Yahoo资助Hadoop 按照这3篇论文进行了开源实现，正式拉开序幕。</li><li>2010年的Hadoop世界大会上，提出「数据湖」的概念。企业可基于Hadoop构建数据湖，将数据作为核心资产。由此，数据湖拉开了Hadoop商业化的大幕。</li></ul><h3 id="数据工厂时代-大数据平台兴起"><a href="#数据工厂时代-大数据平台兴起" class="headerlink" title="数据工厂时代 (大数据平台兴起)"></a>数据工厂时代 (大数据平台兴起)</h3><p>商用Hadoop包含上10种技术，数据研发流程非常复杂。数据需求开发， 涉及到 “数据抽取、数据存储、数据处理、构建数据仓库、多维分析、数据可视化”等一整套流程。大大制约大数据技术的普及。</p><p>此时，大数据平台（平台即服务的思想，PaaS）应运而生，它是面向研发场景的全链路解决方案，大大提高数据的研发效率，让数据像在流水线上一样快速完成加工，原始数据变成指标，出现在各个报表或者数据产品中。</p><h3 id="数据价值时代-数据中台"><a href="#数据价值时代-数据中台" class="headerlink" title="数据价值时代 (数据中台)"></a>数据价值时代 (数据中台)</h3><p>2016年左右，移动互联网时代催生大量大数据应用场景。</p><p>此时开始暴露出新问题：为快速实现业务需求，烟囱式开发模式导致了不同业务线的数据是完全割裂的，这样造成了大量数据指标的重复开发，不仅研发效率低、同时还浪费了存储和计算资源，使得大数据的应用成本越来越高。</p><p>阿里巴巴此时喊出「数据中台」的概念，提倡「One Data，One Service」，其核心是：避免数据重复计算，通过数据服务化，提高数据共享能力，赋能业务。</p><h2 id="大数据-关键技术"><a href="#大数据-关键技术" class="headerlink" title="大数据 - 关键技术"></a>大数据 - 关键技术</h2><p>定义：是指伴随着大数据的采集、存储、分析和结果呈现，而使用的一系列数据处理技术；是使用非传统的工具来对大量的“结构化、半结构化、非结构化”数据进行处理，从而获得预测结果的一系列数据处理和分析技术。</p><table><thead><tr><th>技术层面</th><th>功能</th></tr></thead><tbody><tr><td>数据采集</td><td>利用ETL工具将分布的、异构数据源中的数据如关系数据、平面数据文件等，抽取到临时中间层后进行清洗、转换、集成，最后加载到数据仓库或数据集市中，成为联机分析处理、数据挖掘的基础；  l或者也可以把实时采集的数据作为流计算系统的输入，进行实时处理分析</td></tr><tr><td>数据存储和管理</td><td>利用分布式文件系统、数据仓库、关系数据库、NoSQL数据库、云数据库等，实现对结构化、半结构化和非结构化海量数据的存储和管理</td></tr><tr><td>数据处理与分析  （数据挖掘）</td><td>利用分布式并行编程模型和计算框架，结合机器学习和数据挖掘算法，实现对海量数据的处理和分析；  l对分析结果进行可视化呈现，帮助人们更好地理解数据、分析数据</td></tr><tr><td>数据隐私和安全</td><td>在从大数据中挖掘潜在的巨大商业价值和学术价值的同时，构建隐私数据保护  体系和数据安全体系，有效保护个人隐私和数据安全。</td></tr></tbody></table><h2 id="数据中心-起源与发展"><a href="#数据中心-起源与发展" class="headerlink" title="数据中心 - 起源与发展"></a>数据中心 - 起源与发展</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717222942081.png" alt="image-20240717222942081"></p><h2 id="大数据-影响"><a href="#大数据-影响" class="headerlink" title="大数据-影响"></a>大数据-影响</h2><p>图灵奖获得者、著名数据库专家Jim Gray博士观察并总结人类自古以来，在科学研究上，先后历经了“实验、理论、计算和数据”四种范式。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717223004305.png" alt="image-20240717223004305"></p><p>新的决策方式：在社会发展方面，大数据决策逐渐成为一种新的决策方式，大数据应用有力促进了信息技术与各行业的深度融合，大数据开发大大推动了新技术和新应用的不断涌现。</p><p>新的职业：就业方面，大数据兴起使得数据科学家成为热门职业。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717223015384.png" alt="image-20240717223015384"></p><p>在思维方式方面，大数据完全颠覆了传统的思维方式：</p><ul><li>全样而非抽样</li><li>效率而非精确</li><li>相关而非因果</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5搜索求解策略</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章首先介绍搜索求解的概念、重要性、分类、应用场景；然后对搜索进行形式化描述；最后介绍两类搜索，即盲目搜索和启发式搜索，为后面介绍智能算法奠定基础。</p><h2 id="搜索的定义与重要性"><a href="#搜索的定义与重要性" class="headerlink" title="搜索的定义与重要性"></a>搜索的定义与重要性</h2><ul><li>人工智能经典三大基本技术为：知识表示、推理、搜索策略。</li><li>搜索定义：根据问题的实际情况寻找可用知识，并利用已知条件（知识），构造出一条代价较小的推理路线，寻求解决问题的办法的过程。</li><li>重要性:搜索直接关系到智能系统的性能与运行效率；搜索技术渗透在各种人工智能系统中。专家系统、自然语言理解、自动程序设计、模式识别、机器学习、信息检索和博弈等领域都广泛使用搜索技术。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717214903996.png" alt="image-20240717214903996"></p><h2 id="搜索应用场景-案例"><a href="#搜索应用场景-案例" class="headerlink" title="搜索应用场景 - 案例"></a>搜索应用场景 - 案例</h2><ul><li>博弈游戏（五字棋等）</li><li>旅行路径规划问题</li><li>芯片布线问题</li><li>机器人导航问题</li><li>蛋白质设计问题</li><li>…</li></ul><h3 id="汽车导航（路径规划）"><a href="#汽车导航（路径规划）" class="headerlink" title="汽车导航（路径规划）"></a>汽车导航（路径规划）</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717214928750.png" alt="image-20240717214928750"></p><h2 id="搜索问题-案例（京东物流亚洲一号）"><a href="#搜索问题-案例（京东物流亚洲一号）" class="headerlink" title="搜索问题 - 案例（京东物流亚洲一号）"></a>搜索问题 - 案例（京东物流亚洲一号）</h2><p>京东物流亚洲一号（无人仓储）</p><ul><li>无人仓：2018年5月24日，京东首次公开位于上海嘉定区的亚洲一号无人仓。物流机器人占地40000m2 ，主要由仓储和分拣两部分组成，仓内机器人包括AGV（自动分拣运输机）叉车、六轴机器人、自动供包机器人等不同工种。在分拣区，“小红人” 井然有序进行取货、扫码、运输、投货。依靠视觉识别和智能导航技术，“小红人”能以最优线路完成商品的拣选。</li><li>智慧大脑：而操控全局的智能控制系统是京东自主研发的“智慧”大脑，仓库管理、控制、分拣和配送信息系统等均由京东总集成。</li><li>降本增效：与传统的仓库相比，无人仓可以大幅度减轻工人的劳动强度，且效率是传统仓库的10倍。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215121611.png" alt="image-20240717215121611"></p><h2 id="搜索研究案例：迷宫找路"><a href="#搜索研究案例：迷宫找路" class="headerlink" title="搜索研究案例：迷宫找路"></a>搜索研究案例：迷宫找路</h2><p>当我们要设计一个通用AI，最需要（或者说唯一需要）考虑的是怎么让它有能力做出像人一样的决策。</p><p>怎么从A走到B？（黑色可走，灰色不通）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215141930.png" alt="image-20240717215141930"></p><p>如果是人看着地图来走，当然很简单，正常人都能迅速找到下面这条红色的路径来:</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215147975.png" alt="image-20240717215147975"></p><p>但是想一想，在C、D、E、F这几个点，明明还有其他选择，为什么你坚定选择了图上红线的方向呢？</p><p>显然，因为你一眼就看到了所有的可能路径，并且迅速在其中找到了最短的那条路。</p><h2 id="搜索研究案例：迷宫找路-1"><a href="#搜索研究案例：迷宫找路-1" class="headerlink" title="搜索研究案例：迷宫找路"></a>搜索研究案例：迷宫找路</h2><p>复杂问题来了：如果是下面这张迷宫呢？靠人眼很难一眼就看出怎么走最好。</p><p>怎么办？你需要用笔去试探从A开始往B走的每个节点的所有可能，然后走到死路再去尝试其他可能，等最终找到了一条到B的通路，你也无法判断这条路是不是最短的路。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215202475.png" alt="image-20240717215202475"></p><h2 id="搜索研究案例：迷宫找路（总结）"><a href="#搜索研究案例：迷宫找路（总结）" class="headerlink" title="搜索研究案例：迷宫找路（总结）"></a>搜索研究案例：迷宫找路（总结）</h2><h3 id="想一想，如果要设计一个和走迷宫的人一样的AI，它需要具备什么知识技能？"><a href="#想一想，如果要设计一个和走迷宫的人一样的AI，它需要具备什么知识技能？" class="headerlink" title="想一想，如果要设计一个和走迷宫的人一样的AI，它需要具备什么知识技能？"></a>想一想，如果要设计一个和走迷宫的人一样的AI，它需要具备什么知识技能？</h3><ul><li>它要知道A和B在哪里。</li><li>它需要知道A和B之间所有的路况。（哪里是墙，哪里是路）</li><li>它需要知道在每一个有选择的路口，它应该往哪个方向走。</li></ul><h3 id="搜索策略需要解决的基本问题"><a href="#搜索策略需要解决的基本问题" class="headerlink" title="搜索策略需要解决的基本问题"></a>搜索策略需要解决的基本问题</h3><ul><li>是否一定能找到一个解。</li><li>找到的解是否是最佳解。</li><li>时间与空间复杂度如何。</li><li>是否终止运行或是否会陷入一个死循环。</li></ul><h3 id="重要的是做选择的能力"><a href="#重要的是做选择的能力" class="headerlink" title="重要的是做选择的能力"></a>重要的是做选择的能力</h3><p>当我们要设计一个通用AI，最需要（或者说唯一需要）考虑的是怎么让它有能力做出像人一样的决策。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215227510.png" alt="image-20240717215227510"></p><h2 id="搜索问题-形式化描述"><a href="#搜索问题-形式化描述" class="headerlink" title="搜索问题 - 形式化描述"></a>搜索问题 - 形式化描述</h2><p>一个搜索问题可以用5个组成部分形式化描述。</p><p>问题的解：就是从初始状态到目标状态的一组行动序列。</p><p>最优解：所有解里面代价最小的解即为最优解。</p><ul><li>状态空间：对智能体和环境当前情形的描述。（初始状态、目标状态）</li><li>动作：从当前时刻所处状态转移到下一时刻所处状态所进行操作。</li><li>状态转移：智能体选择了一个动作之后，其所处状态的相应变化。</li><li>路径&#x2F;代价：一个完整的状态序列。该状态序列被一系列操作所连接。如一条完整的路径。</li><li>目标测试：评估当前状态是否为所求解的目标状态。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215252204.png" alt="image-20240717215252204"></p><h2 id="状态空间的表示法"><a href="#状态空间的表示法" class="headerlink" title="状态空间的表示法"></a>状态空间的表示法</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215312641.png" alt="image-20240717215312641"></p><ul><li>S：状态集合。</li><li>O：操作算子集合。</li><li>S0：包含问题的初始状态，是S的非空子集。</li><li>G：若干具体状态或满足某些性质的路径信息描述。</li></ul><h2 id="状态空间的表示法-1"><a href="#状态空间的表示法-1" class="headerlink" title="状态空间的表示法"></a>状态空间的表示法</h2><p>求解路径：从S0节点到G节点的路径。</p><p>状态空间解：一个有限的操作算子序列。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215329644.png" alt="image-20240717215329644"><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215332932.png" alt="image-20240717215332932"></p><p>状态集S:所有的八数码摆法</p><p>操作算子集O：   将空格向上移动Up</p><pre><code>将空格向下移动Down将空格向左移动Left将空格向右移动Right</code></pre><h2 id="状态空间的图描述"><a href="#状态空间的图描述" class="headerlink" title="状态空间的图描述"></a>状态空间的图描述</h2><p>状态空间可用有向图来描述，图的节点表示问题的状态，图的弧表示状态之间的关系，即操作算子。</p><p>状态空间图对问题的求解就相当于在有向图上寻找一条从初始状态节点到目标状态节点的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215354149.png" alt="image-20240717215354149"></p><h2 id="搜索的分类"><a href="#搜索的分类" class="headerlink" title="搜索的分类"></a>搜索的分类</h2><p>根据搜索过程是否使用启发式信息分为盲目搜索与启发式搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215408250.png" alt="image-20240717215408250"></p><h2 id="宽度优先搜索策略"><a href="#宽度优先搜索策略" class="headerlink" title="宽度优先搜索策略"></a>宽度优先搜索策略</h2><p>宽度优先搜索（BFS）:从节点S0开始，对它的后续节点按从左至右搜索，然后再对下一级的后续节点按从左至右搜索，依次下去，直到搜索到目的状态。</p><h3 id="宽度优先搜索的性质"><a href="#宽度优先搜索的性质" class="headerlink" title="宽度优先搜索的性质"></a>宽度优先搜索的性质</h3><ul><li>当问题有解时，一定能找到解，而且能得到最优解</li><li>方法与问题无关，具有通用性</li><li>搜索节点数增加很快，所需空间和花费时间多</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215420974.png" alt="image-20240717215420974"></p><h2 id="宽度优先搜索策略-1"><a href="#宽度优先搜索策略-1" class="headerlink" title="宽度优先搜索策略"></a>宽度优先搜索策略</h2><p>使用宽度优先搜索解决八数码问题</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215430108.png" alt="image-20240717215430108"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215432912.png" alt="image-20240717215432912"></p><h2 id="深度优先搜索策略"><a href="#深度优先搜索策略" class="headerlink" title="深度优先搜索策略"></a>深度优先搜索策略</h2><p>深度优先搜索（DFS）:从节点S0开始，沿一个方向一直扩展下去，直到达到一定的深度。如果未找到目的状态或无法再扩展时，便回溯到另一条路径继续上述方法进行搜索。</p><h3 id="深度优先搜索的性质"><a href="#深度优先搜索的性质" class="headerlink" title="深度优先搜索的性质"></a>深度优先搜索的性质</h3><ul><li>一般不能保证找到最优解</li><li>当深度限制不合理时，可能找不到解</li><li>方法与问题无关，具有通用性</li></ul><p>最坏情况下，搜索空间等同于穷举</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215538970.png" alt="image-20240717215538970"></p><h2 id="深度优先搜索策略-1"><a href="#深度优先搜索策略-1" class="headerlink" title="深度优先搜索策略"></a>深度优先搜索策略</h2><p>使用深度优先搜索解决八数码问题(深度界限为4）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215549395.png" alt="image-20240717215549395"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215552045.png" alt="image-20240717215552045"></p><h2 id="回溯策略"><a href="#回溯策略" class="headerlink" title="回溯策略"></a>回溯策略</h2><p>带回溯策略的搜索：当搜索到某一节点的时候，如果我们发现当前节点（及其子节点）并不是目标节点时，回退到原来的节点继续搜索，直到找到目标节点。深度优先搜索具有回溯的思想。</p><p>OPEN表：用来存放将要扩展的节点</p><p>CLOSED表：用来存放已经扩展的节点</p><table><thead><tr><th>OPEN表</th><th>CLOSED表</th></tr></thead><tbody><tr><td>{A}</td><td>{ }</td></tr><tr><td>{B，C}</td><td>{A}</td></tr><tr><td>{D，E，C}</td><td>{A，B}</td></tr><tr><td>{E，G，C}</td><td>{A，B，D}</td></tr><tr><td>{G，C}</td><td>{A，B，D，E}</td></tr><tr><td>{C，F}</td><td>{A，B，D，E，G}</td></tr><tr><td>{F}</td><td>{A，B，D，E，G，C}</td></tr><tr><td>{ }</td><td>{A，B，D，E，G，C，F}</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215609376.png" alt="image-20240717215609376"></p><h2 id="回溯策略-1"><a href="#回溯策略-1" class="headerlink" title="回溯策略"></a>回溯策略</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215638735.png" alt="image-20240717215638735"></p><p>图搜索算法（宽度优先、深度优先、最好优先搜索等）都有回溯的思想。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215646052.png" alt="image-20240717215646052"></p><h2 id="启发信息"><a href="#启发信息" class="headerlink" title="启发信息"></a>启发信息</h2><ul><li>概念：与具体问题求解过程有关的，并可指导搜索过程朝着最有希望的方向前进的控制信息。</li><li>作用：启发信息的启发能力越强，扩展的无用节点就越少。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="按运用的方法分类"><a href="#按运用的方法分类" class="headerlink" title="按运用的方法分类"></a>按运用的方法分类</h4><ul><li>陈述性启发信息：用于更准确、更精炼地描述状态</li><li>过程性启发信息：用于构造操作算子</li><li>控制性启发信息：表示控制策略的知识</li></ul><h4 id="按作用分类："><a href="#按作用分类：" class="headerlink" title="按作用分类："></a>按作用分类：</h4><ul><li>用于扩展节点的选择，决定应先扩展哪一个节点，避免盲目扩展。</li><li>用于生成节点的选择，决定要生成哪些后继节点，以免盲目生成过多无用的节点。</li><li>用于删除节点的选择，决定删除哪些无用节点，以免造成进一步的时空浪费。</li></ul><h2 id="启发式搜索策略"><a href="#启发式搜索策略" class="headerlink" title="启发式搜索策略"></a>启发式搜索策略</h2><p>启发式搜索策略：利用与问题有关的启发信息引导搜索。</p><p>启发式图搜索策略的特点:重排OPEN表，选择最有希望的节点加以扩展。</p><p>运用启发式策略的两种基本情况：一个问题由于存在问题陈述和数据获取的模糊性，可能会使它没有一个确定的解。虽然一个问题可能有确定解，但是其状态空间特别大，搜索中生成扩展的状态数会随着搜索的深度呈指数级增长。</p><p>启发式策略的作用：通过引入估价函数值f(n) &#x3D; g(n) + h(n)，对状态空间中的每一步进行评估，获得最有可能在最终路线上的下一个点。因为估价函数的存在，每一步会优先向终点方向进行移动。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215842541.png" alt="image-20240717215842541"></p><h2 id="估价函数-引入的必要性分析"><a href="#估价函数-引入的必要性分析" class="headerlink" title="估价函数 - 引入的必要性分析"></a>估价函数 - 引入的必要性分析</h2><p>估价函数（evaluation function）：评估节点“希望”程度或总代价的量度。</p><p>估价函数值f(n)：从初始节点经过n节点到达目的结点的路径的最小代价估计值，其一般形式是：f(n) &#x3D; g(n) + h(n)</p><blockquote><p>g(n)：起点到当前位置的实际路径长度，即从初始节点S0到节点n的实际代价；</p><p>h(n)：从节点n到目标节点Sg的最优路径的估计代价，称为启发函数。</p></blockquote><p>讨论启发函数h(n)取值对算法的影响</p><blockquote><p>h(n)比重大：可以有效降低搜索工作量，但也会缩小探索范围，可能导致找不到最优解。当h(n)越复杂，即约束的条件越多，耗费的时间就越多；而减少约束条件，则可能得到的并不是最优路线。</p><p>h(n)比重小：一般导致工作量加大，极限情况下变为盲目搜索，搜索空间会比较大，但容易找到最优解。h(n)&#x3D;0时，意味着此时是盲目搜索。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215856820.png" alt="image-20240717215856820"></p><h2 id="A-搜索算法"><a href="#A-搜索算法" class="headerlink" title="A*搜索算法"></a>A*搜索算法</h2><p>满足以下条件的算法为A*搜索算法：</p><ul><li>使用估价函数f(n)&#x3D;g(n)+h(n)对OPEN表中的节点按从小到大排序。</li><li>代价函数g(n)是对g(n)的估计，且g(n)&gt;0。</li><li>h(n)是h(n)的下界，即对所有的节点n均有：h(n)≤h(n)。</li></ul><blockquote><p>优点：如果某一问题有解，那么利用A搜索算法对该问题进行搜索则一定能搜索到解，并且一定能搜索到最优的解而结束。</p><p>缺点：A算法需要存储搜索过程中的节点信息，因此当搜索的状态空间较大时，它需要占用较大的存储空间。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717215917946.png" alt="image-20240717215917946"></p><h2 id="各种搜索算法对比"><a href="#各种搜索算法对比" class="headerlink" title="各种搜索算法对比"></a>各种搜索算法对比</h2><table><thead><tr><th>算法名称</th><th>核心思想</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>广度优先算法</td><td>不考虑每一步的移动成本，不断拓展边界，直到边界到达目标点</td><td>通常耗费大量时间</td><td>较大</td></tr><tr><td>Dijkstra算法</td><td>以BFS为基础，只考虑每一点的总移动成本</td><td>通常耗费大量时间</td><td>一般</td></tr><tr><td>贪婪优先搜索</td><td>只考虑到达终点的估计距离，能较快寻找到目标</td><td>无法保证路线全局最优</td><td>一般</td></tr><tr><td>A*搜索算法</td><td>以BSF为基础，综合考虑了总移动成本和到达终点的估计距离</td><td>具有更好的时间性能  l巧妙地叠加了“Dijkstra算法的成本最低”和“贪婪优先搜索的速度最优”</td><td>需要存储搜索过程中的节点信息  当搜索的状态空间较大时，需占用较大存储空间</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.不确定性推理方法</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>1）本章先讨论不确定性推理中的基本问题；2）然后介绍基于概率论的有关理论发展起来的不确定性推理方法，主要介绍“贝叶斯方法、可信度方法、证据理论等”；3）最后介绍目前在专家系统、信息处理、自动控制等领域广泛应用的依据模糊理论发展起来的模糊推理方法。</p><h2 id="不确定性-概念与重要性"><a href="#不确定性-概念与重要性" class="headerlink" title="不确定性 - 概念与重要性"></a>不确定性 - 概念与重要性</h2><ul><li>不确定性(Uncertainty)：事先不能准确知道某件事件或某种决策的发生、过程或结果。</li><li>现实世界中的大多数问题是不精确、非完备的。对于这些问题，若采用精确性推理方法显然无法解决。</li><li>不确定性是智能问题的本质特征，智能主要反映在求解不确定性问题的能力上。无论是人类智能还是人工智能，都离不开不确定性的处理。因此，“不确定性推理模型”是人工智能和专家系统的一个核心研究课题。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717204852680.png" alt="image-20240717204852680"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717204856562.png" alt="image-20240717204856562"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717204900012.png" alt="image-20240717204900012"></p><blockquote><p>不确定性广泛出现在“哲学、统计学、经济学、金融学、保险学”等领域。</p></blockquote><h2 id="不确定性的分类"><a href="#不确定性的分类" class="headerlink" title="不确定性的分类"></a>不确定性的分类</h2><table><thead><tr><th>类型</th><th>分类举例</th></tr></thead><tbody><tr><td>不确定性  （随机性）  重点</td><td>事情的出现是随机的，无法明确或提前预知。  l例如，(这场球赛甲队取胜,  0.9)。这里的0.9就是命题  “这场球赛甲队取胜”的可信度。  它表示“这场球赛甲队取胜”这个命题为真（即这个事件发生）的可能性程度是0.9。</td></tr><tr><td>不准确性  （模糊性）</td><td>信息描述模糊，知识的外界不清晰。或对某个问题域进行划分时，可能无法找到一个清晰的标准。  例如，用三元组（张三，体型，(胖，0.9）)表示命题  “张三比较胖”，其中的0.9就代替“比较”而刻划了张三“胖”的程度。</td></tr><tr><td>不完备性  (不完全性)</td><td>内容不完整：可能来源于获取知识时观测不充分、设备不精确。  知识结构不完备：可能因为人的认识能力等原因，  造成对解决某个特定问题的背景和结构认识不全。</td></tr><tr><td>不一致性</td><td>指知识随时间的变化而变化的特性，人类的知识是无限发展的，不可能停留在某个水平。</td></tr><tr><td>不协调性…</td><td>知识内在的矛盾，不协调的程度可以依次为冗余、  干扰、冲突等。</td></tr></tbody></table><h3 id="随机性举例"><a href="#随机性举例" class="headerlink" title="随机性举例"></a>随机性举例</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717204944313.png" alt="image-20240717204944313"></p><h3 id="模糊性举例"><a href="#模糊性举例" class="headerlink" title="模糊性举例"></a>模糊性举例</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717204947949.png" alt="image-20240717204947949"></p><h2 id="不确定性推理-从确定性推理全过程说起"><a href="#不确定性推理-从确定性推理全过程说起" class="headerlink" title="不确定性推理 - 从确定性推理全过程说起"></a>不确定性推理 - 从确定性推理全过程说起</h2><p>不确定性推理：从不确定性的初始证据出发，通过运用不确定性的知识，采用不确定性3推理方法或策略，最终推出具有一定程度的不确定性但却是合理或者近乎合理4的结论的思维过程。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205106294.png" alt="image-20240717205106294"></p><h2 id="不确定推理-三大基本问题与解决方法"><a href="#不确定推理-三大基本问题与解决方法" class="headerlink" title="不确定推理 - 三大基本问题与解决方法"></a>不确定推理 - 三大基本问题与解决方法</h2><table><thead><tr><th>三个基本问题</th><th>问题内容</th><th>方法</th><th></th></tr></thead><tbody><tr><td>不确定知识  的表示</td><td>证据+规则  +结论</td><td>指采用什么方法描述不确定性；  这是解决不确定性推理的关键一步。</td><td>数值表示：便于计算、比较。  非数值的语义表示方法：是一种定性的描述，  以便较好地解决不确定性问题。</td></tr><tr><td>不确定推理的过程</td><td>推理过程计算（由因推到果，原因包括证据和规则）</td><td>不确定性的传递与更新（即获得新信息的过程）：1）不确定性的传递算法：在每一步推理中,如何把证据及规则的不确定性传递给结论。2）组合证据的不确定性计算。  结论的不确定性合成：用不同的知识进行推理，得到相同结论，但其不确定性的程度却不相同。</td><td>在原始证据和规则都不确定性的基础上，提供一种计算规则，或定义一组函数，求出结论的不确定性度量。</td></tr><tr><td>计算内容的语义解释问题</td><td>指上述“知识表示和推理计算”的  含义是什么？即对它们进行解释。  目前在AI中，表达不确定性问题主义的主要数学工具：概率论、模糊数学等。</td><td>概率论：研究和处理随机现象，事件本身有明确的含义，只是由于条件不充分，使得在条件和事件之间不能出现确定性的因果关系。  模糊数学：研究和处理模糊现象，概念本身就没有明确的外延，一个对象是否符合这个概念是难以确定的  (属于模糊的)。</td><td></td></tr><tr><td>不确定性的度量</td><td>证据+规则  +结论</td><td>可采用各种数学工具</td><td>三值、多值逻辑，非单调逻辑  概率论、模糊逻辑</td></tr></tbody></table><h2 id="基本问题的解决及对比-确定性-vs-不确定性"><a href="#基本问题的解决及对比-确定性-vs-不确定性" class="headerlink" title="基本问题的解决及对比 - 确定性 vs. 不确定性"></a>基本问题的解决及对比 - 确定性 vs. 不确定性</h2><ul><li>确定性：可以告诉事物的普遍规律也许是群体的统计规律（大数定律）也许仅是一个相对的真理</li><li>不确定性：使世界和生活充满了未知的魅力，是创造性不可缺少的因素，为我们提供了种种的机遇。</li></ul><table><thead><tr><th>基本问题</th><th>确定性</th><th>不确定性推理</th><th></th></tr></thead><tbody><tr><td>不确定知  识的表示</td><td>证据  （已知事实）</td><td>确定性知识</td><td>概率论、集合论（元组）、模糊理论  l程度表示法：命题中所描述的事物的属性、状态和关系等的强度。它是一种针对对象的表示法。其一般形式为（&lt;对象&gt;，&lt;属性&gt;，(&lt;属性值&gt;，&lt;程度  &gt;）)</td></tr><tr><td>策略或规则  （知识）</td><td>命题逻辑（原子命+组合命题）  谓词逻辑</td><td>多值逻辑（集合） 重  模糊逻辑（集合、函数） 点</td><td></td></tr><tr><td>不确定信息的推理</td><td>推理过程</td><td>命题逻辑推导规则  谓词逻辑推导规则</td><td>经典概率论  衍生概率论（主观贝叶斯、证据理论、DS理论等）</td></tr><tr><td>不确定性  的度量</td><td>推理值的度  量</td><td>二值逻辑（True  &#x2F; False）  经典逻辑表示 非黑即白  一阶谓词逻辑</td><td>三值、多值逻辑，非单调逻辑  模糊逻辑 灰色地带  基于概率的度量：概率值、可信度等</td></tr></tbody></table><h2 id="不确定性推理方法-基于概率理论"><a href="#不确定性推理方法-基于概率理论" class="headerlink" title="不确定性推理方法 - 基于概率理论"></a>不确定性推理方法 - 基于概率理论</h2><p>在数值方法中，概率方法是重要的方法之一。</p><p>优点：概率论有着完善的理论和方法，而且具有现成的公式实现不确定性的合成与传递，因此可以用做度量不确定性的重要手段。</p><p>缺点：纯概率方法虽然有严格的理论依据，但通常要求给出事件的先验概率和条件概率，而这些数据又不易获得，因此使其应用受到限制。</p><p>为解决这个问题，在概率论的基础上发展起来一些新的方法和理论，主要有以下：</p><table><thead><tr><th>方法名称</th><th>内容</th><th>应用案例</th></tr></thead><tbody><tr><td>主观Bayes方法  (主观概率论)</td><td>是对Bayes公式修正后形成的一种不确定推理方法；为概率论在不确定推理中的应用提供了一条新途径。</td><td>地矿勘探专家系统  PROSPECTOR</td></tr><tr><td>可信度方法</td><td>以确定性理论为基础，方法简单、易用。</td><td>专家系统MYCIN</td></tr><tr><td>证据理论等</td><td>它通过定义“信任函数、似然函数”，把知道和不知  道区别开来。  l这些函数满足比“概率函数”的公理要弱的公理，因此，概率函数是信任函数的一个子集。</td><td></td></tr></tbody></table><h2 id="主观Bayes方法-引入原因"><a href="#主观Bayes方法-引入原因" class="headerlink" title="主观Bayes方法 - 引入原因"></a>主观Bayes方法 - 引入原因</h2><p>主观Bayes方法：由杜达(R.O.Duda)等人在1976年在概率论的基础上，通过对Bayes公式的修正而形成的一种不确定性推理模型，并成功地应用在他们自己开发的地矿勘探专家系统PROSPECTOR中。</p><p>存在问题：经典概率论不可用在许多情况下，同类事件发生的频率不高,甚至很低，无法做概率统计</p><p>解决方案：引入主观概率根据观测到数据，凭领域专家的经验给出一些主观上的判断，称为主观概率。</p><p>1977年，斯坦福大学研发用于“地质领域探测矿藏”的专家系统是PROSPECTOR系统。</p><p>采矿工程是一个极其复杂的大系统，其中许多问题没有规则结构，这类问题的求解无法用简单的数据流动或精确的逻辑判断做确定的解答。专家系统技术为解决这类问题提供了有力的工具。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205551614.png" alt="image-20240717205551614"></p><h2 id="主观Bayes方法-三大基本问题的解决方式"><a href="#主观Bayes方法-三大基本问题的解决方式" class="headerlink" title="主观Bayes方法 - 三大基本问题的解决方式"></a>主观Bayes方法 - 三大基本问题的解决方式</h2><p>在面对复杂和不断变化的现实世界时，决策过程往往充满挑战。我们的每一个选择都是在一定程度的不确定性中做出的，无论是日常生活中的小决定，还是关系到未来方向的重大选择。概率通常用于结果得不到完全预测的情况。</p><p>如何在“信息不全、环境变化快速”的情况下做出恰当的判断呢？</p><p>一种源自概率论的思考方式—贝叶斯思维，为我们提供了一个强有力的工具。</p><table><thead><tr><th>基本问题</th><th>解决方法</th></tr></thead><tbody><tr><td>表示方法</td><td>主观概率、条件概率</td></tr><tr><td>度量方法</td><td>概率值（0-1）；  一般可以解释为对“证据和规则”的主观信任度。</td></tr><tr><td>推理计算过程</td><td>概率推理中起关键作用的就是所谓的Bayes公式，  它也是主观Bayes方法的基础。</td></tr></tbody></table><h2 id="主观Bayes方法及应用"><a href="#主观Bayes方法及应用" class="headerlink" title="主观Bayes方法及应用"></a>主观Bayes方法及应用</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-202407205615870-1721223480503-7.png"></p><h2 id="主观Bayes方法-引例-试错成本很高的场景"><a href="#主观Bayes方法-引例-试错成本很高的场景" class="headerlink" title="主观Bayes方法 - 引例(试错成本很高的场景)"></a>主观Bayes方法 - 引例(试错成本很高的场景)</h2><p>Beyes理论实用之处针对“试错成本很高的场景”，允许用一个数学框架来结合已有的知识（先验概率）和新出现的信息（如证据或数据），通过不断迭代，能在不同的解决方案中，更好得到最优解。比如，在医学诊断中，医生可以根据患者的症状（新信息）和既往病史（先验知识），来更新对患者患有某种疾病的估计概率。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205633580.png" alt="image-20240717205633580"></p><h2 id="概率论基础1-条件概率公式"><a href="#概率论基础1-条件概率公式" class="headerlink" title="概率论基础1 - 条件概率公式"></a>概率论基础1 - 条件概率公式</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205704929.png" alt="image-20240717205704929"></p><h2 id="概率论基础2-全概率公式"><a href="#概率论基础2-全概率公式" class="headerlink" title="概率论基础2 - 全概率公式"></a>概率论基础2 - 全概率公式</h2><p>意义：多个事件𝑩𝒊发生，对结果A 发生的总体影响。在条件概率基础上，为原因事件𝑩𝒊加上权值。即为达到某目的A，有多种方式𝑩𝒊(𝒊 &#x3D; 𝟏 … 𝒏) ，采用某种方式𝑩𝒊而达成目的的概率已知𝑷(𝑨|𝑩𝒊)。全概率就是为每个方式加上成功率（权值），然后计算总的成功率。</p><h2 id="贝叶斯公式-在不确定情况下求最优解"><a href="#贝叶斯公式-在不确定情况下求最优解" class="headerlink" title="贝叶斯公式 - 在不确定情况下求最优解"></a>贝叶斯公式 - 在不确定情况下求最优解</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205800320.png" alt="image-20240717205800320"></p><h2 id="可信度方法-定义"><a href="#可信度方法-定义" class="headerlink" title="可信度方法 - 定义"></a>可信度方法 - 定义</h2><p>定义：是一种不确定性推理方法，基于经验对事物或现象为真的相信程度，即可信度。其核心在于使用可信度因子来表示“知识和证据的不确定性”，并通过推理计算得出 “结论的可信度”。这种方法在1975年由肖特里菲等人提出，并结合“概率论和模糊集合论”等方法发展而来。</p><h3 id="C-F模型"><a href="#C-F模型" class="headerlink" title="C-F模型"></a>C-F模型</h3><p>知识不确定性的表示：知识是用产生式规则表示的，其一般形式为：</p><p>IF E(前提条件) THEN H(结论) (CF(H,E)) (可信度因子）</p><p>举例：</p><p>IF 头痛AND 流涕 THEN 感冒 (0.7)</p><p>当病人出现“头痛”及“流涕”时，则有7成的把握认为他感冒了。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205829512.png" alt="image-20240717205829512"></p><h2 id="DS证据理论-Theory-of-Evidence-定义"><a href="#DS证据理论-Theory-of-Evidence-定义" class="headerlink" title="DS证据理论(Theory of Evidence) - 定义"></a>DS证据理论(Theory of Evidence) - 定义</h2><p>定义：由德普斯特（A.P.Dempster）于20世纪60年代首先提出，并由沙佛（G.Shafer）在20世纪70年代中期进一步发展起来的一种处理不确定性的理论，又称为D-S理论。</p><p>主要特点：满足比贝叶斯概率论更弱的条件；具有直接表达“不确定”和“不知道”的能力。</p><h3 id="DS不确定性推理模型"><a href="#DS不确定性推理模型" class="headerlink" title="DS不确定性推理模型"></a>DS不确定性推理模型</h3><ul><li>(信任)概率分配函数：把D的任意子集A都映射为[0,1]上的一个数M(A)，实际上对D的各个子集进行信任分配。</li><li>信任函数&#x2F;下限函数（Belief Function）：表示对命题A为真的总的信任程度。</li><li>似然函数&#x2F;不可驳斥函数&#x2F;上限函数（Plausibility Function)：对A为非假的信任程度。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717205917697.png" alt="image-20240717205917697"></p><h2 id="模糊集理论-引入原因"><a href="#模糊集理论-引入原因" class="headerlink" title="模糊集理论 - 引入原因"></a>模糊集理论 - 引入原因</h2><h3 id="概率论的缺点"><a href="#概率论的缺点" class="headerlink" title="概率论的缺点"></a>概率论的缺点</h3><p>概率论处理的是由随机性引起的不确定性，基于概率的方法没有把事物自身所具有的模糊性反映出来，也不能对其客观存在的模糊性进行有效处理。</p><h3 id="模糊集的优点"><a href="#模糊集的优点" class="headerlink" title="模糊集的优点"></a>模糊集的优点</h3><p>Zadeh提出的模糊集理论及其在此基础上发展起来的模糊理论弥补了这一缺憾。把模糊性作为基本的研究对象</p><p>模糊理论处理的是由模糊性引起的不确定性。模糊理论对由模糊性引起的不确定性的表示及处理开辟了一种新的解决途径，并得到了广泛应用。模糊性使我们的生活简单而有效，借助模糊性能对复杂事物作出高效率的判断和处理。如医生可以根据病人的模糊症状而作出正确的判断、画家不用精确的测量计算而能画出栩栩如生的风景人物等。</p><h2 id="模糊集理论-案例"><a href="#模糊集理论-案例" class="headerlink" title="模糊集理论 - 案例"></a>模糊集理论 - 案例</h2><p>由于建立在二值逻辑基础上的原有的逻辑与数学难以描述和处理现实世界中许多模糊性的对象。模糊逻辑将“非黑即白”的事件分配了“灰度级别”。汽车牵引力系统的模糊控制 (类比汽车雨刷控制系统)汽车一般配备了牵引力控制系统，这些系统在不同降水情况下可以发挥安全作用。假设一开始只是毛毛雨，然后雨势逐渐增大到一定程度。模糊逻辑提供了应对这些不确定性所所需的控制理论基础。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210026342.png" alt="image-20240717210026342"></p><h3 id="模糊集理论-演进过程"><a href="#模糊集理论-演进过程" class="headerlink" title="模糊集理论 - 演进过程"></a>模糊集理论 - 演进过程</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210042262.png" alt="image-20240717210042262"></p><blockquote><p>目前，各种模糊产品充满日本、西欧和美国市场，如模糊洗衣机、模糊吸尘器、模糊电冰箱和模糊摄像机等</p></blockquote><h2 id="模糊集合"><a href="#模糊集合" class="headerlink" title="模糊集合"></a>模糊集合</h2><p>1965年美国数学家L. Zadeh提出Fuzzy集合的概念，标志着Fuzzy数学的诞生。</p><p>Fuzzy数学与Fuzzy逻辑实质上是要对模糊性对象进行精确的描述和处理。</p><h3 id="模糊集合的定义"><a href="#模糊集合的定义" class="headerlink" title="模糊集合的定义"></a>模糊集合的定义</h3><p>论域：所讨论的全体对象，一般用U、E等大写字母表示。</p><p>元素：论域中的每个对象，一般用a,b,c,x,y,z等小写字母表示集合中的元素。</p><p>集合：论域中具有某种相同属性的确定的、可以彼此区别的元素的全体，常用A,B,C,X,Y,Z等表示集合。</p><h3 id="模糊集合的表示方法"><a href="#模糊集合的表示方法" class="headerlink" title="模糊集合的表示方法"></a>模糊集合的表示方法</h3><p>当论域中元素数目有限时，模糊集合A的数学描述为：</p><p>A&#x3D;{ (x, 𝜇𝐴(𝑥) ), x∈𝑋 }</p><p>其中𝜇𝐴(𝑥)为元素x 属于模糊集A的隶属度，X 是元素x 的论域。</p><table><thead><tr><th>对比项</th><th>经典集合</th><th>模糊集合</th></tr></thead><tbody><tr><td>元素与集合的关系</td><td>非黑即白  a属于A或a不属于A，即只有两个真值“真”和“假”</td><td>分配了“灰度级别”  引入隶属度(degree  of  membership)概念，描述介于“真、假”之间的过程。</td></tr><tr><td>量化关系表示</td><td>特征函数（分段曲线）</td><td>隶属度函数（连续曲线）</td></tr></tbody></table><h3 id="模糊集合函数-vs-经典集合"><a href="#模糊集合函数-vs-经典集合" class="headerlink" title="模糊集合函数 vs 经典集合"></a>模糊集合函数 vs 经典集合</h3><p>模糊集合是经典集合的推广。</p><p>实际上，经典集合是模糊集合中隶属函数取0或1时的特例。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210201362.png" alt="image-20240717210201362"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210206796.png" alt="image-20240717210206796"></p><h2 id="隶属函数-membership-function"><a href="#隶属函数-membership-function" class="headerlink" title="隶属函数 (membership function)"></a>隶属函数 (membership function)</h2><p>定义：模糊集合中所有元素的隶属度全体构成模糊集合的隶属函数。</p><p>作用：正确地确定隶属函数是运用模糊集合理论解决实际问题的基础。隶属函数是对模糊概念的定量描述。</p><p>难统一：我们遇到的模糊概念不胜枚举，然而准确地反映模糊集合的隶属函数，却无法找到统一的模式。</p><h3 id="主观性"><a href="#主观性" class="headerlink" title="主观性"></a>主观性</h3><p>隶属函数的确定过程，本质上说应该是客观的，但每个人对于同一个模糊概念的认识理解又有 差异。因此,隶属函数的确定又带有主观性。引进隶属度后，将人们“对事物认识的模糊性”转化为“隶属度确定的主观性”。隶属函数一 般根据经验或统计进行确定,也可由专家给出。对于同一个模糊概念，不同的人会建立不完全相同的隶属函数，尽管形式不完全相同，只要能反映同一模糊概念，仍然能够较好地解决和处理实际模糊信息的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210226403.png" alt="image-20240717210226403"></p><h3 id="隶属函数-–-常见形式举例"><a href="#隶属函数-–-常见形式举例" class="headerlink" title="隶属函数 – 常见形式举例"></a>隶属函数 – 常见形式举例</h3><p><strong>蓝色方框内可以近似表示为下雨的过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717210236070.png" alt="image-20240717210236070"></p><h2 id="模糊集合的运算"><a href="#模糊集合的运算" class="headerlink" title="模糊集合的运算"></a>模糊集合的运算</h2><table><thead><tr><th>运算名称</th><th>具体规则</th></tr></thead><tbody><tr><td>模糊集合的包含关系</td><td>若𝜇𝐴 x ≥  𝜇𝐵 x  ，则称A包含B，记作A⊇B</td></tr><tr><td>模糊集合的相等关系</td><td>若𝜇𝐴 x &#x3D; 𝜇𝐵 x  ，则称A与B相等，记作A&#x3D;B</td></tr><tr><td>模糊集合的交并补运算(∧为取小运算,∨为取大运算)</td><td>交运算（intersection）A ∩ 𝐵：  𝜇𝐴∩𝐵 𝑥 &#x3D; min 𝜇𝐴 𝑥 ,  𝜇𝐵 𝑥 &#x3D;  𝜇𝐴 𝑥 ∧ 𝜇𝐵 𝑥  并运算（union）A ∪ 𝐵：  𝜇𝐴∪𝐵 𝑥 &#x3D;  max 𝜇𝐴 𝑥 ,  𝜇𝐵 𝑥 &#x3D;  𝜇𝐴 𝑥 ∨ 𝜇𝐵 𝑥  l补运算（complement）  𝐴 或者 𝐴𝐶：  𝜇𝐴 𝑥 &#x3D; 1 −  𝜇𝐴 𝑥</td></tr><tr><td>模糊集合的代数运算</td><td>代数积：  𝜇𝐴⋅𝐵 𝑥 &#x3D;  𝜇𝐴 𝑥 𝜇𝐵 𝑥  l代数和：  𝜇𝐴+𝐵 𝑥 &#x3D;  𝜇𝐴 𝑥 + 𝜇𝐵 𝑥 − 𝜇𝐴⋅𝐵 𝑥  有界和：  𝜇𝐴⊕𝐵 𝑥 &#x3D; min 1, 𝜇𝐴 𝑥 + 𝜇𝐵 𝑥 &#x3D; 1 ∧ 𝜇𝐴 𝑥 + 𝜇𝐵 𝑥  l有界积：  𝜇𝐴⊗𝐵 𝑥 &#x3D;  max 0, 𝜇𝐴 𝑥 + 𝜇𝐵 𝑥 − 1  &#x3D; 0  ∨ 𝜇𝐴 𝑥 + 𝜇𝐵 𝑥 − 1</td></tr></tbody></table><h2 id="模糊决策"><a href="#模糊决策" class="headerlink" title="模糊决策"></a>模糊决策</h2><p>模糊决策：将模糊推理得到的模糊向量转化为确定值的过程。</p><table><thead><tr><th>模糊决策方法</th><th>最大隶属度法</th><th>加权平均判决法</th><th>中位数法</th></tr></thead><tbody><tr><td>计算推理结果方法</td><td>取隶属度最大的量作为推理结果。例：𝑈′ &#x3D; 0.1&#x2F;2 + 0.4&#x2F;3 + 0.7&#x2F;4 + 1.0&#x2F;5 +  0.7&#x2F;6  + 0.3&#x2F;7。由于推理结  果隶属等级5的隶属度为最  大，所以取结论为：U&#x3D;5  l如果有两个以上的元素均为最大，则可以取它们的平均值：𝑈′ &#x3D; 0.5&#x2F;−3 +  0.5&#x2F;−2 +  0.5&#x2F;−1 +  0.0&#x2F;0 +  0.0&#x2F;1 +  0.0&#x2F;2 +  0.0&#x2F;3  −3 −  2 −  1  𝑈 &#x3D; &#x3D; −2  3</td><td>𝑛 𝜇൫𝑢𝑖)𝑢𝑖  公式：𝑈 &#x3D; σ𝑖&#x3D;1  σ𝑛 𝜇(𝑢𝑖)  𝑖&#x3D;1  例：𝑈′ &#x3D; 0.1&#x2F;2 + 0.6&#x2F;3 + 0.5&#x2F;4 +  0.4&#x2F;5 +  0.2&#x2F;6</td><td>论域为有限离散点，可用下列公式求取：  σ𝑢∗ 𝜇   𝑢 &#x3D; σ𝑢𝑛 𝜇 𝑢 。例:𝑈′ &#x3D; 0.1&#x2F;−4 +  𝑢1 𝑖 𝑢∗+1 𝑗  0.5&#x2F;−3 +  0.1&#x2F;−2 +  0.0&#x2F;−1 +  0.1&#x2F;0 +  0.2&#x2F;1 + 0.4&#x2F;2 + 0.5&#x2F;3 + 0.1&#x2F;4。由于,  u1 &#x3D;-4,  u &#x3D;4,则当𝑢∗&#x3D; u 时，  σ𝑢6 𝜇   𝑢 &#x3D;  9 6 𝑢1 𝑖  σ𝑢9 𝜇   𝑢 &#x3D; 1，所以中位数为𝑢∗&#x3D; u &#x3D;1，  𝑢7 𝑖 6  则U&#x3D;1  l若该点在有限元素之间，可用插值的方法来求取:𝑈′ &#x3D;  0.1&#x2F;−4 + 0.5&#x2F;−3 + 0.3&#x2F;−2 + 0.1&#x2F;−1 + 0.1&#x2F;0 + 0.4&#x2F;1 + 0.5&#x2F;2 + 0.1&#x2F;3 +  0.2&#x2F;4,可用线性插值处理，令𝛥𝑢 &#x3D;  1.2&#x2F; 1.1  + 1.2 &#x3D; 0.522.所以取𝑢∗&#x3D; u5 +  𝛥𝑢&#x3D;0.522。也可以不用插值方法，可直接  取𝑢∗&#x3D; 0或者𝑢∗&#x3D; 1</td></tr><tr><td>优缺  点</td><td>优点：简单易行。  缺点：完全排除了其他隶属度较小的量的影响和作用，没有充分利用推理过程取得的信息</td><td>优点：性能更佳，静态性更好</td><td>优点：动态性更好  缺点：计算比较复杂，特别是在连续隶属度函  数时，需要求解积分方程</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.确定性推理</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>上一章：讨论了“知识与知识表示”，可以把知识用某种模式表示出来存储到计算机中，但为使计算机具有智能，还必须使它具有思维能力。</p><p>本章：1）推理是求解问题的一种重要方法。因此，推理方法成为人工智能的一个重要研究课题。2）目前已提出多种可在计算机上实现自动推理的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200550734.png" alt="image-20240717200550734"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200602703.png" alt="image-20240717200602703"></p><h2 id="基本概念-定义、要素"><a href="#基本概念-定义、要素" class="headerlink" title="基本概念 - 定义、要素"></a>基本概念 - 定义、要素</h2><p>推理：从初始证据（已知事实）出发，按某种策略或规则，不断运用知识库中的已知知识，逐步推出结论的过程，或者归纳出新事实的思维过程。</p><p>两个基本要素：</p><ul><li>事实&#x2F;证据：推理的出发点、推理时应该使用的知识</li><li>知识：使推理得以向前推进，并逐步达到最终目标的依据</li></ul><p>推理机：在AI系统中，推理过程通常由推理机来实现，它通常是一组程序，用来控制协调整个系统。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200618312.png" alt="image-20240717200618312"></p><h2 id="推理过程、案例"><a href="#推理过程、案例" class="headerlink" title="推理过程、案例"></a>推理过程、案例</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200635491.png" alt="image-20240717200635491"></p><h2 id="推理方式及其分类"><a href="#推理方式及其分类" class="headerlink" title="推理方式及其分类"></a>推理方式及其分类</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200647333.png" alt="image-20240717200647333"></p><h2 id="推理方式分类-按推出结论的途径"><a href="#推理方式分类-按推出结论的途径" class="headerlink" title="推理方式分类 - 按推出结论的途径"></a>推理方式分类 - 按推出结论的途径</h2><h3 id="演绎推理（从一般到个别）"><a href="#演绎推理（从一般到个别）" class="headerlink" title="演绎推理（从一般到个别）"></a>演绎推理（从一般到个别）</h3><p>由一般性知识推出适合于某一具体情况的结论。</p><p>形式：三段论式</p><p>大前提：已知的一般性知识或假设。</p><p>小前提：关于所研究的具体情况或个别事实的判断。</p><p>结论：由大前提推出的适合于小前提所式情况的新判断。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200720708.png" alt="image-20240717200720708"></p><h3 id="归纳推理（从个别到一般）"><a href="#归纳推理（从个别到一般）" class="headerlink" title="归纳推理（从个别到一般）"></a>归纳推理（从个别到一般）</h3><p>从足够多的事例中归纳出一般性结论的推理过程。</p><p>完全归纳推理和不完全归纳推理：</p><p>完全归纳推理（必然性推理）：考察了相应事物的全部对象，就得出了结论。</p><p>不完全归纳推理（非必然性推理）：考察了相应事物的部分对象，就得出了结论。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200759700.png" alt="image-20240717200759700"></p><h3 id="默认推理（缺省推理）"><a href="#默认推理（缺省推理）" class="headerlink" title="默认推理（缺省推理）"></a>默认推理（缺省推理）</h3><p>是在知识不完全的情况下假设某些条件已经具备所进行的推理。发现原先所做的默认不正确，则要撤销所做的默认以及由此默认推出的所有结论，重新按新情况进行推理。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200817172.png" alt="image-20240717200817172"></p><h2 id="推理方式分类-按所用的知识性质"><a href="#推理方式分类-按所用的知识性质" class="headerlink" title="推理方式分类- 按所用的知识性质"></a>推理方式分类- 按所用的知识性质</h2><h3 id="确定性推理"><a href="#确定性推理" class="headerlink" title="确定性推理"></a>确定性推理</h3><p>推理时所用的知识与证据都是确定的，推出的结论也是确定的，即真值为真或者为假。</p><blockquote><p>经典逻辑推理是确定性推理</p></blockquote><h3 id="不确定性推理"><a href="#不确定性推理" class="headerlink" title="不确定性推理"></a>不确定性推理</h3><p>推理时所用的知识与证据不都是确定的，推出的结论也是不确定的</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717200920321.png" alt="image-20240717200920321"></p><h2 id="推理方式分类–-结论接近目标的方式"><a href="#推理方式分类–-结论接近目标的方式" class="headerlink" title="推理方式分类– 结论接近目标的方式"></a>推理方式分类– 结论接近目标的方式</h2><h3 id="单调推理"><a href="#单调推理" class="headerlink" title="单调推理"></a>单调推理</h3><p>随着推理向前推进及新知识的加入，推论不断加强，推出的结论越来越接近最终目标。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201000797.png" alt="image-20240717201000797"></p><h3 id="非单调推理"><a href="#非单调推理" class="headerlink" title="非单调推理"></a>非单调推理</h3><p>由于新知识的加入，不仅没有加强已推出的结论，反而要否定它，使推理退回到前面的某一步，重新开始。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201008770.png" alt="image-20240717201008770"></p><h2 id="推理方式分类-是否使用启发性知识"><a href="#推理方式分类-是否使用启发性知识" class="headerlink" title="推理方式分类 - 是否使用启发性知识"></a>推理方式分类 - 是否使用启发性知识</h2><h3 id="启发性推理"><a href="#启发性推理" class="headerlink" title="启发性推理"></a>启发性推理</h3><p>运用与推理有关的启发性知识</p><h3 id="非启发性推理"><a href="#非启发性推理" class="headerlink" title="非启发性推理"></a>非启发性推理</h3><p>没有运用与推理有关的启发性知识</p><blockquote><p>启发性知识：与问题有关且能加快推理过程、求得问题最优解的知识。</p></blockquote><h2 id="推理的控制策略"><a href="#推理的控制策略" class="headerlink" title="推理的控制策略"></a>推理的控制策略</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201048463.png" alt="image-20240717201048463"></p><h2 id="推理的方向"><a href="#推理的方向" class="headerlink" title="推理的方向"></a>推理的方向</h2><h3 id="正向推理"><a href="#正向推理" class="headerlink" title="正向推理"></a>正向推理</h3><p>基本思想：以已知事实作为出发点的一种推理。</p><p>优点：简单，易实现。</p><p>缺点：目的性不强，效率低。</p><h3 id="逆向推理"><a href="#逆向推理" class="headerlink" title="逆向推理"></a>逆向推理</h3><p>基本思想：以某个假设目标作为出发点的一种推理。</p><p>优点：不必使用与目标无关的知识，目的性强，还有利于向用户提供解释。</p><p>缺点：起始目标的选择有盲目性。</p><h3 id="混合推理"><a href="#混合推理" class="headerlink" title="混合推理"></a>混合推理</h3><p>以下情况，常需采用混合推理：已知的事实不充分。(先正后逆)正向推理退出的结论可信度不高。（先正后逆）希望得到更多的结论。(先逆后正)</p><h3 id="双向推理"><a href="#双向推理" class="headerlink" title="双向推理"></a>双向推理</h3><p>基本思想：双向同时进行，且在某一步骤上“碰头”。</p><p>特点：即由正向推理所得到的中间结论，恰好是逆向推理此时所要求的证据。</p><h2 id="冲突消解策略"><a href="#冲突消解策略" class="headerlink" title="冲突消解策略"></a>冲突消解策略</h2><p>已知事实与知识进行匹配，可能发生的三种匹配情况:</p><ul><li>恰好匹配成功（一对一）</li><li>不能匹配成功</li><li>多种匹配成功（一对多、多对一、多对多）。这种情况会产生冲突，因此需要一定的策略解决</li></ul><h3 id="冲突消解策略-1"><a href="#冲突消解策略-1" class="headerlink" title="冲突消解策略"></a>冲突消解策略</h3><ol><li>按规则的针对性排序</li><li>按已知事实的新鲜性排序</li><li>按匹配度排序</li><li>按条件个数排序</li></ol><h2 id="自然推理-正向证明-–-分类"><a href="#自然推理-正向证明-–-分类" class="headerlink" title="自然推理(正向证明) – 分类"></a>自然推理(正向证明) – 分类</h2><h3 id="演绎推理（自上而下）"><a href="#演绎推理（自上而下）" class="headerlink" title="演绎推理（自上而下）"></a>演绎推理（自上而下）</h3><p>定义：由已知的普遍性知识或前提出发，通过推导（即 “演绎”）得出具体陈述或特殊性结论的推理（即从一般到个别）。</p><p>主要包括：三段论、假言推理、选言推 理等。</p><p>缺点：不能产生新知识。</p><h3 id="归纳推理（自上而下）"><a href="#归纳推理（自上而下）" class="headerlink" title="归纳推理（自上而下）"></a>归纳推理（自上而下）</h3><p>定义：从大量的事例中总结出一般性结论的推理过程，是一种从个别到一般的推理，从特殊的前提推出普遍结论的推理。</p><p>更一步的细分类见下页。</p><h3 id="默认推理"><a href="#默认推理" class="headerlink" title="默认推理"></a>默认推理</h3><p>定义：在知识不完全的情况下作出的推理。</p><p>特点：允许默认某</p><p>些条件成立，摆脱了需知道全部有关事实才能进行推理的要求，使得在知识不完全的情况下也能进行推理。</p><h3 id="自然演绎推理"><a href="#自然演绎推理" class="headerlink" title="自然演绎推理"></a>自然演绎推理</h3><p>基本思想：从一组已知为真的事实出发，直接运用经典逻辑（命题逻辑、谓词逻辑）中的推理规则，推出结论的过程。</p><p>优点：推理过程灵活便于嵌入领域启发式知识。</p><p>缺点：易产生组合爆炸，不利于复杂问题的推理</p><h2 id="自然推理-归纳推理-–-细分类"><a href="#自然推理-归纳推理-–-细分类" class="headerlink" title="自然推理 - 归纳推理 – 细分类"></a>自然推理 - 归纳推理 – 细分类</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201316848.png" alt="image-20240717201316848"></p><h2 id="演绎与归纳的区别与联系"><a href="#演绎与归纳的区别与联系" class="headerlink" title="演绎与归纳的区别与联系"></a>演绎与归纳的区别与联系</h2><table><thead><tr><th>大类</th><th>细项</th><th>演绎推理</th><th>归纳推理</th></tr></thead><tbody><tr><td>区别</td><td>推理方向不同</td><td>一般到个别</td><td>个别到一般</td></tr><tr><td>前提数量不同</td><td>相对有限</td><td>不确定</td><td></td></tr><tr><td>结论断定范围不同</td><td>没有超出前提所提供的知识范围</td><td>超出</td><td></td></tr><tr><td>前提与结论的联系  不同</td><td>必然联系</td><td>不一定有联  系</td><td></td></tr><tr><td>联系</td><td>l演绎必须以归纳为基础（演绎推理如果要以一般性知识为前提，那么这些知识通常由归纳推理得出）  l归纳必须以演绎为指导  l归纳和演绎推理互相渗透和转化。</td><td></td><td></td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201334530.png" alt="image-20240717201334530"></p><h2 id="归结推理-反向证明-基本思想和概念"><a href="#归结推理-反向证明-基本思想和概念" class="headerlink" title="归结推理(反向证明) - 基本思想和概念"></a>归结推理(反向证明) - 基本思想和概念</h2><p>基本思想：基于反证法，证明所证公式会假时会产生矛盾，从而说明所证公式为真。</p><p>对比：1）自然演绎推理是从已知为真的事实出发，运用经典逻辑的推理规则导出结论；2）而归结演绎推理的思路恰好与之相反。</p><p>定理证明过程：</p><p>正向即证明P→Q即“(¬P∨Q)的永真性”。根据反证法，只要证明其反面“(P∧¬Q)</p><p>的不可满足性”即可。</p><p>海伯伦(Herbrand)定理：为自动定理证明奠定了理论基础；</p><p>鲁滨逊(Robinson)归结原理：使机器定理证明成为现实。</p><h3 id="海伯伦定理"><a href="#海伯伦定理" class="headerlink" title="海伯伦定理"></a>海伯伦定理</h3><p>原来：判断一个子句的不可满足性，需要对个体域上的一切解释逐</p><p>个进行判定，只有当子句对任何非空个体域上的任何一个解释都是不可满足的，该子句才是不可满足的。</p><p>优化后：海伯伦构造了一个特殊的域(海伯伦域)，并证明只要对这个特殊域上的一切解释进行判定，就可知子句集是否不可满足。</p><p>缺点：海伯伦理论的计算量会呈指数增长，用它来计算不现实。</p><h2 id="归结推理-反向证明-基本概念"><a href="#归结推理-反向证明-基本概念" class="headerlink" title="归结推理(反向证明) - 基本概念"></a>归结推理(反向证明) - 基本概念</h2><p>基本概念</p><p>谓词公式的永真式（重言式，Taotology）</p><p>谓词公式的可满足（Satisfiable）</p><p>谓词公式的永假式（Contradiction&#x2F;Unsatisfiable）</p><p>谓词公式的范式：公式的标准形式，有前束范式、斯科伦范式。</p><p>谓词公式化为子句集</p><p>前束范式（Prenex Normal Form）</p><p>斯科伦范式（Skolem Standard Form）</p><h2 id="鲁宾孙归结原理-消解原理"><a href="#鲁宾孙归结原理-消解原理" class="headerlink" title="鲁宾孙归结原理 - 消解原理"></a>鲁宾孙归结原理 - 消解原理</h2><p>原理内容：鲁滨逊在海伯伦理论的基础上，对子聚集中的子句做逐次归结来证明子句集</p><p>的不可满足性（如果子句集中各子句相互矛盾），提出归结原理，成为机器证明基础。</p><p>基本思想：</p><p>由谓词逻辑转化的子句集中的子句之间是合取关系，只要有一个子句不满足，则整个子句集不满足；</p><p>如果一个子句集中包含有空子句，则该子句集一定不可满足。</p><p>实现思路：通过归结方法不断扩充判定的子句集，并设法使其包含进指示矛盾（即永假）的子句，从而说明子句集不满足。</p><p>基本方法：1）检查子句集S中是否包含空子句，若包含，则S不可满足；2）若不包含，就在子句集中选择合适的子句进行归结，一旦通过归结得到空子句，就说明S是不可满足的。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201420686.png" alt="image-20240717201420686"></p><h2 id="归结反演"><a href="#归结反演" class="headerlink" title="归结反演"></a>归结反演</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201433205.png" alt="image-20240717201433205"></p><p>归结反演：应用归结原理证明定理的过程。</p><p>一般步骤：</p><p>1将“已知前提”表示为谓词公式F。</p><p>2将“待证明的结论”表示为谓词公式Q ，并否定得到¬ Q 。</p><p>3把谓词公式集{𝐹, ¬𝑄}化为子句集S。</p><p>4应用归结原理对S中的子句进行归结，把每次归结得到的归结式都并入到S中。</p><p>反复进行，若出现了空子句，则停止归结，此时就证明了Q为真。</p><h2 id="归结反演-–-案例"><a href="#归结反演-–-案例" class="headerlink" title="归结反演 – 案例"></a>归结反演 – 案例</h2><p>招聘工作人员，A，B，C三人应试，经面试后公司表示如下想法：</p><p>1三人中至少录取一人。</p><p>2如果录取A而不录取B，则一定录取C。</p><p>3如果录取B，则一定录取C。</p><p>求证：公司一定录取C。</p><p>一般步骤：</p><p>设用谓词P(x)表示录取x，则把公司的想法用谓词公式表示为：</p><p>(1)P(A)∨P(B)∨P(C) (2)P(A)∧¬P(B)→P(C) (3) P(B)→P(C)</p><p>把要求证的结论用谓词公式表示出来并否定，得（4）¬P(C)</p><p>把上述公式化成子句集：</p><p>(1)P(A)∨P(B)∨P(C) (2) ¬P(A)∨P(B)∨P(C) (3)¬P(B)∨P(C) (4)¬P(C)</p><p>应用归结原理进行归结：</p><p>(5)P(B)∨P(C) (1)与(2)归结 (6)P(C) (3)与(5)归结 (7)NIL (4)与(6)归结</p><p>所以公司一定录取C</p><h3 id="归结树"><a href="#归结树" class="headerlink" title="归结树"></a>归结树</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717201456303.png" alt="image-20240717201456303"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2知识图谱</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章首先介绍“知识与知识表示”的概念，然后介绍“谓词逻辑、产生式、框架、语义网络”等当前人工智能中应用广泛的知识表示方法。然后，简要介绍知识图谱，为后面介绍推理方法、专家系统等奠定基础。</p><h2 id="概述-起源（万维网）"><a href="#概述-起源（万维网）" class="headerlink" title="概述 - 起源（万维网）"></a>概述 - 起源（万维网）</h2><ul><li>万维网以文本和链接描述信息，用户通过超链接浏览互联网上的各类资源，也可以通过互联网将自己的信息发布出去。</li><li>万维网(world wide web，Web1.0)：是以链接为中心的信息系统(Linked information system)。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192612674.png" alt="image-20240717192612674"></p><h2 id="概述-语义网络表示法"><a href="#概述-语义网络表示法" class="headerlink" title="概述 - 语义网络表示法"></a>概述 - 语义网络表示法</h2><ul><li>语义网(semantic web，Web3.0)：通过给万维网上的文档（如：HTML文档、XML文档）添加能够被计算机所理解的语义“元数据”（外语：Meta data），从而使整个互联网成为一个通用的信息交换媒介。</li><li>语义网是一种智能网络，它不但能够理解词语和概念，而且还能够理解它们之间的逻辑关系，可以使交流变得更有效率和价值。</li></ul><h3 id="语义网与万维网的主要区别"><a href="#语义网与万维网的主要区别" class="headerlink" title="语义网与万维网的主要区别"></a>语义网与万维网的主要区别</h3><ul><li>万维网是关于网页链接的结构，节点是网页，节点之间通过超链接连接；</li><li>语义网是关于语义内容结构化表示的图结构，节点是语义信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192633315.png" alt="image-20240717192633315"></p><h2 id="概述-可链接数据-Linked-Data"><a href="#概述-可链接数据-Linked-Data" class="headerlink" title="概述 - 可链接数据(Linked Data)"></a>概述 - 可链接数据(Linked Data)</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192704045.png" alt="image-20240717192704045"></p><h2 id="相关概念的演变"><a href="#相关概念的演变" class="headerlink" title="相关概念的演变"></a>相关概念的演变</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192723350.png" alt="image-20240717192723350"></p><h2 id="知识图谱-兴起"><a href="#知识图谱-兴起" class="headerlink" title="知识图谱 - 兴起"></a>知识图谱 - 兴起</h2><p>知识图谱是一种以图结构来描述知识和建模事物之间关联关系的技术方法。由于互联网内容的大规模、异质多元、组织结构松散的特点，给有效获取信息和知识提出挑战。谷歌于2012年5月16日首先发布了知识图谱（Knowledge Graph），它是一种互联网环境下的知识表示方法。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192743379.png" alt="image-20240717192743379"></p><h2 id="知识图谱-定义"><a href="#知识图谱-定义" class="headerlink" title="知识图谱 - 定义"></a>知识图谱 - 定义</h2><ul><li>知识图谱(Knowledge Graph&#x2F;Vault)：又称科学知识图谱，用各种不同的图形等可视化技术描述知识资源及其载体，挖掘、分析、构建、绘制和显示知识及它们之间的相互联系。</li><li>知识图谱：是一种以图结构来描述知识和建模事物之间关联关系的技术方法。</li><li>知识图谱：是由一些相互连接的实体及其属性构成的。</li></ul><p>三元组是知识图谱的一种通用表示方式：</p><ul><li>(实体1-关系-实体2)：中国-首都-北京</li><li>(实体-属性-属性值)：北京-人口-2069万</li></ul><p>知识图谱也可被看作是一张图，图中的节点表示实体或概念，而图中的边则由属性或关系构成。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192810772.png" alt="image-20240717192810772"></p><h2 id="知识图谱-属性图-property-graph"><a href="#知识图谱-属性图-property-graph" class="headerlink" title="知识图谱 - 属性图(property graph)"></a>知识图谱 - 属性图(property graph)</h2><ul><li>属性图由节点(Nodes)、关系(Relationships)、属性(Property)和标签(Labels)组成</li><li>节点上包含属性，属性可以以任何键值形式存在。</li><li>关系连接节点，每个关系都有拥有⼀个⽅向、⼀个标签、⼀个开始节点和结束节点</li><li>关系也可以有属性，即边属性，可以通过在关系上增加属性提供有关边的元信息，如创建时间。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192823119.png" alt="image-20240717192823119"></p><h2 id="知识图谱-资源描述框架RDF"><a href="#知识图谱-资源描述框架RDF" class="headerlink" title="知识图谱 - 资源描述框架RDF"></a>知识图谱 - 资源描述框架RDF</h2><p>RDF表示 Resource Description Framework（资源描述框架），它是国际万维网联盟W3C推动的面向Web的语义标准。</p><p>RDF的基本组成单位是三元组 SPO</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192842507.png" alt="image-20240717192842507"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192851558.png" alt="image-20240717192851558"></p><h2 id="知识图谱-体系结构"><a href="#知识图谱-体系结构" class="headerlink" title="知识图谱 - 体系结构"></a>知识图谱 - 体系结构</h2><p>知识图谱的逻辑结构：模式层与数据层。</p><ul><li>数据层：主要是由一系列的事实组成，而知识以事实为单位进行存储。</li><li>模式层：构建在数据层之上，是知识图谱的核心。</li></ul><p>知识图谱的体系架构：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192912557.png" alt="image-20240717192912557"></p><ul><li>结构化数据：指知识定义和表示都比较完备的数据。</li><li>半结构化数据：指部分数据是结构化的，但存在大量结构化程度较低的数据。</li><li>非结构化数据：指没有定义和规范约束的“自由”数据。</li></ul><h2 id="知识图谱-构建过程"><a href="#知识图谱-构建过程" class="headerlink" title="知识图谱- 构建过程"></a>知识图谱- 构建过程</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717192957265.png" alt="image-20240717192957265"></p><h3 id="知识赋能"><a href="#知识赋能" class="headerlink" title="知识赋能"></a>知识赋能</h3><p>最初目的是增强搜索结果，改善用户搜索体验，即语义搜索。还可应用于“知识问答、领域大数据 分析、聊天机器人、金融、电商”等。</p><h3 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h3><p>如何有效地存储和查询大规模的RDF数据集是知识管理面临的一个核心问题。RDF是典型的图结构，知识管理需要依靠图数据(如Neo4j等)来实现。</p><h3 id="知识建模"><a href="#知识建模" class="headerlink" title="知识建模"></a>知识建模</h3><p>根据领域特点选择合适的知识表示方法，并基于此领域知识描述的概念、时间、规则及其相互关系建立知识图谱的概念模型。包括：概念抽取、概念层次（上下位关系）建模和属性学习。</p><h3 id="知识获取"><a href="#知识获取" class="headerlink" title="知识获取"></a>知识获取</h3><p> 是对知识建模定义的知识要素进行实例化的过程。知识图谱中实例的属性描述以三元组的形式表示，其数量决定了知识图谱的丰富程度。命名实体识别、事件抽取、属性关系抽取。</p><h2 id="知识图谱推理"><a href="#知识图谱推理" class="headerlink" title="知识图谱推理"></a>知识图谱推理</h2><ul><li>知识图谱推理的主要⽅法</li><li>基于逻辑规则的推理（如：FOIL、AMIE）</li><li>基于图结构和统计学习的推理（如：PRA）</li><li>基于分布式表示学习的推理（如：TransE）</li><li>基于神经网络的推理（如：R-GCN）</li><li>…</li></ul><h2 id="应用-KG辅助搜索引擎"><a href="#应用-KG辅助搜索引擎" class="headerlink" title="应用 - KG辅助搜索引擎"></a>应用 - KG辅助搜索引擎</h2><p>知识图谱(KG)可以提高搜索引擎的能力，改善用户的搜索质量以及搜索体验。</p><p>Google、百度和搜狗等搜索引擎公司。</p><h3 id="传统搜索"><a href="#传统搜索" class="headerlink" title="传统搜索"></a>传统搜索</h3><p>基于关键词的搜索不能很好地理解用户的搜索意图，仅能通过用户提供的关键词与待检索文档间的文本相关性来匹配结果。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717193100901.png" alt="image-20240717193100901"></p><h3 id="KG辅助搜索"><a href="#KG辅助搜索" class="headerlink" title="KG辅助搜索"></a>KG辅助搜索</h3><p>利用建立大规模知识图谱的对搜索关键词和文档内容进行语义标注，提供各种类型的语义搜索，使用户能够直接获得精确度更高的答案。百度、谷歌、搜狗构建的知识图谱，分别称为知识图谱、知心和知立方。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717193104925.png" alt="image-20240717193104925"></p><h2 id="应用-KG辅助金融风控"><a href="#应用-KG辅助金融风控" class="headerlink" title="应用 - KG辅助金融风控"></a>应用 - KG辅助金融风控</h2><ul><li>积分套利挖掘</li><li>黑产链路挖掘</li><li>欺诈团伙挖掘</li><li>涉赌涉诈关联</li><li>…</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717193115123.png" alt="image-20240717193115123"></p><h2 id="展望：知识图谱-大语言模型"><a href="#展望：知识图谱-大语言模型" class="headerlink" title="展望：知识图谱 + 大语言模型"></a>展望：知识图谱 + 大语言模型</h2><ul><li>利用大语言模型的知识图谱</li><li>借助大语言模型提取知识</li><li>借助大语言模型辅助图谱构建</li><li>……</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717193142911.png" alt="image-20240717193142911"></p><h2 id="展望：大语言模型-知识图谱"><a href="#展望：大语言模型-知识图谱" class="headerlink" title="展望：大语言模型 +知识图谱"></a>展望：大语言模型 +知识图谱</h2><ul><li>利用知识图谱的大语言模型</li><li>利用知识图谱的大语言模型（预）训练</li><li>利用知识图谱的提示构建</li><li>利用知识图谱减少大语言模型幻觉</li><li>……</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717193155756.png" alt="image-20240717193155756"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1知识表示</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章首先介绍“知识与知识表示”的概念，然后介绍“谓词逻辑、产生式、框架、语义网络”等当前人工智能中应用广泛的知识表示方法。然后，简要介绍知识图谱，为后面介绍推理方法、专家系统等奠定基础。</p><h2 id="知识-概念"><a href="#知识-概念" class="headerlink" title="知识 - 概念"></a>知识 - 概念</h2><ul><li>知识是在长期的生活及社会实践中、在科学研究及实验中积累起来的对客观世界的认识与经验。</li><li>把有关信息关联在一起所形成的信息结构成为知识。</li><li>知识反映了客观世界中事物之间的关系，不同事物或者相同事物间的不同关系形成了不同的知识</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233245951.png" alt="image-20240716233245951"></p><p>“雪是白色的。” ——这一条知识被称为“事实”</p><p>如果 头痛且流涕，则 有可能患了感冒。</p><pre><code>—用“如果…，则…”关联起来形成的知识称为“规则</code></pre><h2 id="知识-特性"><a href="#知识-特性" class="headerlink" title="知识 - 特性"></a>知识 - 特性</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233305923.png" alt="image-20240716233305923"></p><table><thead><tr><th>相对正确性</th><th>不确定性</th><th>可表示性与可利用性</th></tr></thead><tbody><tr><td>任何知识都是在一定的条件及环境下产生的，在这种条件及环境下才是正确的。  举例：“1+1&#x3D;2”  十进制的条件下正确，二进制的条件下不正确</td><td>随机引起的不确定性—“如果头痛且流涕，则有可能患了感冒”模糊性引起的不确定性—  风的强弱、雨的大小经验引起的不确定性—经验性自身就蕴含着不精确性及模糊性，这就形成了知识的不确定性不完全性引起的不确定性—“火星上可能有生命？”</td><td>知识的可表示性: 知识可以用适当形式表示出来，如用“语言、文字、图形、神经网络”等。  知识的可利用性: 知识可以  被利用。</td></tr></tbody></table><h2 id="知识-与“数据、信息和智慧”的关系"><a href="#知识-与“数据、信息和智慧”的关系" class="headerlink" title="知识 - 与“数据、信息和智慧”的关系"></a>知识 - 与“数据、信息和智慧”的关系</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233455683.png" alt="image-20240716233455683"></p><h2 id="知识的表示-定义与分类"><a href="#知识的表示-定义与分类" class="headerlink" title="知识的表示 - 定义与分类"></a>知识的表示 - 定义与分类</h2><p>知识表示：将人类知识形式化或者模型化。是对知识的一种描述，或者说是一组约定，一种计算机可以接受的用于描述知识的数据结构。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233545994.png" alt="image-20240716233545994"></p><h2 id="逻辑表示法-在AI中的重要性"><a href="#逻辑表示法-在AI中的重要性" class="headerlink" title="逻辑表示法 - 在AI中的重要性"></a>逻辑表示法 - 在AI中的重要性</h2><ul><li>人类思维活动一个重要功能是逻辑推理，即通过演绎和归纳等手段对现有观测现象进行分析，得出判断。</li><li>在人工智能发展初期，脱胎于逻辑推理的符号主义人工智能(symbolicAI)是人工智能研究的一种主流学派。</li><li>符号主义认为：所有概念均可通过人类可理解的“符号”及符号间关系来表示。</li><li>符号主义假设：可通过逻辑方法来对符号及其关系进行计算，实现逻辑推理，辨析符号所描述内容是否正确。</li><li>命题逻辑与谓词逻辑是最先应用于人工智能的两种逻辑，在知识的形式化表示方面，特别是定理的自动证明方面，发挥了重要作用，在人工智能的发展史中占有重要地位。</li></ul><h2 id="逻辑表示法-–-定义、作用与分类"><a href="#逻辑表示法-–-定义、作用与分类" class="headerlink" title="逻辑表示法 – 定义、作用与分类"></a>逻辑表示法 – 定义、作用与分类</h2><ul><li>定义：逻辑是用数学方法来研究关于推理和证明等问题的研究。</li><li>作用：逻辑是探索、阐述和确立有效推理原则的学科。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233629999.png" alt="image-20240716233629999"></p><p>提出了演绎推理中“三段论”方法的古希腊学者亚里士多德被誉为 “逻辑学之父”。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233634328.png" alt="image-20240716233634328"></p><h2 id="命题逻辑-–-概念"><a href="#命题逻辑-–-概念" class="headerlink" title="命题逻辑 – 概念"></a>命题逻辑 – 概念</h2><ul><li>命题（proposition）：一个非真即假的陈述句。</li><li>命题逻辑：研究命题及命题之间关系的符号逻辑系统。是应用一套形式化规则对以符号表示的描述性陈述进行推理的系统。</li><li>原子命题：一个或真或假的描述性陈述。</li><li>复合命题：若干原子命题通过逻辑运算符而构成。</li><li>命题联结词(connectives）</li></ul><table><thead><tr><th>命题连接符号</th><th>表示形式</th><th>意义</th></tr></thead><tbody><tr><td>与(and)</td><td>𝑝⋀𝑞</td><td>命题合取(conjunction)，即  “𝑝且𝑞”</td></tr><tr><td>或(or)</td><td>𝑝⋁𝑞</td><td>命题析取(disjunction)，即  “𝑝或𝑞”</td></tr><tr><td>非（not）</td><td>¬𝑝</td><td>命题否定(negation)，即  “非𝑝”</td></tr><tr><td>条件(conditional)</td><td>𝑝 →  𝑞</td><td>命题蕴含(implication)，即  “如果𝑝 则𝑞”</td></tr><tr><td>双向条件(bi-conditional)</td><td>𝑝 𝑞</td><td>命题双向蕴含(bi-  implication)，即“𝑝当且仅当𝑞”</td></tr></tbody></table><h2 id="命题逻辑-复合命题的逻辑形式及逻辑值"><a href="#命题逻辑-复合命题的逻辑形式及逻辑值" class="headerlink" title="命题逻辑 - 复合命题的逻辑形式及逻辑值"></a>命题逻辑 - 复合命题的逻辑形式及逻辑值</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233732286.png" alt="image-20240716233732286"></p><h2 id="命题逻辑-–-推理规则"><a href="#命题逻辑-–-推理规则" class="headerlink" title="命题逻辑 – 推理规则"></a>命题逻辑 – 推理规则</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240717000338689.png" alt="image-20240717000338689"></p><h2 id="谓词逻辑-–-从命题逻辑到谓词逻辑"><a href="#谓词逻辑-–-从命题逻辑到谓词逻辑" class="headerlink" title="谓词逻辑 – 从命题逻辑到谓词逻辑"></a>谓词逻辑 – 从命题逻辑到谓词逻辑</h2><h3 id="命题逻辑的局限性（缺点）"><a href="#命题逻辑的局限性（缺点）" class="headerlink" title="命题逻辑的局限性（缺点）"></a>命题逻辑的局限性（缺点）</h3><ul><li>描述能力有限：无法把它所描述的事物的结构及逻辑特征反映出来，也不能把不同事物间的共同特征表述出来。</li><li>原子命题不可分解：每个陈述句是最基本的单位(即原子命题)，无法对原子命题进行分解。</li></ul><h3 id="造成问题"><a href="#造成问题" class="headerlink" title="造成问题"></a>造成问题</h3><p>在命题逻辑中，不能表达“局部与整体、一般与个别”的关系。所以需要引入更加强大的逻辑表示方法，这就是“谓词逻辑”！</p><h2 id="谓词逻辑-–-概念"><a href="#谓词逻辑-–-概念" class="headerlink" title="谓词逻辑 – 概念"></a>谓词逻辑 – 概念</h2><ul><li><p>谓词</p><ul><li>谓词名：用于刻画个体的性质、状态或个体间的关系。</li><li>个体：某个独立存在的事物或某个抽象的概念。</li></ul></li><li><p>谓词逻辑：研究内容是将原子命题进一步细化，分解出“个体、谓词和量词”，来表达“个体与总体的内在联系和数量关系”。它有以下三个核心概念：</p><ul><li>个体：可以是常量，也可以是变元，还可以是一个函数。</li><li>谓词</li><li>量词</li></ul></li></ul><h3 id="谓词的一般形式"><a href="#谓词的一般形式" class="headerlink" title="谓词的一般形式"></a>谓词的一般形式</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716233907195.png" alt="image-20240716233907195"></p><h3 id="函数与谓词的区别"><a href="#函数与谓词的区别" class="headerlink" title="函数与谓词的区别"></a>函数与谓词的区别</h3><p>函数是从定义域到值域的映射</p><p>谓词是从定义域到{𝑇𝑟𝑢𝑒,𝐹𝑎𝑙𝑠𝑒}的映射</p><h2 id="谓词逻辑-–-连接词"><a href="#谓词逻辑-–-连接词" class="headerlink" title="谓词逻辑 – 连接词"></a>谓词逻辑 – 连接词</h2><p>无论是命题逻辑还是谓词逻辑，均可用下列连接词把一些简单命题连接起来构成一个复合命题，以表示一个比较复杂的含义。</p><table><thead><tr><th>﹁：  “否定”（  negation）或  “非”。</th><th>“机器人不在2号房间”：﹁Inroom(robot,r2)</th></tr></thead><tbody><tr><td>∨：  “析取”（disjunction）——或。</td><td>“李明打篮球或踢足球”：Plays(Liming,basketball)∨Plays(Liming,football)</td></tr><tr><td>∧： “合取”（conjunction）——与。</td><td>“我喜欢音乐和绘画”：Like(I,music)∧Like(I,painting)</td></tr><tr><td>→：“蕴含”(implication)或  “条件”(condition)。  P→Q：“P蕴涵Q”“如果P，则Q”</td><td>“如果刘华跑得最快，那么他取得冠军。”  ：RUNS(Liuhua，faster)→WINS(Liuhua，champion)</td></tr><tr><td>：“等价”（equivalence）或“双条件”（bicondition）。PQ: “P当且仅当Q”。</td><td>“P仅当Q”：P Q</td></tr></tbody></table><h2 id="谓词逻辑-–-谓词公式"><a href="#谓词逻辑-–-谓词公式" class="headerlink" title="谓词逻辑 – 谓词公式"></a>谓词逻辑 – 谓词公式</h2><p>谓词公式是一种形式语言表达式，也称为合式公式，它按照一定的规则构成。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716234002100.png" alt="image-20240716234002100"></p><h2 id="谓词逻辑-–-量词"><a href="#谓词逻辑-–-量词" class="headerlink" title="谓词逻辑 – 量词"></a>谓词逻辑 – 量词</h2><p>定义：在谓词逻辑中，将原子命题进一步细化，分解出“个体、谓词和量词”，来表达“个体与总体的内在联系和数量关系”，这就是谓词逻辑研究内容。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>全称量词(universal quantifier)</td><td>符号∀表示  表示一切的、凡是的、所 有的、每一 个等。</td><td>∀𝑥 表示定义域中的所有个体  ∀𝑥𝑃(𝑥)表示定义域中的所有个体具有性质𝑃</td></tr><tr><td>存在量词(existential quantifier)</td><td>符号∃表示， 表示存在、有一个、某些等。</td><td>∃𝑥表示定义域中存在一个或若干个个体，  ∃𝑥𝑃(𝑥)表示定义域中存在一个个体或若干个体具有性质  𝑃</td></tr></tbody></table><h3 id="全称量词与存在量词的组合"><a href="#全称量词与存在量词的组合" class="headerlink" title="全称量词与存在量词的组合"></a>全称量词与存在量词的组合</h3><p>∀𝑥¬𝑃(𝑥) ≡ ¬∃𝑥𝑃(𝑥)</p><p>¬∀𝑥𝑃(𝑥) ≡ ∃𝑥¬𝑃(𝑥)</p><p>∀𝑥𝑃 𝑥 ≡ ¬∃𝑥¬𝑃 𝑥</p><p>∃𝑥𝑃(𝑥) ≡ ¬∀𝑥¬𝑃(𝑥)</p><h2 id="谓词逻辑-–-量词的推理规则"><a href="#谓词逻辑-–-量词的推理规则" class="headerlink" title="谓词逻辑 – 量词的推理规则"></a>谓词逻辑 – 量词的推理规则</h2><table><thead><tr><th>中文</th><th>英文</th><th>表达式</th></tr></thead><tbody><tr><td>全称量词消去</td><td>(Universal  Instantiation,  UI):</td><td>(∀𝑥)𝐴(𝑥)→𝐴(𝑦)</td></tr><tr><td>全称量词引入</td><td>(Universal  Generalization,  UG):</td><td>𝐴 𝑦 →  (∀𝑥)𝐴 𝑥</td></tr><tr><td>存在量词消去</td><td>(Existential  Instantiation,  EI)</td><td>(∃𝑥)𝐴(𝑥) →  𝐴(𝑐)</td></tr><tr><td>存在量词引入</td><td>(Existential  Generalization,  EG)</td><td>𝐴(c) →  (∃𝑥)𝐴(𝑥)</td></tr></tbody></table><h2 id="谓词逻辑-知识表示的方法、特点"><a href="#谓词逻辑-知识表示的方法、特点" class="headerlink" title="谓词逻辑 - 知识表示的方法、特点"></a>谓词逻辑 - 知识表示的方法、特点</h2><ul><li><p>谓词公式表示知识的步骤</p><ul><li>定义谓词及个体。</li><li>变元赋值。</li><li>用连接词连接各个谓词，形成谓词公式。</li></ul></li></ul><p>例：用谓词逻辑表示“每个储存钱的人都得到利息”</p><p>定义谓词：</p><p>save(x)表示x储存钱, interest(x)表示x获得利息</p><p>则该知识可以表示为：</p><p>(∀x) ( save(x) ) → interest(x) )</p><table><thead><tr><th>优点</th><th>①自然性②精确性③严密性④容易实现</th></tr></thead><tbody><tr><td>局限性</td><td>①不能表示不确定的知识②组合爆炸③效率低</td></tr><tr><td>应用</td><td>①求解化学方面问题的QA3系统②STRIPS机器人行动规划系统③FOL机器证明系统</td></tr></tbody></table><h2 id="产生式表示法-–-定义"><a href="#产生式表示法-–-定义" class="headerlink" title="产生式表示法 – 定义"></a>产生式表示法 – 定义</h2><p>产生式表示法：又称为产生式规则（production rule）表示法。通常用于表示事实、规则以及它们的不确定性度量，适合于表示“事实性知识”和“规则性知识”。美国数学家波斯特在1943首先提出“产生式”这一术语</p><p>1972年，纽厄尔和西蒙在研究人类的认知模型中开发了基于规则的产生式系统。认知心理学(以西蒙、纽厄尔为代表)人的一切行为过程是由内部信息处理的过程所驱动。人类对于外部世界的感知、思考、决策和行为都是通过信息处理的方式来完成的。具体来说，信息处理过程可以分为“感知、注意、认知、记忆、思考、决策”几个阶段。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716234140627.png" alt="image-20240716234140627"></p><h2 id="产生式知识表示法-–-分类"><a href="#产生式知识表示法-–-分类" class="headerlink" title="产生式知识表示法 – 分类"></a>产生式知识表示法 – 分类</h2><table><thead><tr><th>规则知识</th><th>确定性规则知识的产生式表示</th><th>•基本形式： IF P THEN Q  或者： P  →  Q例：r4：IF动物会飞AND会下蛋THEN该动物是鸟</th></tr></thead><tbody><tr><td>不确定性规则知识的产生式表示</td><td>•基本形式： IF P THEN Q （置信度）  或者： P  →  Q（置信度）例：IF发烧THEN感冒（0.6）</td><td></td></tr><tr><td>事实性知识</td><td>确定性事实性知识的产生式表示</td><td>•三元组表示：（对象，属性，值）  或者：（关系，对象1，对象2）  例：老李年龄是40岁：（Li，age，40）老李和老王是朋友：（friend，Li，Wang）</td></tr><tr><td>不确定性事实性知识的产生式表示</td><td>•四元组表示：（对象，属性，值，置信度）  或者： （关系，对象1，对象2，置信度）  例：老李年龄很可能是40岁：（Li，age，40，0.8）老李和老王不大可能是朋友：（friend，Li，Wang，0.1）</td><td></td></tr></tbody></table><ul><li>产生式不仅可以表示精确的知识，还可以表示不精确知识。</li><li>产生式匹配可以是精确的，也可以是不精确的，只要按某种算法求出的相似度落在预先指定的范围内就认为是可匹配的。</li></ul><h2 id="产生式知识系统的案例-动物识别系统"><a href="#产生式知识系统的案例-动物识别系统" class="headerlink" title="产生式知识系统的案例 - 动物识别系统"></a>产生式知识系统的案例 - 动物识别系统</h2><p>例如：动物识别系统——识别虎、金钱豹、斑马、长颈鹿、鸵鸟、企鹅、信天翁等七种动物的产生式系统。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716234224051.png" alt="image-20240716234224051"></p><h2 id="框架表示法-–-框架理论、框架定义"><a href="#框架表示法-–-框架理论、框架定义" class="headerlink" title="框架表示法 – 框架理论、框架定义"></a>框架表示法 – 框架理论、框架定义</h2><p>1975年，美国明斯基提出了框架理论：人们对现实世界中各种事物的认识都是以一种类似于框架的结构存储在记忆当中。</p><p>框架表示法：一种结构化的知识表示方法，已在多种系统中得到应用。框架（frame）：一种描述所论对象（一个事物、事件或概念）属性的数据结构。一个框架由若干个被称为“槽”（slot）的结构组成，每一个槽又可根据实际情况划分为若干个“侧面”（faced）。一个槽用于描述所论对象某一方面的属性。一个侧面用于描述相应属性的一个方面。槽和侧面所具有的属性值分别被称为槽值和侧面值。</p><h2 id="框架表示法-–-框架的表示形式与结构"><a href="#框架表示法-–-框架的表示形式与结构" class="headerlink" title="框架表示法 – 框架的表示形式与结构"></a>框架表示法 – 框架的表示形式与结构</h2><p><strong>框架的一般表示形式：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716234412248.png" alt="image-20240716234412248"></p><h2 id="用框架表示知识的例子"><a href="#用框架表示知识的例子" class="headerlink" title="用框架表示知识的例子"></a>用框架表示知识的例子</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716234429579.png" alt="image-20240716234429579"></p><h2 id="框架表示法的特点"><a href="#框架表示法的特点" class="headerlink" title="框架表示法的特点"></a>框架表示法的特点</h2><ul><li><p><strong>框架表示法的特点</strong></p><ul><li><strong>结构性</strong>：便于表达结构性知识，能够将知识的内部结构关系及知识间的联系表示出来。</li><li><strong>继承性</strong>：框架网络中，下层框架可以继承上层框架的槽值，也可以进行补充和修改。</li><li><strong>自然性</strong>：框架表示法与人在观察事物时的思维活动是一致的。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.绪论与概述</title>
      <link href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能文章系列"><a href="#人工智能文章系列" class="headerlink" title="人工智能文章系列"></a>人工智能文章系列</h2><ul><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.AI%E7%BB%AA%E8%AE%BA%E4%B8%8E%E6%A6%82%E8%BF%B0/" title="1.绪论与概述">第1章：AI绪论与概述</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.1%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA/" title="2.1知识表示">第2.1章：知识表示</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.2%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/" title="2.2知识图谱">第2.2章：知识图谱</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86/" title="3.确定性推理">第3章：确定性推理</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%8E%A8%E7%90%86%E6%96%B9%E6%B3%95/" title="4.不确定性推理方法">第4章：不确定性推理方法</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.%E6%90%9C%E7%B4%A2%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5/" title="5搜索求解策略">第5章：搜索求解策略</a></li><li><a href="/2024/07/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F/" title="6专家系统">第6章：专家系统</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.%E7%BE%A4%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/" title="7.群智能算法">第7章：群智能算法</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/8.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/" title="8.机器学习概述">第8章：机器学习概述</a></li><li><a href="/2024/07/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/9.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" title="9.神经网络">第9章：神经网络</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章在研究人类社会科技革命演进的基础上，介绍人工智能的形成、定义、特征等；同时梳理人工智能发展简史，列举不同时期的重要里程碑事件，分析其技术和产业发展趋势，说明人工智能对社会发展的影响，并帮助学生了解就业方向。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>本系列文章的内容主要参考了王万良教授的人工智能导论与吴飞的人工智能导论模型与算法</li></ul><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716202907608.png" alt="image-20240716202907608" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716202940694.png" alt="image-20240716202940694" style="zoom:33%;" /><ul><li>其他的参考引用内容，如图片与插画等等绝大多数都来源与知乎，csdn与博客园等博客网站，如有侵权，联系侵删</li></ul><h2 id="人类社会4次科技革命"><a href="#人类社会4次科技革命" class="headerlink" title="人类社会4次科技革命"></a>人类社会4次科技革命</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716203331402.png" alt="image-20240716203331402" style="zoom:50%;" /><h2 id="信息革命的4次浪潮"><a href="#信息革命的4次浪潮" class="headerlink" title="信息革命的4次浪潮"></a>信息革命的4次浪潮</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716203547777.png" alt="image-20240716203547777" style="zoom:50%;" /><p>注：时间层面，中国延后10年左右。</p><h2 id="生产要素演进变迁"><a href="#生产要素演进变迁" class="headerlink" title="生产要素演进变迁"></a>生产要素演进变迁</h2><table><thead><tr><th></th><th>农耕社会</th><th>机械革命</th><th>电力革命</th><th>信息革命</th><th>智能革命</th></tr></thead><tbody><tr><td>生产力</td><td>人力 ,水力 ,火等</td><td>蒸汽机 、机械工具 、精密机床</td><td>强电：电力应用、 弱电：电子应用 、无线电：电场与  磁场 、机电一体化</td><td>计算机、互联网 、手机、 物联网</td><td>人工智能 、机器人技术、 虚拟现实、 量子技术、 可控核聚变 、清洁能源、 生物技术</td></tr><tr><td>生产要素</td><td>土地、劳动力</td><td>生产资料、资本、劳动力</td><td>生产资料、资本、劳动力</td><td>资本、工程师、信息</td><td>资本、信息、数据、算法模型</td></tr><tr><td>生产形态</td><td>小农经济</td><td>工厂生产</td><td>自动化</td><td>线上化</td><td>智能化</td></tr></tbody></table><h2 id="人工智能-重要性"><a href="#人工智能-重要性" class="headerlink" title="人工智能 - 重要性"></a>人工智能 - 重要性</h2><h3 id="自然界四大奥秘"><a href="#自然界四大奥秘" class="headerlink" title="自然界四大奥秘"></a>自然界四大奥秘</h3><ul><li>物质的本质（夸克）</li><li>宇宙的起源（有限无边模型）</li><li>生命的本质（无机、有机)</li><li>智能的发生（人的思维机制）</li></ul><h3 id="20世纪三大科学技术成就（生产力决定生产关系）"><a href="#20世纪三大科学技术成就（生产力决定生产关系）" class="headerlink" title="20世纪三大科学技术成就（生产力决定生产关系）"></a>20世纪三大科学技术成就（生产力决定生产关系）</h3><ul><li><p>空间技术（人造卫星、导弹等）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204448112.png" alt="image-20240716204448112"></p></li><li><p>原子能技术（核裂变原子弹）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204454059.png" alt="image-20240716204454059"></p></li><li><p>人工智能技术(机器学习、神经网络等）</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204502843.png" alt="image-20240716204502843"></p></li></ul><h2 id="人工智能-定义"><a href="#人工智能-定义" class="headerlink" title="人工智能 - 定义"></a>人工智能 - 定义</h2><ul><li>人工智能：用人工的方法在机器（计算机）上实现的智能；或者说是人们使机器具有类似于人的智能。或，智能主体可以理解数据及从中学习，并利用知识实现特定目标和任务的能力。</li><li>人工智能学科：一门研究如何构造智能机器（智能计算机）或智能系统，使它能模拟、延伸、扩展人类智能的学科。</li></ul><h2 id="人工智能-研究目的及特征"><a href="#人工智能-研究目的及特征" class="headerlink" title="人工智能 - 研究目的及特征"></a>人工智能 - 研究目的及特征</h2><p>通过探索智慧的实质，扩展人类智能——促使智能主体会听（语音识别、机器翻译等）、会看（图像识别、文字识别等）、会说（语音合成、人机对话等）、会思考（人机对弈、专家系统等）、会学习（知识表示，机器学习等）、会行动（机器人、自动驾驶汽车等）。</p><h2 id="人工智能-学派"><a href="#人工智能-学派" class="headerlink" title="人工智能 - 学派"></a>人工智能 - 学派</h2><table><thead><tr><th></th><th>学派</th><th></th><th>主要思想</th><th>代表方法</th><th>章节</th></tr></thead><tbody><tr><td>1</td><td>符号主义</td><td>知识表示</td><td>认知就是通过用有意义的表示符号进行推  导计算，使用公理和逻辑体系搭建AI系统</td><td>知识图谱决策树  专家系统等</td><td>第2、7.1章</td></tr><tr><td>逻辑推理</td><td>确定性推理：使用依赖关系(确定性)  不确定性推理：使用概率规则(不确定性)进行推理。</td><td>朴素贝叶斯等  搜索求解</td><td>第3、4、5  章</td><td></td><td></td></tr><tr><td>2</td><td>联结主义</td><td>基于联结模型、机器学习</td><td>利用数学模型来研究人类认知的方法，如用神经元的连接机制实现人工智能。</td><td>神经网络、SVM等</td><td>第7.2、8章</td></tr><tr><td>3</td><td>行为主义</td><td>强化学习</td><td>以控制论及感知-动作型控制系统原理模拟行为以复现人类智能。  基于价值、基于策略</td><td>Q-earning等</td><td></td></tr><tr><td>4</td><td>博弈论</td><td>对策论</td><td>研究具有斗争或竞争性质现象的数学理论  和方法。</td><td>纳什均衡</td><td></td></tr><tr><td>5</td><td>群体智能</td><td>生物群体</td><td>智能进化算法：对生物进化进行模拟，使用遗传算法和遗传编程。</td><td>遗传算法、蚁群粒子群等</td><td>第6章</td></tr></tbody></table><h2 id="AI分类"><a href="#AI分类" class="headerlink" title="AI分类"></a>AI分类</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204801469.png" alt="image-20240716204801469" style="zoom:50%;" /><h2 id="AI平台-分层体系架构"><a href="#AI平台-分层体系架构" class="headerlink" title="AI平台 - 分层体系架构"></a>AI平台 - 分层体系架构</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204816316.png" alt="image-20240716204816316" style="zoom:50%;" /><h2 id="AI演进-–-1个根基-3大阶段"><a href="#AI演进-–-1个根基-3大阶段" class="headerlink" title="AI演进 – 1个根基+3大阶段"></a>AI演进 – 1个根基+3大阶段</h2><ul><li>1个根基：知识、知识的表示、知识系统</li></ul><p>3大阶段：</p><ul><li>逻辑推理，确定与不确实推理</li><li>搜索、智能算法、专家系统，</li><li>机器学习、神经网络</li></ul><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716204850744.png" alt="image-20240716204850744" style="zoom:50%;" /><h2 id="AI发展-兴衰历程（3次高峰、2次危机）"><a href="#AI发展-兴衰历程（3次高峰、2次危机）" class="headerlink" title="AI发展 - 兴衰历程（3次高峰、2次危机）"></a>AI发展 - 兴衰历程（3次高峰、2次危机）</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205005449.png" alt="image-20240716205005449" style="zoom:50%;" /><h2 id="AI萌芽-50年代-图灵测试"><a href="#AI萌芽-50年代-图灵测试" class="headerlink" title="AI萌芽(50年代) - 图灵测试"></a>AI萌芽(50年代) - 图灵测试</h2><p>图灵测试：1950年，艾伦·图灵（Alan Turing）在发表的《计算机与智能》中提出“图灵测试”（测试机器是否能表现出与人无法区分的智能），用以说明人工智能的概念。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205037548.png" alt="image-20240716205037548" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205041341.png" alt="image-20240716205041341" style="zoom:33%;" /><h2 id="AI诞生-50年代-达特茅斯会议"><a href="#AI诞生-50年代-达特茅斯会议" class="headerlink" title="AI诞生(50年代) - 达特茅斯会议"></a>AI诞生(50年代) - 达特茅斯会议</h2><p>1956年，达特茅斯学院人工智能夏季研讨会上正式使用了人工智能这一术语。</p><p>这是人类历史上第一次人工智能研讨，标志着人工智能学科的诞生。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205110996.png" alt="image-20240716205110996" style="zoom:50%;" /><p>报告列举了Artificial Inteligence值得关注七个问题</p><ul><li>Automatic Computers</li><li>How Can a Computer be Programmed</li><li>to Use a anguage</li><li>Neuron Nets</li><li>Theory of the Size of a Calcuation</li><li>Self-improvement：自我学习与提高</li><li>Abstractions：归纳与演绎</li><li>Randomness and Creativity</li></ul><p>让机器能像人那样认知、思考和学习,即用计算机模拟人的智能。</p><p>人工智能（Artifilcial Inteligence）是以机器为载体所展示的人类智能，因此人工智能也被称为机器智能</p><h2 id="第1次高峰-50-60年代-感知机、机器学习定义"><a href="#第1次高峰-50-60年代-感知机、机器学习定义" class="headerlink" title="第1次高峰(50-60年代) - 感知机、机器学习定义"></a>第1次高峰(50-60年代) - 感知机、机器学习定义</h2><ul><li>1957 年 ， 弗兰克 · 罗森布拉特在一台IBM- 704计算机上模拟实现了一种他发明的叫做“感知机”（Perceptron）的神经网络模型。</li><li>1959年，萨缪尔（Arthur Samue）给机器学习了一个明确概念： Field of study that gives computers the ability to learn without being expicity programmed.（机器学习是研究如何让计算机不需要显式的程序也可以具备学习的能力）。</li></ul><h2 id="第1次低谷-60末-70年代中-XOR线性不可分"><a href="#第1次低谷-60末-70年代中-XOR线性不可分" class="headerlink" title="第1次低谷(60末-70年代中) - XOR线性不可分"></a>第1次低谷(60末-70年代中) - XOR线性不可分</h2><p>1969年，“符号主义”代表人物马文·明斯基（Marvin Minsky）的著作《感知器》提出对XOR线性不可分的问题。单层感知器无法划分XOR原数据，解决这问题需要引入更高维非线性网络（MP, 至少需要两层），但多层网络并无有效的训练算法。这些论点给神经网络研究以沉重的打击，神经网络的研究走向长达10年的低潮时期。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205752326.png" alt="image-20240716205752326" style="zoom: 50%;" /><p>1974年起，各国开始陆续消减在AI研究方面的经费开支。</p><h2 id="第2次高峰-60-70年代-专家系统、神经网络-BP"><a href="#第2次高峰-60-70年代-专家系统、神经网络-BP" class="headerlink" title="第2次高峰(60-70年代) - 专家系统、神经网络+BP"></a>第2次高峰(60-70年代) - 专家系统、神经网络+BP</h2><p>1974年，哈佛大学沃伯斯(Paul Werbos)博士论文里，首次提出了通过误差的反向传播(BP)来训练人工神经网络，但在该时期未引起重视。</p><ul><li>专家系统（Expert Systems）可视作“知识库(knowledge base)”和 “推理机(inference machine)”的结合。它是AI的一个重要分支，同自然语言理解，机器人学并列为AI的三大研究方向。</li><li>BP算法的基本思想不是（如感知器那样）用误差本身去调整权重，而是用误差的导数（梯度）调整。通过误差的梯度做反向传播，更新模型权重, 以降低学习的误差，拟合学习目标，实现“网络的万能近似功能”的过程。</li></ul><h2 id="第2次高峰-80年代-应用发展新高峰"><a href="#第2次高峰-80年代-应用发展新高峰" class="headerlink" title="第2次高峰(80年代) - 应用发展新高峰"></a>第2次高峰(80年代) - 应用发展新高峰</h2><p>专家系统模拟人类专家的知识和经验解决特定领域的问题，实现了人工智能从理论研究走向实际应用、从一般推理策略探讨转向运用专门知识的重大突破。而机器学习(特别是神经网络)探索不同的学习策略和各种学习方法，在大量的实际应用中也开始慢慢复苏。</p><ul><li>1980年，美国卡内基梅隆大学(CMU) 召开了第一届机器学习国际研讨会， 标志着机器学习研究已在全世界兴起。</li><li>1980 年 ， CMU 为 DEC公司 开发了一个名为 XCON 的专家系统， 每年为公司节省4000万美元，取得巨大成功。</li><li>1981年，保罗（R.P.Pau出版第一本机器人学课本 “ Robot Manipuator ： Mathematics ， Programmings and Control”，标志着机器人学科走向成熟。</li><li>1982 年， 马尔（ David Marr ） 发表代表作《视觉计算理论》提出计算机视 觉 （ Computer Vision）的概念，并构建系统的视觉理论，对认知科 学 （ Cognitive Science）也产生了很深远的影响。</li></ul><h2 id="第2次高峰-80年代-应用发展新高峰-神经网络"><a href="#第2次高峰-80年代-应用发展新高峰-神经网络" class="headerlink" title="第2次高峰(80年代) - 应用发展新高峰(神经网络)"></a>第2次高峰(80年代) - 应用发展新高峰(神经网络)</h2><p>1982年，约翰·霍普菲尔德发明了霍普菲尔德网络，是最早RNN雏形。它是一种单层反馈神经网络（神经网络结构主要可分为“前馈NN、反馈NN、图网络）。它的出现振奋神经网络领域，可在机器学习、联想记忆、模式识别、优化计算、VSI和光学设备的并行实现等方面广泛应用。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716205938183.png" alt="image-20240716205938183"></p><h2 id="第2次高峰-90年代-应用发展新高峰"><a href="#第2次高峰-90年代-应用发展新高峰" class="headerlink" title="第2次高峰(90年代) - 应用发展新高峰"></a>第2次高峰(90年代) - 应用发展新高峰</h2><p>1997年国际商业机器公司（简称IBM）深蓝超级计算机战胜了国际象棋世界冠军卡斯帕罗夫。深蓝是基于暴力穷举实现国际象棋领域的智能，通过生成所有可能的走法然后执行尽可能深的搜索，并不断对局面进行评估，尝试找出最佳走法。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210133156.png" alt="image-20240716210133156"></p><p>1998年，英国人蒂·李(Tim Berners-lee)提出语义网(Semantic Web)。</p><p>核心思想：给万维网文档（如HTML）添加能被计算机理解的语义(Meta data)，使互联网成为基于语义链接的通用信息交换媒介</p><p>构建一个能够实现人与电脑无障碍沟通的智能网络</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210226583.png" alt="image-20240716210226583"></p><h2 id="第2次低谷-80年代末"><a href="#第2次低谷-80年代末" class="headerlink" title="第2次低谷(80年代末)"></a>第2次低谷(80年代末)</h2><p>人工智能发展初期的突破性进展大大提升了人们对人工智能的期望，人们开始尝试更 具挑战性任务，然而计算力及理论等匮乏使得不切实际目标的落空，AI发展走入低谷。</p><p>1974-80及1987-93是两个主要低谷期，伴随的是失望及批评，以及研究资金断绝。</p><p>其他还有几个较小的低谷，包括：</p><ul><li>1966年：机器翻译的失败</li><li>1970年：联结主义的放弃。</li><li>1971-75年：美国国防高等研究计划署在在卡内基美隆大学所进行的研究遭到挫折。</li><li>1973年：英国的人工智研究受到莱特希尔对国会的报告所影响而大幅减少。</li><li>1973-74年：美国国防高等研究计划削减对人工智能的学术研究。</li><li>1987年：isp机器市场的萎缩。苹果和IBM公司生产的中小型台式机性能都超过了 Symboics等厂商生产的通用计算机。从此，专家系统风光不再。</li><li>1988年：美国国家战略计算计划取消对AI研究的新花费。</li><li>1993年：专家系统逐渐达到极限。</li><li>20世纪90年代：日本第五代计算机计划未能达到预期目标。</li></ul><h2 id="第3次高峰-2000年代-–-基于大数据的机器学习"><a href="#第3次高峰-2000年代-–-基于大数据的机器学习" class="headerlink" title="第3次高峰(2000年代) – 基于大数据的机器学习"></a>第3次高峰(2000年代) – 基于大数据的机器学习</h2><p>互联网技术迅速发展，加速AI的创新研究，促使AI技术进一步走向实用化，AI各个领域取得长足进步。</p><ul><li>2000年初，由于专家系统需要编码太多的显式规则，降低了效率并增加了成本，人工智能研究的重心从基于知识系统转向了基于大数据的机器学习方向。</li><li>2003年，Google 3篇奠基性论文，为大数据存储及分布式处理提供思路，奠定现代大数据技术理论基础。</li><li>Bigdata内容包括：非结构化文件分布式存储(GFS) 、 分布式计算 (MapReduce) 、 结构化数据存储 (BigTable)</li></ul><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210416951.png" alt="image-20240716210416951" style="zoom: 67%;" /><h2 id="第3次高峰-2000年代-机器人学"><a href="#第3次高峰-2000年代-机器人学" class="headerlink" title="第3次高峰(2000年代) - 机器人学"></a>第3次高峰(2000年代) - 机器人学</h2><p>2005年，波士顿动力公司推出一款动力平衡四足机器狗，有较强的通用性，可适应较复杂的地形</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210444151.png" alt="image-20240716210444151"></p><h2 id="第3次高峰-2000年代-深度学习诞生"><a href="#第3次高峰-2000年代-深度学习诞生" class="headerlink" title="第3次高峰(2000年代) - 深度学习诞生"></a>第3次高峰(2000年代) - 深度学习诞生</h2><ul><li>2006年，杰弗里·辛顿以及他的学生鲁斯兰·萨拉赫丁诺夫正式提出了深度学习的概念（Deeping earning），开启了深度学习在学术界和工业界的浪潮。</li><li>2006年也被称为深度学习元年，杰弗里·辛顿也因此被称为深度学习之父。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210506789.png" alt="image-20240716210506789"></p><h2 id="第3次高峰-2010年代-暴发式增长-深度学习"><a href="#第3次高峰-2010年代-暴发式增长-深度学习" class="headerlink" title="第3次高峰(2010年代) - 暴发式增长(深度学习)"></a>第3次高峰(2010年代) - 暴发式增长(深度学习)</h2><p>随着大数据、云计算物联网等信息技术发展， 泛在感知数据和图形处理器等计算平台推动以深度神经网络为代表的AI 技术飞速发展， 大幅跨越科学与应用之间的技术鸿沟。</p><p>图像分类、语音识别、知识问答、人机对弈、无人驾驶等人工智能技术实现重大技术突破， 迎来爆发式增长的新高潮。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210555381.png" alt="image-20240716210555381" style="zoom:50%;" /><h2 id="第3次高峰-2010年代-暴发式增长-知识图谱"><a href="#第3次高峰-2010年代-暴发式增长-知识图谱" class="headerlink" title="第3次高峰(2010年代) - 暴发式增长(知识图谱)"></a>第3次高峰(2010年代) - 暴发式增长(知识图谱)</h2><p>2012年，谷歌正式发布谷歌知识图谱（Google Knowledge Graph），它是Google的一个从多种信息来源汇集的知识库。</p><p>通过知识图谱在普通的字串搜索上叠一层相互之间的关系，协助使用者更快找到所需的资料的同时，也可以知识为基础的搜索更近一步，以提高Google搜索的质量。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210612667.png" alt="image-20240716210612667" style="zoom:50%;" /><h2 id="第3次高峰-2010年代-暴发式增长-深度学习-1"><a href="#第3次高峰-2010年代-暴发式增长-深度学习-1" class="headerlink" title="第3次高峰(2010年代) - 暴发式增长(深度学习)"></a>第3次高峰(2010年代) - 暴发式增长(深度学习)</h2><p>2015年，为纪念人工智能概念提出60周年，深度学习三巨头YannleCun、 Bengio和Hinton（他们于2018年共同获得了图灵奖）推出了深度学习的联合综述《Deep learning》。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210636862.png" alt="image-20240716210636862" style="zoom:50%;" /><h2 id="第3次高峰-2010年代-暴发式增长-强化学习"><a href="#第3次高峰-2010年代-暴发式增长-强化学习" class="headerlink" title="第3次高峰(2010年代) - 暴发式增长(强化学习)"></a>第3次高峰(2010年代) - 暴发式增长(强化学习)</h2><ul><li>2016年，AlphaGo前后战胜围棋世界冠军、职业九段棋手李世石、柯洁等人。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210658706.png" alt="image-20240716210658706"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210704150.png" alt="image-20240716210704150"></p><ul><li>2017年，更新的AlphaGo Zero，可以结合强化学习进行自我训练。它在下棋前完全不知道游戏规则，完全是通过自己的试验和摸索，洞悉棋局和游戏的规则，形成自己的决策。随着自我博弈的增加，神经网络逐渐调整，提升下法胜率。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210714558.png" alt="image-20240716210714558"></p><ul><li>更为厉害的是，随着训练的深入， AlphaGo Zero 还独立发现新游戏规则，并走出了新策略，为围棋这项古老游戏带来新见解。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210725173.png" alt="image-20240716210725173"></p><h2 id="第4次高峰-2020年至今-新纪元"><a href="#第4次高峰-2020年至今-新纪元" class="headerlink" title="第4次高峰(2020年至今) - 新纪元"></a>第4次高峰(2020年至今) - 新纪元</h2><ul><li>2020年，OpenAI开发的文字生成 (text generation) 人工智能 GPT-3，它具有1,750亿个参数的自然语言深度学习模型，可在“答题、翻译、写文章”上达到最先进的性能。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210740702.png" alt="image-20240716210740702"></p><ul><li>2020年，马斯克的脑机接口公司Neuralink举行现场直播，展示 了植入Neuralink设备的实验猪的脑部活动。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210747971.png" alt="image-20240716210747971"></p><ul><li>2020 年， 谷歌DeepMind 的 AlphaFod2解决了蛋白质结构预测的里程碑式问题。它在国际竞赛上展示的准确性 可 与 冷 冻 电 子 显 微 镜（cryo-EM）、核磁共振或X射线晶体学等相媲美。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210758832.png" alt="image-20240716210758832"></p><h2 id="第4次高峰-2020年至今-新纪元-ChatGPT4"><a href="#第4次高峰-2020年至今-新纪元-ChatGPT4" class="headerlink" title="第4次高峰(2020年至今) - 新纪元(ChatGPT4)"></a>第4次高峰(2020年至今) - 新纪元(ChatGPT4)</h2><p>2023年3月15日，OpenAI发布GPT-4，这是其支持ChatGPT和新必应等应用程序的最新AI大型语言模型。它的输入可以是文字（上限2.5万字），还可以是图像。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210828704.png" alt="image-20240716210828704"></p><p>问：(图片示意) 手套掉下去会怎样？</p><p>ChatGPT回答：它会掉到木板上，并且球会被弹飞。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210833580.png" alt="image-20240716210833580"></p><h2 id="哥伦布发现新大陆-–-先进文明的降维打击"><a href="#哥伦布发现新大陆-–-先进文明的降维打击" class="headerlink" title="哥伦布发现新大陆 – 先进文明的降维打击"></a>哥伦布发现新大陆 – 先进文明的降维打击</h2><h3 id="欧洲人的财富发现"><a href="#欧洲人的财富发现" class="headerlink" title="欧洲人的财富发现"></a>欧洲人的财富发现</h3><p>使得西班牙成为了当时扩张最为迅猛、领土最广阔的国家之一，西班牙更成为当时的世界霸主之一。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210906577.png" alt="image-20240716210906577"></p><h3 id="美洲原著民的种族灾难"><a href="#美洲原著民的种族灾难" class="headerlink" title="美洲原著民的种族灾难"></a>美洲原著民的种族灾难</h3><p>哥伦布的到来是一场史无前例的灾难，它使人口众多、欣欣向荣的美洲土著人几乎灭绝90%以上人口。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210914796.png" alt="image-20240716210914796"></p><h2 id="AI产业-业界应用及发展现状"><a href="#AI产业-业界应用及发展现状" class="headerlink" title="AI产业 - 业界应用及发展现状"></a>AI产业 - 业界应用及发展现状</h2><p>人工智能在国内外应用均以科技公司和互联网企业最为突出。应用技术以机器学习、自然语言处理、计算机视觉为主。已广泛应用于广告推荐、医疗诊断、个人助理、客户服务、图像识别等领域；国外Google、IBM、Facebook等公司的应用范围更广。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210936890.png" alt="image-20240716210936890" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716210955770.png" alt="image-20240716210955770" style="zoom: 67%;" /><h2 id="AI产业-生态图谱"><a href="#AI产业-生态图谱" class="headerlink" title="AI产业 - 生态图谱"></a>AI产业 - 生态图谱</h2><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211015045.png" alt="image-20240716211015045" style="zoom: 50%;" /><h2 id="AI发展基础-三大要素"><a href="#AI发展基础-三大要素" class="headerlink" title="AI发展基础 - 三大要素"></a>AI发展基础 - 三大要素</h2><p>新一轮人工智能离不开大数据、高性能分布式并行计算框架以及效率更高的算法、硬件的发展。</p><h3 id="要素1：大数据"><a href="#要素1：大数据" class="headerlink" title="要素1：大数据"></a>要素1：大数据</h3><p>燃料：海量结构化数据和非结构化数据为各类机器学习和深度学习计算引擎提供了燃料。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211052709.png" alt="image-20240716211052709" style="zoom: 150%;" /><h3 id="要素2：计算能力"><a href="#要素2：计算能力" class="headerlink" title="要素2：计算能力"></a>要素2：计算能力</h3><p>硬件设施：高性能分布式并行计算框架以及以GPU为代表的计算加速器（类似的加速器还包括FPGA、 TPU等）技术</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211110669.png" alt="image-20240716211110669"></p><h3 id="要素3：算法"><a href="#要素3：算法" class="headerlink" title="要素3：算法"></a>要素3：算法</h3><p>软件灵魂：深度学习等算法随着分布式计算框架等基础软件的完善，展现了强大的预测能力</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211126824.png" alt="image-20240716211126824"></p><h2 id="AI发展基础-数据层面"><a href="#AI发展基础-数据层面" class="headerlink" title="AI发展基础 - 数据层面"></a>AI发展基础 - 数据层面</h2><p>数据是现实世界映射构建虚拟世界的基本要素，随着数据量以指数形式增长，开拓的虚拟世界的疆土也不断扩张。不同于AI算法开源，关键数据往往是不开放的，数据隐私化、私域化是一种趋势。数据之于AI应用，如同流量是互联网的护城河，有核心数据才有关键的AI能力。</p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211143526.png" at="image-20240716211143526" stye="zoom: 67%;" style="zoom:67%;" /><h2 id="AI发展基础-算力层面"><a href="#AI发展基础-算力层面" class="headerlink" title="AI发展基础 - 算力层面"></a>AI发展基础 - 算力层面</h2><p>2010年代以来深度学习浪潮，很大归功于计算能力的进步。</p><ul><li>量子计算</li><li>边缘计算</li><li>类脑计算</li><li>AI计算中心</li></ul><blockquote><p>推理就是计算（reason is nothing but reckoning） -托马斯.霍布斯</p></blockquote><h2 id="AI发展基础-算法层面-策略优化热点"><a href="#AI发展基础-算法层面-策略优化热点" class="headerlink" title="AI发展基础 - 算法层面 - 策略优化热点"></a>AI发展基础 - 算法层面 - 策略优化热点</h2><ul><li>分布式 隐私保护</li><li>数据和机理融合</li><li>神经网络模型结构演进发展</li><li>多学派方法融合发展</li></ul><h2 id="AI发展趋势-产业生态"><a href="#AI发展趋势-产业生态" class="headerlink" title="AI发展趋势 - 产业生态"></a>AI发展趋势 - 产业生态</h2><ul><li>智能服务呈线下和线上的无缝结合</li><li>智能化应用场景从单一向多元发展</li><li>人工智能和实体经济深度融合进程将进一步加快</li></ul><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/ai%E5%AF%BC%E8%AE%BA/image-20240716211334341.png" at="image-20240716211334341" stye="zoom:50%;" style="zoom: 50%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于git clone速度极慢的解决方法</title>
      <link href="/2024/07/16/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/16/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在写这篇文章前，也搜索过很多相关git clone速度很慢的解决方法，但是很多很麻烦，或者是非常的不稳定，我在自己无意间尝试中发现了一个可以很稳定给git clone提速的方法，那就是通过使用代理的方法来进行提速，因此如果你没有一个可靠且稳定的梯子，接下来的就不用看了</p><h2 id="尝试过的方法-未成功"><a href="#尝试过的方法-未成功" class="headerlink" title="尝试过的方法(未成功)"></a>尝试过的方法(未成功)</h2><p>既然有成功，那么在探索过程中也必定会有失败的方法，下面也介绍一下我试过的没啥用的方法，给各位避雷，不用花时间去刻意尝试了😊😊</p><h3 id="更改github的hosts-使用steam-（用处不大）"><a href="#更改github的hosts-使用steam-（用处不大）" class="headerlink" title="更改github的hosts&#x2F;使用steam++（用处不大）"></a>更改github的hosts&#x2F;使用steam++（用处不大）</h3><p>这两个方法本质上都是一样的，就是改hosts，网上说(<strong>不是我说的哈，与本人没有任何的关系</strong>)是github的dns会被不定时污染，所以访问起来特别的慢</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/afbb21aff4e2475393c71518b7db7dc6.png" alt="img"></p><p>典中典🤣，然后通过给定github的hosts，让dns能够解析到ping值低的服务器上。但是这种方法对git clone 的下载速度没啥用（亲测），不过有时候访问github网页还是行的，具体的可以参照这个<a href="https://github.com/521xueweihan/GitHub520.git">https://github.com/521xueweihan/GitHub520.git</a></p><h3 id="将github的项目导入到gitee中-有用，但是麻烦的要死"><a href="#将github的项目导入到gitee中-有用，但是麻烦的要死" class="headerlink" title="将github的项目导入到gitee中(有用，但是麻烦的要死)"></a>将github的项目导入到gitee中(有用，但是麻烦的要死)</h3><p>这个就不必讲步骤了，确实能显著提高git clone的速度，毕竟gitee的服务器在国内，但是很麻烦</p><h2 id="让git使用proxy（魔法，亲测有效果而且很简单）"><a href="#让git使用proxy（魔法，亲测有效果而且很简单）" class="headerlink" title="让git使用proxy（魔法，亲测有效果而且很简单）"></a>让git使用proxy（魔法，亲测有效果而且很简单）</h2><p>我试过用🐱挂梯子，然后再github上直接点击Code里面的Download ZIP</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/43c4d3ecbeb74237bdf127dc4d68d282.png" alt="img"></p><p>这样的下载速度能显著提高，但是这样是无法把git仓库也克隆下来的，而且挂梯子只能作用于浏览器的浏览，对于命令行的git clone是没有作用的，于是！我查阅git的官方文档发现git本身也是可以使用代理的，在命令行中可以这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:port</span><br><span class="line">git config --global https.proxy 127.0.0.1:port</span><br></pre></td></tr></table></figure><p>很多教程中都不会解释这个port端口号要如何设置，或者是随便填一个莫名其妙的端口号，造成类似以下的报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/xxxxxx&#x27;</span>: Failed to connect to 127.0.0.1 port 1082 after 2075 ms: Couldn<span class="string">&#x27;t connect to server</span></span><br></pre></td></tr></table></figure><p>实际上这个端口号是不能乱填的。应该被设置你的代理软件所使用的端口号，比如我自己使用的是🐱，他的默认端口为</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/3fe9be36296246c59bb87eea8e34e6da.png" alt="img"></p><p>或者我不喜欢用命令行敲代码的方式进行代理设置，图形化界面更友好一点，该怎么办呢？</p><p>其实也可以这样，用任意的文本编辑器打开”C:\Users\你自己的创建的用户.gitconfig”，然后在这个文件输入就行了</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/6833f24c911c4e9586ab37b2329ffa41.png" alt="img"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="使用代理前"><a href="#使用代理前" class="headerlink" title="使用代理前"></a>使用代理前</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/a0fd1740a6d34822b2bf8602930b4fa6.png" alt="img"></p><p>12.00kib&#x2F;s什么概念？我tmd某云盘下载速度都比这快👿</p><h3 id="使用代理后"><a href="#使用代理后" class="headerlink" title="使用代理后"></a>使用代理后</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/git%20clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/a2f9380496e5480892871a12cde87e5a.png" alt="img">速度虽然说也不是很快，但也改善了很多了😊</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本遗传算法（SGA）程序实现</title>
      <link href="/2024/07/16/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/16/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境推荐"><a href="#运行环境推荐" class="headerlink" title="运行环境推荐"></a>运行环境推荐</h2><ol><li>anaconda3，集成了常用的用于科学计算的包，以及python解释器(本例使用的解释器版本为3.11.5)</li><li>编辑器或者IDE：Vscode或者pycharm</li></ol><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文将SGA遗传算法按照ppt的编写分为<strong>八个模块</strong>(python文件)进行阐述</p><p>分别是：</p><ol><li>geneEncoding.py</li><li>ga.py(主功能模块，运行此模块即可运行遗传算法)</li><li>best.py</li><li>calfitValue.py</li><li>calobjValue.py</li><li>crossover.py</li><li>mutation.py</li><li>selection.py</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/%E5%88%9D%E5%A7%8B%E7%BB%93%E6%9E%84.png" alt="初始结构"></p><p>具体的流程图解释如下：</p><ol><li><p>种群初始化：对参数进行编码，适应度函数的设计，以及初始群体的设定</p></li><li><p>适应度计算：为每次群体中的个体赋予适应度，方便后面遗传操作的进行</p></li><li><p>选择操作：对群体进行<strong>选择</strong>，选择出适应度值较大的一部分优势群体；</p></li><li><p>交叉操作：对优势种群进行 “<strong>交配</strong>”，更容易产生优秀的个体；</p></li><li><p>变异操作：对染色体中的基因用一定的变异方法进行变异</p><p><strong>下面以计算函数最大值为例，阐述SGA的具体步骤</strong></p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726005829230.png" alt="image-20240726005829230"></p></li></ol><h3 id="基因编码"><a href="#基因编码" class="headerlink" title="基因编码"></a>基因编码</h3><p>在本例中，<strong>染色体的编码方式采用二进制编码</strong>，即用若干二进制数表示一个个体，将原问题的解空间映射到位串空间B&#x3D;{0,1}上</p><p>相应模块geneEncoding.py如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief  生成一个二元组的种群，其中种群内的个体以二进制的形式来表示</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop_size       整个种群的个体数量</span></span><br><span class="line"><span class="string">        chrom_length   染色体的长度，其实就是二元组内元素的二进制数的个数，</span></span><br><span class="line"><span class="string">                       比如当chrom_length=4,种群内的一个个体可以表示为[1,1,0,1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval 返回一个种群,由于初始化时第一个元素是空列表[],因此返回的是pop[1:]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneEncoding</span>(<span class="params">pop_size, chrom_length</span>):</span><br><span class="line">    pop = [[]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pop_size):</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(chrom_length):</span><br><span class="line">            temp.append(random.randint(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        pop.append(temp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pop[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试部分</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pop_size = <span class="number">5</span>  <span class="comment"># 种群数量</span></span><br><span class="line">    chrom_length = <span class="number">2</span>  <span class="comment"># 染色体长度</span></span><br><span class="line">    pop = geneEncoding(pop_size, chrom_length)</span><br><span class="line">    <span class="built_in">print</span>(pop, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(pop), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以注意到，经过编码生成后的种群，可以看作是一个二维矩阵，其中矩阵的<strong>size&#x3D;(种群大小，染色体编码长度)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/20240716161758.png"></p><h3 id="个体适应度的计算"><a href="#个体适应度的计算" class="headerlink" title="个体适应度的计算"></a>个体适应度的计算</h3><p>适应度函数得出的值越大表明个体越优秀，所以一般情况下，<strong>在求解函数最大值的时候，适应度函数就是求解函数本身</strong>，求解最小值的时候适应度函数就是函数的倒数。<strong>在本例中求取最大值，所以适应度函数就是函数本身</strong>。</p><p>相应模块calobjValue.py内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief  解码，将传进来的二进制序列转换成十进制</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop_size       种群的个体数量</span></span><br><span class="line"><span class="string">        chrom_length   染色体的长度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval 十进制序列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decodechrom</span>(<span class="params">pop, chrom_length</span>):</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pop)):</span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(chrom_length):</span><br><span class="line">            t += pop[i][j] * (math.<span class="built_in">pow</span>(<span class="number">2</span>, j))</span><br><span class="line">        temp.append(t)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 根据适应度函数，计算种群中个体的适应度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop            种群，一个二元组</span></span><br><span class="line"><span class="string">        chrom_length   染色体的长度</span></span><br><span class="line"><span class="string">        max_value      染色体长度允许的最大值</span></span><br><span class="line"><span class="string">@retval 个体适应度的列表</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calobjValue</span>(<span class="params">pop, chrom_length, max_value</span>):</span><br><span class="line">    temp1 = []</span><br><span class="line">    obj_value = []</span><br><span class="line">    <span class="comment"># 将pop解码</span></span><br><span class="line">    temp1 = decodechrom(pop, chrom_length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp1)):</span><br><span class="line">        x = temp1[i] * max_value / (math.<span class="built_in">pow</span>(<span class="number">2</span>, chrom_length) - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 适应度函数</span></span><br><span class="line">        obj_value.append(<span class="number">10</span> * math.sin(<span class="number">5</span> * x) + <span class="number">7</span> * math.cos(<span class="number">4</span> * x))</span><br><span class="line">    <span class="keyword">return</span> obj_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试部分</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pop_size = <span class="number">5</span>  <span class="comment"># 种群数量</span></span><br><span class="line">    pop = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">    test = calobjValue(pop, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(test)</span><br></pre></td></tr></table></figure><h3 id="淘汰"><a href="#淘汰" class="headerlink" title="淘汰"></a>淘汰</h3><p>在上一步根据适应度函数计算出个体相应的适应度之后，得出来的结果中，有些个体对应的适应度会是<strong>负值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/image-20240126195017616.png" alt="image-20240126195017616"></p><p>说明这些个体，是不适合<strong>“生存”</strong>的，我们需要将这部分适应度为负值的个体进行淘汰和去除</p><p>具体方法如calfitValue.py所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 对种群中不适合的个体进行淘汰，其实就是去除负值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  obj_value  个体适应度的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval 个体适应度淘汰后的列表</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calfitValue</span>(<span class="params">obj_value</span>):</span><br><span class="line">    fit_value = []</span><br><span class="line">    c_min = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(obj_value)):</span><br><span class="line">        <span class="keyword">if</span> obj_value[i] + c_min &gt; <span class="number">0</span>:</span><br><span class="line">            temp = c_min + obj_value[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = <span class="number">0.0</span></span><br><span class="line">        fit_value.append(temp)</span><br><span class="line">    <span class="keyword">return</span> fit_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="保存最优解"><a href="#保存最优解" class="headerlink" title="保存最优解"></a>保存最优解</h3><p>在上一步去除掉本次迭代中的不适应个体后，我们需要从当前种群中保存本次迭代中的<strong>最优个体以及对应的基因</strong>，这里采取的方法是直接从适应度列表中找一个<strong>适应度最大</strong>的个体</p><p>具体实现如模块best.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 找出最优解和最优解的基因编码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop         种群，一个二元组</span></span><br><span class="line"><span class="string">        fit_value   适应度列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval 最优解及其基因</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">best</span>(<span class="params">pop, fit_value</span>):</span><br><span class="line">    best_individual = []</span><br><span class="line">    best_fit = fit_value[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(pop)):</span><br><span class="line">        <span class="keyword">if</span> fit_value[i] &gt; best_fit:</span><br><span class="line">            best_fit = fit_value[i]</span><br><span class="line">            best_individual = pop[i]</span><br><span class="line">    <span class="keyword">return</span> [best_individual, best_fit]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择-复制"><a href="#选择-复制" class="headerlink" title="选择(复制)"></a>选择(复制)</h3><p>个体选择的方法有很多种(可以自己参照前面的ppt)，在我这个例子中，我采用是<strong>轮盘赌选择算法</strong></p><p><strong>注：</strong> 在本例中选择后的种群个体数目和原种群个数相同。</p><p>具体实现如selection.py模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算种群中所有个体的适应度总和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">fit_value</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fit_value)):</span><br><span class="line">        total += fit_value[i]</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积概率</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cumsum</span>(<span class="params">fit_value</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fit_value) - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">            t += fit_value[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        fit_value[i] = t</span><br><span class="line">        fit_value[<span class="built_in">len</span>(fit_value) - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 对种群进行选择复制</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop         种群，一个二元组</span></span><br><span class="line"><span class="string">        fit_value   适应度列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval 新的种群</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selection</span>(<span class="params">pop, fit_value</span>):</span><br><span class="line">    <span class="comment"># 存放每个个体被选择的概率的列表，采用的分配方法是适应度比例方法</span></span><br><span class="line">    newfit_value = []</span><br><span class="line">    <span class="comment"># 适应度总和</span></span><br><span class="line">    total_fit = <span class="built_in">sum</span>(fit_value)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fit_value)):</span><br><span class="line">        newfit_value.append(fit_value[i] / total_fit)</span><br><span class="line">    <span class="comment"># 计算累计概率</span></span><br><span class="line">    cumsum(newfit_value)</span><br><span class="line">    ms = []</span><br><span class="line">    pop_len = <span class="built_in">len</span>(pop)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pop_len):</span><br><span class="line">        ms.append(random.random())</span><br><span class="line">    ms.sort()</span><br><span class="line">    fitin = <span class="number">0</span></span><br><span class="line">    newin = <span class="number">0</span></span><br><span class="line">    newpop = pop</span><br><span class="line">    <span class="comment"># 转轮盘选择法</span></span><br><span class="line">    <span class="keyword">while</span> newin &lt; pop_len:</span><br><span class="line">        <span class="keyword">if</span> ms[newin] &lt; newfit_value[fitin]:</span><br><span class="line">            newpop[newin] = pop[fitin]</span><br><span class="line">            newin = newin + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fitin = fitin + <span class="number">1</span></span><br><span class="line">    pop = newpop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试部分</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pop = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">    fit = [<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(pop)</span><br><span class="line">    selection(pop, fit)</span><br><span class="line">    <span class="built_in">print</span>(pop)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="交叉"><a href="#交叉" class="headerlink" title="交叉"></a>交叉</h3><p>交叉方法我在这个例子中选择的是<strong>单点交叉(Single-point-Crossover)</strong>,单点交叉就是随机选择双亲染色体上的位置。此位置称为交叉点 (crossover point) 或切割点 (cut point)。该点右边的基因在双亲染色体之间交换，得到了两个后代，每个后代都携带着双亲的一些遗传信息。可以配合图像理解</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/v2-145291fe412063445c57636a88759187_1440w.webp"></p><p>程序实现见crossover.py模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 采用单点交叉</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop  种群，一个二元组</span></span><br><span class="line"><span class="string">        pc   交叉概率</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval none</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">pop, pc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pop) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; pc:</span><br><span class="line">            cpoint = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(pop[<span class="number">0</span>]))</span><br><span class="line">            temp1 = []</span><br><span class="line">            temp2 = []</span><br><span class="line">            temp1.extend(pop[i][<span class="number">0</span>:cpoint])</span><br><span class="line">            temp1.extend(pop[i + <span class="number">1</span>][cpoint : <span class="built_in">len</span>(pop[i])])</span><br><span class="line">            temp2.extend(pop[i + <span class="number">1</span>][<span class="number">0</span>:cpoint])</span><br><span class="line">            temp2.extend(pop[i][cpoint : <span class="built_in">len</span>(pop[i])])</span><br><span class="line">            pop[i] = temp1</span><br><span class="line">            pop[i + <span class="number">1</span>] = temp2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h3><p>变异方式我在本例中采取的是<strong>位点变异</strong>，具体思想就是在染色体的一串基因中，随机找一个位置上的基因进行按位取反(因为采用的编码格式是二进制编码)</p><p>程序实现见mutation.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@brief 采用的变异方法是随机单点变异，意思就是随机在染色体上找一个基因进行按位取反</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@param  pop  种群，一个二元组</span></span><br><span class="line"><span class="string">        pm   变异概率</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@retval none</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">pop, pm</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pop)):</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; pm:</span><br><span class="line">            mpoint = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(pop[<span class="number">0</span>]) - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 进行按位取反</span></span><br><span class="line">            <span class="keyword">if</span> pop[i][mpoint] == <span class="number">1</span>:</span><br><span class="line">                pop[i][mpoint] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pop[i][mpoint] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>介绍完以上七个功能模块就能对主程序进行编写了</p><p>具体实现见ga.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> calobjValue <span class="keyword">import</span> calobjValue</span><br><span class="line"><span class="keyword">from</span> calfitValue <span class="keyword">import</span> calfitValue</span><br><span class="line"><span class="keyword">from</span> selection <span class="keyword">import</span> selection</span><br><span class="line"><span class="keyword">from</span> crossover <span class="keyword">import</span> crossover</span><br><span class="line"><span class="keyword">from</span> mutation <span class="keyword">import</span> mutation</span><br><span class="line"><span class="keyword">from</span> best <span class="keyword">import</span> best</span><br><span class="line"><span class="keyword">from</span> geneEncoding <span class="keyword">import</span> geneEncoding</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;适应度函数为：y = 10 * math.sin(5 * x) + 7 * math.cos(4 * x)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算2进制序列代表的数值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b2d</span>(<span class="params">b, max_value, chrom_length</span>):</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        t += b[j] * (math.<span class="built_in">pow</span>(<span class="number">2</span>, j))</span><br><span class="line">    t = t * max_value / (math.<span class="built_in">pow</span>(<span class="number">2</span>, chrom_length) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_size = <span class="number">500</span>  <span class="comment"># 种群数量</span></span><br><span class="line">max_value = <span class="number">10</span>  <span class="comment"># 基因中允许出现的最大值</span></span><br><span class="line">chrom_length = <span class="number">10</span>  <span class="comment"># 染色体长度</span></span><br><span class="line">pc = <span class="number">0.1</span>  <span class="comment"># 交叉概念</span></span><br><span class="line">pm = <span class="number">0.01</span>  <span class="comment"># 变异概率</span></span><br><span class="line">results = [[]]  <span class="comment"># 存储每一代的最优解，N个二元组</span></span><br><span class="line">fit_value = []  <span class="comment"># 个体适应度</span></span><br><span class="line">fit_mean = []  <span class="comment"># 平均适应度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1] for i in range(pop_size)]</span></span><br><span class="line">pop = geneEncoding(pop_size, chrom_length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pop_size):</span><br><span class="line">    obj_value = calobjValue(pop, chrom_length, max_value)  <span class="comment"># 个体评价</span></span><br><span class="line">    fit_value = calfitValue(obj_value)  <span class="comment"># 淘汰</span></span><br><span class="line">    best_individual, best_fit = best(pop, fit_value)  <span class="comment"># 第一个存储最优的解, 第二个存储最优基因</span></span><br><span class="line">    results.append([best_fit, b2d(best_individual, max_value, chrom_length)])</span><br><span class="line">    selection(pop, fit_value)  <span class="comment"># 新种群复制</span></span><br><span class="line">    crossover(pop, pc)  <span class="comment"># 交配</span></span><br><span class="line">    mutation(pop, pm)  <span class="comment"># 变异</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化的时候，第一个元素是空列表，所以要进行排除</span></span><br><span class="line">results = results[<span class="number">1</span>:]</span><br><span class="line">results.sort()</span><br><span class="line"><span class="built_in">print</span>(results)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = %f, x = %f\n&quot;</span> % (results[-<span class="number">1</span>][<span class="number">0</span>], results[-<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line">X = []</span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pop_size):</span><br><span class="line">    X.append(i)</span><br><span class="line">    t = results[i][<span class="number">0</span>]</span><br><span class="line">    Y.append(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将得到的results二元组以可视化的形式展现出来</span></span><br><span class="line">matplotlib.pyplot.plot(X, Y)</span><br><span class="line">matplotlib.pyplot.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示"></a>运行结果展示</h2><p><strong>横坐标为迭代次数，纵坐标为求解结果</strong></p><p>迭代次数n&#x3D;50</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/20240716161904.png"></p><p>迭代次数n&#x3D;150</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/20240716161925.png"></p><p>迭代次数n&#x3D;300</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/image-20240126203424149.png"></p><p>迭代次数n&#x3D;500</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/20240716161958.png"></p><p>迭代次数n&#x3D;1000</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/SGA/20240716162005.png"></p><p>经过多次的结果运行中，我们可以下结论：</p><p>函数</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726005936413.png" alt="image-20240726005936413"></p><p>的最大值为<strong>17</strong>,同学们也可以自己通过数学运算，验证这一结果</p><h2 id="总结与分析"><a href="#总结与分析" class="headerlink" title="总结与分析"></a>总结与分析</h2><p>当迭代次数过少的时候，SGA很容易陷入<strong>局部最优解</strong>中，但是当迭代次数很多的时候，比如上图测试迭代次数n&#x3D;1000的结果中，运行时间相当的长(在我自己电脑中有1分钟左右)。所以SGA虽然说操作简单，但是也有非常明显的短板</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂网络的任意子节点的网络最短距离</title>
      <link href="/2024/07/16/%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%B3%95/"/>
      <url>/2024/07/16/%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目要求介绍"><a href="#题目要求介绍" class="headerlink" title="题目要求介绍"></a>题目要求介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240719204109311.png" alt="image-20240719204109311"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240719204144860.png" alt="image-20240719204144860"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240719204159628.png" alt="image-20240719204159628"></p><p>本文算法测试用的数据集为空手道俱乐部，其中空手道俱乐部的数据集可通过这个链接进行下载•<a href="http://vlado.fmf.uni-lj.si/pub/networks/data/Ucinet/UciData.htm">http://vlado.fmf.uni-lj.si/pub/networks/data/Ucinet/UciData.htm#zachary</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文旨在解决复杂网络中任意子节点之间的网络最短距离问题。首先介绍了复杂网络的概念和特点，包括小世界特性、无标度特性等。然后以空手道俱乐部网络为例，展示了如何将邻接矩阵转换为邻接表，并绘制网络图。接着设计了模块化的程序框架，采用状态压缩动态规划 + Dijkstra算法来计算任意m个节点之间的最短距离。最后给出了m&#x3D;2,3,4,5,&gt;5时的计算结果，并以直方图形式可视化。结果表明，在空手道俱乐部网络中，大多数节点之间的最短距离分布在一个中等范围内，说明大多数成员之间的社交关系维持在一个不亲不疏的状态。总体来说，本文提出了一种有效的方法来分析复杂网络中节点之间的最短距离分布，为研究复杂网络的拓扑结构提供了参考。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>复杂网络（Complex Networks）是一种描述系统中元素间复杂连接关系的网络结构，其特点在于节点数量庞大、连接关系复杂。复杂网络的研究涉及多个学科领域，包括物理、数学、统计、计算机科学、社会学、生态学等。</p><p>复杂网络可概括为以下的部分：</p><ul><li>网络结构与演化机制：复杂网络的结构具有小世界特性和无标度特性，其演化机制包括随机连接、偏好连接、自组织临界等。</li><li>网络拓扑性质与统计特性：复杂网络具有高聚类系数、短平均路径长度等拓扑性质，节点度分布呈现幂律分布等统计特性。</li><li>网络动力学行为：复杂网络中的节点和连接关系会影响网络的动力学行为，如传染病传播、信息传播、社会动态等。</li><li>网络中心性与节点重要性：复杂网络中的节点重要性可以用网络中心性指标来描述，如度中心性、介数中心性等。</li></ul><p>在本例中，我们着重于利用程序设计的图搜索算法，来实现对空手道俱乐部的34个人构成的复杂人际关系网络进行处理，通过用计算机进行模拟，在此基础上，可以分析出空手道俱乐部的人际关系</p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><p>初步给定的空手道俱乐部数据集中，是一个邻接矩阵的形式</p><h3 id="有权网络"><a href="#有权网络" class="headerlink" title="有权网络"></a>有权网络</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image004.png" alt="img"></p><h3 id="无权网络"><a href="#无权网络" class="headerlink" title="无权网络"></a>无权网络</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image006.png" alt="img"></p><p>可以看到，数据集中有非常多的0(黄色部分)，这说明这个邻接矩阵是一个稀疏矩阵，因此，如果要提高程序运行的性能，需要把这个矩阵转换成邻接表进行处理</p><p>首先将txt文件中的数字转换成python程序的二维list</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image008.png" alt="img"></p><p>然后将处理好的二维list，转换成邻接表并写入到csv文件中</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image010.png" alt="img"></p><p>最终得到目标的数据集(部分)，这个数据集就是后面程序直接进行处理的数据集</p><pre><code>![img](https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image012.png)                                                                                                 ![img](https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image014.png)注：一个有权，另一个无权</code></pre><p>最后将这个csv文件的数据，变成一个网络图片，就能得到空手道俱乐部的人际网络</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image016.png" alt="img"></p><h2 id="程序流程及系统设计"><a href="#程序流程及系统设计" class="headerlink" title="程序流程及系统设计"></a>程序流程及系统设计</h2><h3 id="程序模块化构建"><a href="#程序模块化构建" class="headerlink" title="程序模块化构建"></a>程序模块化构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment">#初始化参数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,m=<span class="number">0</span>,NumberOfNode=<span class="number">34</span>,NumberOfEdge=<span class="number">156</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#邻接矩阵转换</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AdjMatrix_to_AdjList</span>(<span class="params">matrix,Csv_filename</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#图搜索算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">self, s</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#核心算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#保存结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#画出网状图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_network</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#画出直方图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#测试部分</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="程序设计的具体细节"><a href="#程序设计的具体细节" class="headerlink" title="程序设计的具体细节"></a>程序设计的具体细节</h3><h4 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/8ee4496c492a4174a624982945264e4e.png" alt="img"></p><h4 id="堆优化的dijstra算法"><a href="#堆优化的dijstra算法" class="headerlink" title="堆优化的dijstra算法"></a>堆优化的dijstra算法</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image020.png" alt="img"></p><h4 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h4><p>函数的核心思想是状态压缩动态规划，通过枚举所有可能的m个节点的组合，计算每个组合的最短路径长度。Dijkstra算法用于辅助计算连接每个状态的最小距离。</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image022.png" alt="img"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>使用numpy库生成一个包含所有节点的数组vertex。</li><li>使用combinations函数枚举所有可能的m个节点的组合。</li><li>初始化状态压缩DP数组self.dp，用于记录从每个节点出发，连接m个节点的最小距离。</li></ul><h4 id="状态压缩动态规划"><a href="#状态压缩动态规划" class="headerlink" title="状态压缩动态规划"></a>状态压缩动态规划</h4><ul><li>对每个节点组合，初始化DP数组，将所有状态设为无穷大。</li><li>对于每个节点，将其连接到自身的状态设为0。</li><li>使用状态压缩动态规划，更新DP数组，计算从每个节点出发，连接m个节点的最小距离。</li></ul><h4 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h4><ul><li>对于每个状态，使用Dijkstra算法计算连接该状态下的m个节点的最小距离，并更新DP数组。</li><li>Dijkstra算法通过优先队列实现，每次选择距离最小的节点进行扩展。</li></ul><h4 id="结果统计"><a href="#结果统计" class="headerlink" title="结果统计"></a>结果统计</h4><ul><li>统计所有节点组合的最短路径长度，并保存到results列表中。</li><li>对每个节点组合，找到最小路径长度和耗时。</li></ul><h5 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h5><ul><li>results 列表包含了所有节点组合的最短路径长度</li></ul><h4 id="计算流程图"><a href="#计算流程图" class="headerlink" title="计算流程图"></a>计算流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image024.jpg" alt="img"></p><h2 id="程序计算结果"><a href="#程序计算结果" class="headerlink" title="程序计算结果"></a>程序计算结果</h2><p>X轴表示任意m的节点的最短路径的长度，Y轴表示任意m的节点的最短路径的长度出现的频数</p><h3 id="4-1-m取值为2时，程序运行结果"><a href="#4-1-m取值为2时，程序运行结果" class="headerlink" title="4.1 m取值为2时，程序运行结果"></a>4.1 m取值为2时，程序运行结果</h3><h4 id="有权网络-1"><a href="#有权网络-1" class="headerlink" title="有权网络"></a>有权网络</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image026.png" alt="img"></p><h4 id="无权网络-1"><a href="#无权网络-1" class="headerlink" title="无权网络"></a>无权网络</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image028.png" alt="img"></p><h3 id="4-2-m取值为3时，程序运行结果"><a href="#4-2-m取值为3时，程序运行结果" class="headerlink" title="4.2 m取值为3时，程序运行结果"></a>4.2 m取值为3时，程序运行结果</h3><h4 id="有权网络-2"><a href="#有权网络-2" class="headerlink" title="有权网络"></a>有权网络</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image030.png" alt="img"></p><h4 id="无权网络："><a href="#无权网络：" class="headerlink" title="无权网络："></a>无权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image032.png" alt="img"></p><h3 id="4-3-m取值为4时，程序运行结果"><a href="#4-3-m取值为4时，程序运行结果" class="headerlink" title="4.3 m取值为4时，程序运行结果"></a>4.3 m取值为4时，程序运行结果</h3><h4 id="有权网络："><a href="#有权网络：" class="headerlink" title="有权网络："></a>有权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image034.png" alt="img"></p><h4 id="无权网络：-1"><a href="#无权网络：-1" class="headerlink" title="无权网络："></a>无权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image036.png" alt="img"></p><h3 id="4-4-m取值为5时，程序运行结果"><a href="#4-4-m取值为5时，程序运行结果" class="headerlink" title="4.4 m取值为5时，程序运行结果"></a>4.4 m取值为5时，程序运行结果</h3><h4 id="有权网络：-1"><a href="#有权网络：-1" class="headerlink" title="有权网络："></a>有权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image038.png" alt="img"></p><h4 id="无权网络：-2"><a href="#无权网络：-2" class="headerlink" title="无权网络："></a>无权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image040.png" alt="img"></p><h3 id="4-5-m-5时，程序运行结果"><a href="#4-5-m-5时，程序运行结果" class="headerlink" title="4.5 m &gt;&#x3D;5时，程序运行结果"></a>4.5 m &gt;&#x3D;5时，程序运行结果</h3><h4 id="有权网络：-2"><a href="#有权网络：-2" class="headerlink" title="有权网络："></a>有权网络：</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image042.png" alt="img"></p><h4 id="无权网络-2"><a href="#无权网络-2" class="headerlink" title="无权网络"></a>无权网络</h4><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/clip_image044.png" alt="img"></p><h2 id="实验结论与分析"><a href="#实验结论与分析" class="headerlink" title="实验结论与分析"></a>实验结论与分析</h2><p> 无权网络的权重分布只有0和1，很难看出分布规律。</p><p> 有权网络的数据呈现出接近正态分布的形态，峰值集中在中间部分，然后向两侧逐渐减少，将最短路径长度映射到空手道俱乐部成员的人际网络关系中，我们可以得出结论：在空手道俱乐部中，社交关系非常亲密与非常疏远的成员是占少数的，大多数成员的社交关系都是维持在一个不亲不疏的状态中</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>太长了不想看？👿，那就算了，下面是全部的代码，自己参悟吧😊😊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,m=<span class="number">0</span>,NumberOfNode=<span class="number">34</span>,NumberOfEdge=<span class="number">156</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.NumberOfNode = NumberOfNode  </span><br><span class="line">        <span class="variable language_">self</span>.NumberOfEdge = NumberOfEdge  </span><br><span class="line">        <span class="variable language_">self</span>.m = m  </span><br><span class="line">        <span class="variable language_">self</span>.MaxNumberOfNode = <span class="variable language_">self</span>.NumberOfNode + <span class="number">1</span>  </span><br><span class="line">        <span class="variable language_">self</span>.MaxNumberOfEdge = (<span class="variable language_">self</span>.NumberOfEdge + <span class="number">1</span>) * <span class="number">2</span>  </span><br><span class="line">        <span class="variable language_">self</span>.dp = numpy.zeros((<span class="variable language_">self</span>.MaxNumberOfNode, <span class="number">2</span>**<span class="number">10</span>+<span class="number">1</span>), dtype=<span class="built_in">int</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.infinity = <span class="number">2</span> ** <span class="number">24</span>  </span><br><span class="line">        <span class="variable language_">self</span>.p = numpy.zeros(<span class="variable language_">self</span>.MaxNumberOfNode, dtype=<span class="built_in">int</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.AdjacencyList = &#123;&#125;  </span><br><span class="line">        <span class="variable language_">self</span>.PriorityQueue = []  </span><br><span class="line">        <span class="variable language_">self</span>.results=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.MaxNumberOfNode):</span><br><span class="line">            <span class="variable language_">self</span>.AdjacencyList[i] = &#123;&#125;</span><br><span class="line">        Data = namedtuple(<span class="string">&#x27;Data&#x27;</span>, <span class="string">&#x27;source, target, weight&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> <span class="built_in">map</span>(Data._make, csv.reader(<span class="built_in">open</span>(<span class="string">&quot;无权网络.csv&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))):</span><br><span class="line">            <span class="variable language_">self</span>.AdjacencyList[<span class="built_in">int</span>(edge.source)][<span class="built_in">int</span>(edge.target)] = <span class="built_in">int</span>(edge.weight)</span><br><span class="line">            <span class="variable language_">self</span>.AdjacencyList[<span class="built_in">int</span>(edge.target)][<span class="built_in">int</span>(edge.source)] = <span class="built_in">int</span>(edge.weight)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">txt_to_list</span>(<span class="params">file_path</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            lines=file.readlines()</span><br><span class="line">            result=[<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.split())) <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AdjMatrix_to_AdjList</span>(<span class="params">matrix,Csv_filename=<span class="string">&quot;空手道俱乐部.csv&quot;</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(Csv_filename, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            writer=csv.writer(file)</span><br><span class="line">            writer.writerow([<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;target&#x27;</span>,<span class="string">&#x27;weight&#x27;</span>])</span><br><span class="line">            <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">                    <span class="keyword">if</span> matrix[u][v]!=<span class="number">0</span>:</span><br><span class="line">                        writer.writerow([u+<span class="number">1</span>,v+<span class="number">1</span>,matrix[u][v]])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;邻接矩阵已保存为CSV文件：<span class="subst">&#123;Csv_filename&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">self, s</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        vis = <span class="built_in">dict</span>((key, <span class="literal">False</span>) <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable language_">self</span>.AdjacencyList)  </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.PriorityQueue) &gt; <span class="number">0</span>:</span><br><span class="line">            u, _ = heapq.heappop(<span class="variable language_">self</span>.PriorityQueue)  </span><br><span class="line">            <span class="keyword">if</span> vis[u] == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            vis[u] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> <span class="variable language_">self</span>.AdjacencyList[u]:</span><br><span class="line">                new_dis = <span class="variable language_">self</span>.dp[u][s] + <span class="variable language_">self</span>.AdjacencyList[u][v]</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.dp[v][s] &gt; new_dis:</span><br><span class="line">                    <span class="variable language_">self</span>.dp[v][s] = new_dis</span><br><span class="line">                    heapq.heappush(<span class="variable language_">self</span>.PriorityQueue, [v, new_dis])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">self</span>):</span><br><span class="line">        vertex = numpy.arange(<span class="number">1</span>, <span class="variable language_">self</span>.MaxNumberOfNode, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> tp <span class="keyword">in</span> combinations(vertex, <span class="variable language_">self</span>.m):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.m + <span class="number">1</span>):</span><br><span class="line">                <span class="variable language_">self</span>.p[i] = tp[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="variable language_">self</span>.MaxNumberOfNode):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>**<span class="number">10</span>+<span class="number">1</span>):</span><br><span class="line">                    <span class="variable language_">self</span>.dp[i][j] = <span class="variable language_">self</span>.infinity</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.m + <span class="number">1</span>):</span><br><span class="line">                <span class="variable language_">self</span>.dp[<span class="variable language_">self</span>.p[i]][<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">            start = time.time()</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="variable language_">self</span>.m):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.NumberOfNode + <span class="number">1</span>):</span><br><span class="line">                    subs = s &amp; (s - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">while</span> subs != <span class="number">0</span>:</span><br><span class="line">                        <span class="variable language_">self</span>.dp[i][s] = <span class="built_in">min</span>(<span class="variable language_">self</span>.dp[i][s], <span class="variable language_">self</span>.dp[i][subs] + <span class="variable language_">self</span>.dp[i][s ^ subs])</span><br><span class="line">                        subs = s &amp; (subs - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>.dp[i][s] != <span class="variable language_">self</span>.infinity:</span><br><span class="line">                        heapq.heappush(<span class="variable language_">self</span>.PriorityQueue, [i, <span class="variable language_">self</span>.dp[i][s]])</span><br><span class="line">                <span class="variable language_">self</span>.dijkstra(s)</span><br><span class="line">            end = time.time()</span><br><span class="line">            result = <span class="variable language_">self</span>.infinity</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.m + <span class="number">1</span>):</span><br><span class="line">                result = <span class="built_in">min</span>(result, <span class="variable language_">self</span>.dp[<span class="variable language_">self</span>.p[i]][(<span class="number">1</span> &lt;&lt; <span class="variable language_">self</span>.m) - <span class="number">1</span>])</span><br><span class="line">            temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.m + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.p[i]!=<span class="number">0</span>:</span><br><span class="line">                    temp += <span class="built_in">str</span>(<span class="variable language_">self</span>.p[i])+<span class="string">&#x27; , &#x27;</span></span><br><span class="line">            temp=temp[:-<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">self</span>.results.append((temp, result, end - start))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        csvfilepath = <span class="string">&#x27;csv结果/任意节点&#x27;</span>+<span class="built_in">str</span>(<span class="variable language_">self</span>.m)+<span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">        headers = [<span class="string">&#x27;节点组合&#x27;</span>, <span class="string">&#x27;最短路径距离&#x27;</span>, <span class="string">&#x27;耗时&#x27;</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(csvfilepath, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            writer = csv.writer(file)</span><br><span class="line">            writer.writerow(headers)</span><br><span class="line">            writer.writerows(<span class="variable language_">self</span>.results)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_network</span>(<span class="params">self</span>):</span><br><span class="line">        list1=[]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;有权网络.csv&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            reader=csv.reader(file)</span><br><span class="line">            list1=[<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,row)) <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">        graph=nx.Graph()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">            graph.add_edge(list1[i][<span class="number">0</span>],list1[i][<span class="number">1</span>],weight=list1[i][<span class="number">2</span>])</span><br><span class="line">        pos = nx.spring_layout(graph)</span><br><span class="line">        nx.draw_networkx_nodes(graph, pos)</span><br><span class="line">        nx.draw_networkx_labels(graph, pos)</span><br><span class="line">        nx.draw_networkx_edges(graph, pos, edge_color=<span class="string">&quot;black&quot;</span>, width=<span class="number">1</span>)</span><br><span class="line">        edge_labels = nx.get_edge_attributes(graph, <span class="string">&quot;weight&quot;</span>)</span><br><span class="line">        nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels)</span><br><span class="line">        nx.draw(graph, with_labels=<span class="literal">True</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;图片结果/&#x27;</span>+<span class="string">&#x27;空手道俱乐部.png&#x27;</span>,dpi=<span class="number">720</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bar</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = <span class="string">&#x27;有权网络csv结果/任意节点&#x27;</span>+<span class="built_in">str</span>(<span class="variable language_">self</span>.m)+<span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">        shortest_path=[]</span><br><span class="line">        shortest_path_count=&#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            reader=csv.reader(file)</span><br><span class="line">            shortest_path=[row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">            shortest_path=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,shortest_path[<span class="number">1</span>:]))</span><br><span class="line">            <span class="keyword">for</span> length <span class="keyword">in</span> shortest_path:</span><br><span class="line">                shortest_path_count[length]=shortest_path_count.get(length,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">        plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">        plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  </span><br><span class="line">        plt.title(<span class="string">&#x27;有权网络任意节点的最短路径长度&#x27;</span>)  </span><br><span class="line">        plt.xlabel(<span class="string">&#x27;最短路径长度&#x27;</span>)  </span><br><span class="line">        plt.ylabel(<span class="string">&#x27;频数&#x27;</span>)  </span><br><span class="line">        plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)  </span><br><span class="line">        plt.tight_layout()  </span><br><span class="line">        plt.bar(<span class="built_in">list</span>(shortest_path_count.keys()), <span class="built_in">list</span>(shortest_path_count.values()), alpha=<span class="number">0.7</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">        bar_file_path = <span class="string">&#x27;有权网络图片结果/任意节点&#x27;</span>+<span class="built_in">str</span>(<span class="variable language_">self</span>.m)+<span class="string">&#x27;直方图.png&#x27;</span></span><br><span class="line">        plt.savefig(bar_file_path,dpi=<span class="number">1080</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">7</span>):</span><br><span class="line">        s=Solution(m=i)   </span><br><span class="line">        s.draw_bar()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Star搜索算法原理及其程序实现</title>
      <link href="/2024/07/16/%E7%AE%97%E6%B3%95/A%20Star%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/16/%E7%AE%97%E6%B3%95/A%20Star%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境推荐"><a href="#运行环境推荐" class="headerlink" title="运行环境推荐"></a>运行环境推荐</h2><ol><li>anaconda3，集成了常用的用于科学计算的包，以及对应的Python解释器(本例使用的解释器版本为3.9.12)</li><li>编辑器：VScode</li></ol><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文将以迷宫探索最优路径为例，讲解A *搜索算法原理及其程序实现。</p><p>在原理讲解部分，首先从为什么要使用A *搜索算法和A *搜索算法的全局最优逻辑出发，讲解A *算法的原理。其次对A *的行动函数g(n)和启发函数h(n)的细节进行了讲解说明，并补充了启发函数的选择对于A *算法的影响。</p><p>在程序实现部分，首先从程序流程框图出发，解释A *算法的流程。其次按函数的类划分并讲解主要代码，接着展示程序的运行结果，最后对A *算法进行总结分析。</p><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><h3 id="为什么要使用A-搜索算法？"><a href="#为什么要使用A-搜索算法？" class="headerlink" title="为什么要使用A*搜索算法？"></a>为什么要使用A*搜索算法？</h3><p>搜索算法的核心是从起点出发，找到一条到达目标的最优（路径最短&#x2F;成本最低&#x2F;两者兼具）的路径。</p><p>根据不同需求，我们通常会选择：广度优先搜索（BFS）、Dijkstra算法（统一成本搜索）和贪婪优先搜索之一，下面我们逐个分析其优劣。</p><ol><li><p>广度优先算法：不考虑每一步的移动成本，不断拓展边界，直到边界到达目标点，通常耗费大量时间。</p></li><li><p>Dijkstra算法：以BFS为基础，<strong>只考虑每一点的总移动成本</strong>，没有解决BFS耗费大量时间的问题。</p></li><li><p>贪婪优先搜索：<strong>只考虑到达终点的估计距离</strong>，能较快寻找到目标，但是无法保证路线全局最优。</p></li><li><p>A*搜索算法：以BSF为基础，<strong>综合考虑了总移动成本和到达终点的估计距离</strong>，巧妙地叠加了Dijkstra算法的成本最低和贪婪优先搜索的速度最优，具有更好的性能。</p></li><li><p>下面是A * 算法的核心公式：</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726004205520.png" alt="image-20240726004205520"></p></li></ol><blockquote><h6 id="说明：f-n-是总的预期成本，g-n-是当前点到起点的总移动成本，h-n-是当前点到目标点的预期代价"><a href="#说明：f-n-是总的预期成本，g-n-是当前点到起点的总移动成本，h-n-是当前点到目标点的预期代价" class="headerlink" title="说明：f(n)是总的预期成本，g(n)是当前点到起点的总移动成本，h(n)是当前点到目标点的预期代价"></a>说明：f(n)是总的预期成本，g(n)是当前点到起点的总移动成本，h(n)是当前点到目标点的预期代价</h6></blockquote><h3 id="A-搜索算法的全局最优逻辑"><a href="#A-搜索算法的全局最优逻辑" class="headerlink" title="A *搜索算法的全局最优逻辑"></a>A *搜索算法的全局最优逻辑</h3><p>首先，对于搜索算法来说，想要减少搜索的时间，那就必须要在搜索最优路径时搜索尽量少的点，最好搜索的全部节点恰好就是我们的全局最优路径。但显然，像贪婪优先搜索那样，只考虑当前点到目标点的预期距离的话，往往只能寻找到局部最优。</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/%E8%B4%AA%E5%BF%83%E7%9A%84%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98.png" alt="贪心的局部最优"></p><p><strong>换句话说，贪婪优先算法只考虑单一的：当前点到目标点的估计距离，这显然不足以作为全局最优的参考指标。但是它赋予了程序有目的地前往终点方向的能力</strong></p><p>而我们知道，BFS、Dijkstra实质上是对所有节点进行遍历，其中后者是对前者的优化，保证了起点到每一个中间点都是成本最优的选择。</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/Dijkstra%E4%BF%9D%E9%9A%9C%E5%BD%93%E5%89%8D%E7%82%B9%E5%AF%B9%E4%BA%8E%E8%B5%B7%E7%82%B9%E6%9C%80%E4%BC%98.png" alt="Dijkstra保障当前点对于起点最优"></p><p>那我们结合一下Dijkstra（保障当前点对起点是<strong>成本</strong>最优的）和贪婪优先搜索（保障当前点到终点的<strong>方向</strong>是最优的）</p><p>就可以构建一个新的参考指标：用于保证每一次从当前点选择下一个节点的时候都是全局最优的。</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/%E5%85%A8%E5%B1%80%E6%9C%80%E4%BC%98%E7%90%86%E8%A7%A3.png" alt="全局最优理解"></p><h3 id="对行动函数-g-n-的细节说明（可以简单理解g是小兵）"><a href="#对行动函数-g-n-的细节说明（可以简单理解g是小兵）" class="headerlink" title="对行动函数  g(n)   的细节说明（可以简单理解g是小兵）"></a>对行动函数  <strong>g(n)</strong>   的细节说明（<strong>可以简单理解g是小兵</strong>）</h3><p>在A *算法中对于g(n)，也就是从起点到当前点的总移动代价（沉没成本），如果我们只考虑上下左右四个方向的话，并不需要额外考虑每一步行动的代价（因为每一步都是相同的），但是如果我们从上下左右和四个边角都能被行动，那我们就需要考虑走斜边和直上直下的代价差异。</p><p>本样例中，所有的节点都是正方形，从而可知走斜边与直上直下的代价比值应为</p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726004310005.png" alt="image-20240726004310005"></p><p>我们为了方便计算，取1.4：1作为走斜边和直上直下的代价比值</p><h3 id="对启发函数-h-n-的讲解（可以简单理解h是领导）"><a href="#对启发函数-h-n-的讲解（可以简单理解h是领导）" class="headerlink" title="对启发函数  h(n)   的讲解（可以简单理解h是领导）"></a>对启发函数  <strong>h(n)</strong>   的讲解（<strong>可以简单理解h是领导</strong>）</h3><p>在A *算法中对于h(n)，也就是对当前点到目标点的预期代价估计通常采用“距离”作为度量。</p><p>在二维地图中，我们讨论两点间距离常用的方式有两种。</p><ol><li><p>曼哈顿距离</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BBV2.png" alt="曼哈顿距离V2"></p><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726004329674.png" alt="image-20240726004329674"></p><p>曼哈顿距离用来标明两个点在标准坐标系上的绝对轴距总和，简单来理解就是：直角三角形的两直角边之和</p></li><li><p>欧式距离</p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB.png" alt="欧式距离"></p><p><img src="/./assets/image-20240726004347846.png" alt="image-20240726004347846"></p><p>欧式距离用来标明两个点在标准坐标系上的绝对距离，简单来理解就是：直角三角形的斜边</p></li></ol><p>在接下来的代码实现中，因为曼哈顿距离不需要开方，计算较为简便，因此本例选用曼哈顿距离作为启发函数的参考指标。</p><h3 id="补充：启发函数的选择对算法的影响（了解）"><a href="#补充：启发函数的选择对算法的影响（了解）" class="headerlink" title="补充：启发函数的选择对算法的影响（了解）"></a>补充：启发函数的选择对算法的影响（了解）</h3><p><img src="https://cdn.jsdelivr.net/gh/kashima19960/img@master/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9A%84%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/image-20240726004416685.png" alt="image-20240726004416685"></p><table><thead><tr><th>情况</th><th>算法</th><th>结果</th></tr></thead><tbody><tr><td>h(n)&#x3D;0</td><td>A*退化为Dijkstra算法</td><td>保证能找到最短路径，但时间花费较大</td></tr><tr><td>h(n)&#x3D;实际代价</td><td>仅拓展必要节点</td><td>时间和路径都最佳</td></tr><tr><td>h(n)&gt;&gt;g(n)</td><td>A*算法退化到贪婪优先</td><td>不保证全局路径最优，但速度很快</td></tr></tbody></table><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/A-star%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B.png" alt="A-star算法流程"></p><ul><li>地图初始化：设置地图大小、起点终点、障碍物。</li><li>遍历待测节点：将起点放入待测列表（open_list）中，进而让A *算法开始运行，计算并存储列表中每一个节点的 “f(n) “ 。</li><li>定位正在检测点：查找”f(n) “最小的节点，并把它定位为正在检测的点（select_current）。</li><li>邻点检测：A *算法的核心，通过对邻点属性的判断和对预期总移动成本的权衡来选择下一个节点</li><li>移动到已测点集：将已经检测过但是没被选择的节点放入已测列表中，保证不会重复搜索</li><li>找到终点：找到终点后，由终点向起点进行最短路径的回溯，并通过调用pillow库，将结果导出为图片</li></ul><h2 id="AStar类"><a href="#AStar类" class="headerlink" title="AStar类"></a>AStar类</h2><p>是整个算法的关键，内部包括了A *算法的初始化、最优点选择、邻点检测、节点判断和路径寻找功能的实现</p><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><p>通过构造函数，将地图属性：地图大小、起点、终点和障碍物读入，初始化 A *算法的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start: Point, end: Point, map2d: Map2D</span>):</span><br><span class="line">    <span class="variable language_">self</span>.path = []</span><br><span class="line">    <span class="variable language_">self</span>.closed_list = []</span><br><span class="line">    <span class="variable language_">self</span>.open_list = []</span><br><span class="line">    <span class="variable language_">self</span>.start = start</span><br><span class="line">    <span class="variable language_">self</span>.end = end</span><br><span class="line">    <span class="variable language_">self</span>.map2d = map2d</span><br></pre></td></tr></table></figure><h3 id="最优点选择"><a href="#最优点选择" class="headerlink" title="最优点选择"></a>最优点选择</h3><p>遍历待检测队列（open_list），找到f值最小的节点（全局最优节点），然后返回全局最优节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_current</span>(<span class="params">self</span>):</span><br><span class="line">    min_f = sys.maxsize</span><br><span class="line">    node_temp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list:</span><br><span class="line">        <span class="keyword">if</span> node.f &lt; min_f:</span><br><span class="line">            min_f = node.f</span><br><span class="line">            node_temp = node</span><br><span class="line">    <span class="keyword">return</span> node_temp</span><br></pre></td></tr></table></figure><h3 id="判断节点是否在待检测队列中"><a href="#判断节点是否在待检测队列中" class="headerlink" title="判断节点是否在待检测队列中"></a>判断节点是否在待检测队列中</h3><p>通过读入要判断的节点（node），遍历open_list，判断node是否在待测队列中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_in_open_list</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>([open_node.point == node.point <span class="keyword">for</span> open_node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list])</span><br></pre></td></tr></table></figure><h3 id="判断节点是否在已检测队列中"><a href="#判断节点是否在已检测队列中" class="headerlink" title="判断节点是否在已检测队列中"></a>判断节点是否在已检测队列中</h3><p>通过读入要判断的节点（node），遍历closed_list，判断node是否在已检测队列中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_in_closed_list</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>([closed_node.point == node.point <span class="keyword">for</span> closed_node <span class="keyword">in</span> <span class="variable language_">self</span>.closed_list])</span><br></pre></td></tr></table></figure><h3 id="判断节点是否是障碍物"><a href="#判断节点是否是障碍物" class="headerlink" title="判断节点是否是障碍物"></a>判断节点是否是障碍物</h3><p>通过读入要判断的节点（node），简单比较节点是否为”⬛”，进而判断node是否是障碍物</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_obstacle</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.map2d.data[node.point.x][node.point.y] == <span class="string">&quot;⬛&quot;</span></span><br></pre></td></tr></table></figure><h3 id="相邻点检测"><a href="#相邻点检测" class="headerlink" title="相邻点检测"></a>相邻点检测</h3><p>通过对当前节点（node）的”上下左右”和”四角”的八个方向进行检测，寻找全局最优的点，判断下一步该前往哪个节点，其中包括对邻点是否为终点、已检测点、待检测点、最优节点或障碍物的一系列判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">explore_neighbors</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># 定义八个方向</span></span><br><span class="line">    directions = [(<span class="number">1</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> direction <span class="keyword">in</span> directions:</span><br><span class="line">        ud, rl = direction</span><br><span class="line">        <span class="comment"># 根据方向计算相邻节点</span></span><br><span class="line">        neighbor = node.get_near(ud, rl)</span><br><span class="line">        <span class="comment"># 如果相邻节点是终点，则返回 True</span></span><br><span class="line">        <span class="keyword">if</span> neighbor.point == <span class="variable language_">self</span>.end:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果相邻节点在 closed_list 中或为障碍物，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_in_closed_list(neighbor) <span class="keyword">or</span> <span class="variable language_">self</span>.is_obstacle(neighbor):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果相邻节点在 open_list 中，则比较评分</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_in_open_list(neighbor):</span><br><span class="line">            existing_node = <span class="built_in">next</span>(open_node <span class="keyword">for</span> open_node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list <span class="keyword">if</span> open_node.point == neighbor.point)</span><br><span class="line">            <span class="keyword">if</span> neighbor.f &lt; existing_node.f:</span><br><span class="line">                <span class="comment"># 如果评分更优，则更新相邻节点的父节点和评分</span></span><br><span class="line">                existing_node.father = node</span><br><span class="line">                existing_node.g = neighbor.g</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果相邻节点不在 open_list 中，则将其加入 open_list</span></span><br><span class="line">            neighbor.father = node</span><br><span class="line">            <span class="variable language_">self</span>.open_list.append(neighbor)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="寻找路径"><a href="#寻找路径" class="headerlink" title="寻找路径"></a>寻找路径</h3><p>这个方法将起点另外存储在回溯路径列表里（path），并不断选择最优节点前进，同时每一次前进到下一个最优节点时，都会将最优节点的父节点放进回溯路径（path）中，在最后找到终点后，利用回溯路径列表从终点回溯到起点（子节点按父节点回溯）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 创建起点节点</span></span><br><span class="line">    start_node = AStar.Node(<span class="variable language_">self</span>.start, <span class="variable language_">self</span>.end, <span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">self</span>.open_list.append(start_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 选择当前最优节点</span></span><br><span class="line">        current_node = <span class="variable language_">self</span>.select_current()</span><br><span class="line">        <span class="comment"># 如果没有最优节点，则返回 None</span></span><br><span class="line">        <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 将当前节点从 open_list 中移除，并加入 closed_list 中</span></span><br><span class="line">        <span class="variable language_">self</span>.open_list.remove(current_node)</span><br><span class="line">        <span class="variable language_">self</span>.closed_list.append(current_node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前节点是终点，则返回路径</span></span><br><span class="line">        <span class="keyword">if</span> current_node.point == <span class="variable language_">self</span>.end:</span><br><span class="line">            <span class="comment"># 沿着父节点回溯路径</span></span><br><span class="line">            <span class="keyword">while</span> current_node.father <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="variable language_">self</span>.path.insert(<span class="number">0</span>, current_node.point)</span><br><span class="line">                current_node = current_node.father</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.path</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 探索相邻节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.explore_neighbors(current_node):</span><br><span class="line">            <span class="comment"># 如果找到了终点，则沿着父节点回溯路径</span></span><br><span class="line">            <span class="keyword">while</span> current_node.father <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="variable language_">self</span>.path.insert(<span class="number">0</span>, current_node.point)</span><br><span class="line">                current_node = current_node.father</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.path</span><br></pre></td></tr></table></figure><h2 id="AStar-Node类"><a href="#AStar-Node类" class="headerlink" title="AStar.Node类"></a>AStar.Node类</h2><p>是AStar类的一个内部类，包含的初始化中间节点参数和获取相邻节点的方法是邻点检测和寻找路径的基础</p><h3 id="初始化中间节点的参数"><a href="#初始化中间节点的参数" class="headerlink" title="初始化中间节点的参数"></a>初始化中间节点的参数</h3><p>构造函数，初始化节点的参数：point:（当前节点的坐标）、endpoint（终点的坐标）、g（从起点到当前节点的代价），并且通过曼哈顿距离计算这条路径预计的总移动成本，是最优点选择的基础</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, point: Point, endpoint: Point, g: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.point = point</span><br><span class="line">    <span class="variable language_">self</span>.endpoint = endpoint</span><br><span class="line">    <span class="variable language_">self</span>.father = <span class="literal">None</span></span><br><span class="line">    <span class="variable language_">self</span>.g = g</span><br><span class="line">    <span class="comment"># 计算启发值h，使用曼哈顿距离</span></span><br><span class="line">    <span class="variable language_">self</span>.h = (<span class="built_in">abs</span>(endpoint.x - point.x) + <span class="built_in">abs</span>(endpoint.y - point.y)) * <span class="number">10</span></span><br><span class="line">    <span class="comment"># 计算预计的总移动成本f</span></span><br><span class="line">    <span class="variable language_">self</span>.f = <span class="variable language_">self</span>.g + <span class="variable language_">self</span>.h</span><br></pre></td></tr></table></figure><h3 id="获取相邻节点"><a href="#获取相邻节点" class="headerlink" title="获取相邻节点"></a>获取相邻节点</h3><p>获取上下左右和四角共八个方向的邻点，计算并更新A *算法的g(n)值，是邻点检测的基础</p><p>ud: 上下方向的移动量（1 表示向上，-1 表示向下，0 表示不移动）</p><p>rl: 左右方向的移动量（1 表示向右，-1 表示向左，0 表示不移动）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_near</span>(<span class="params">self, ud, rl</span>):</span><br><span class="line">    <span class="comment"># 根据上下左右和四角，共八个方向，计算相邻节点的坐标</span></span><br><span class="line">    near_point = Point(<span class="variable language_">self</span>.point.x + rl, <span class="variable language_">self</span>.point.y + ud)</span><br><span class="line">    <span class="comment"># 计算相邻节点的总移动成本</span></span><br><span class="line">    near_node = AStar.Node(near_point, <span class="variable language_">self</span>.endpoint, <span class="variable language_">self</span>.g + (<span class="number">10</span> <span class="keyword">if</span> ud == <span class="number">0</span> <span class="keyword">or</span> rl == <span class="number">0</span> <span class="keyword">else</span> <span class="number">14</span>))</span><br><span class="line">    <span class="keyword">return</span> near_node</span><br></pre></td></tr></table></figure><h2 id="Map2D-类"><a href="#Map2D-类" class="headerlink" title="Map2D 类"></a>Map2D 类</h2><p>主要是对生成的2D地图进行处理，包括地图初始化和导出地图数据的功能</p><h3 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h3><p>构造函数，通过读取用户设定的地图大小，初始化地图数据，每个元素都放置一个”⬜”字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, height, width</span>):</span><br><span class="line">    <span class="variable language_">self</span>.height = height</span><br><span class="line">    <span class="variable language_">self</span>.width = width</span><br><span class="line">    <span class="variable language_">self</span>.data = [[<span class="string">&quot;⬜&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(width)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(height)]</span><br></pre></td></tr></table></figure><h3 id="导出地图数据"><a href="#导出地图数据" class="headerlink" title="导出地图数据"></a>导出地图数据</h3><p>调用pillow模块，在A *算法所在的 py 文件夹内生成一个 result.png 的图片，首先将其绘制为全白色背景，再依次遍历A *算法处理后的地图数据，并在白色背景上绘制颜色，最后展示一个A *算法处理后的结果图（包含最优路径）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">export_image</span>(<span class="params">self, file_name=<span class="string">&quot;map.png&quot;</span></span>):</span><br><span class="line">    <span class="comment"># 设置单元格大小</span></span><br><span class="line">    cell_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 创建一个白色背景的图像</span></span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="variable language_">self</span>.width * cell_size, <span class="variable language_">self</span>.height * cell_size), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建一个绘图对象</span></span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历地图数据，根据不同的字符绘制不同的颜色</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.height):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.width):</span><br><span class="line">            color = <span class="string">&quot;white&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;⬛&quot;</span>:</span><br><span class="line">                color = <span class="string">&quot;black&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;🟥&quot;</span>:</span><br><span class="line">                color = <span class="string">&quot;red&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;🟩&quot;</span>:</span><br><span class="line">                color = <span class="string">&quot;green&quot;</span></span><br><span class="line">            <span class="comment"># 绘制一个矩形</span></span><br><span class="line">            draw.rectangle([(y * cell_size, x * cell_size), ((y + <span class="number">1</span>) * cell_size, (x + <span class="number">1</span>) * cell_size)], fill=color)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图像</span></span><br><span class="line">    image.save(file_name)</span><br></pre></td></tr></table></figure><h3 id="设置障碍物"><a href="#设置障碍物" class="headerlink" title="设置障碍物"></a>设置障碍物</h3><p>通过用户设置的障碍点坐标，将”⬜”（可探索位置）更新为”⬛”（障碍物）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_obstacle</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="variable language_">self</span>.data[x][y] = <span class="string">&quot;⬛&quot;</span></span><br></pre></td></tr></table></figure><h3 id="设置起点和终点"><a href="#设置起点和终点" class="headerlink" title="设置起点和终点"></a>设置起点和终点</h3><p>通过用户设置的起点和终点坐标，将”⬜”（可探索位置）更新为”🟥”（起点或者终点）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_start_end</span>(<span class="params">self, start: Point, end: Point</span>):</span><br><span class="line">    <span class="variable language_">self</span>.data[start.x][start.y] = <span class="string">&quot;🟥&quot;</span></span><br><span class="line">    <span class="variable language_">self</span>.data[end.x][end.y] = <span class="string">&quot;🟥&quot;</span></span><br></pre></td></tr></table></figure><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="随机放置障碍物"><a href="#随机放置障碍物" class="headerlink" title="随机放置障碍物"></a>随机放置障碍物</h3><p>首先计算地图总格数，通过 obstacle_ratio 设置障碍物占全图的比例，再通过循环来实现大范围的障碍物放置，同时设置了对起点终点和现有障碍物的保护，达到增加搜索难度的目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">total_cells = map2d.height * map2d.width  <span class="comment"># 计算地图总格数</span></span><br><span class="line">obstacle_cells = <span class="built_in">int</span>(total_cells * <span class="number">0.3</span>)  <span class="comment"># 计算障碍物格数，这里设置障碍物占据地图的 30%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(obstacle_cells):</span><br><span class="line">    x = random.randint(<span class="number">0</span>, map2d.height - <span class="number">1</span>)</span><br><span class="line">    y = random.randint(<span class="number">0</span>, map2d.width - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 确保障碍物不覆盖起点、终点或其他障碍物</span></span><br><span class="line">    <span class="keyword">while</span> (x == start_point.x <span class="keyword">and</span> y == start_point.y) <span class="keyword">or</span> (x == end_point.x <span class="keyword">and</span> y == end_point.y) <span class="keyword">or</span> map2d.data[x][y] == <span class="string">&quot;⬛&quot;</span>:</span><br><span class="line">        x = random.randint(<span class="number">0</span>, map2d.height - <span class="number">1</span>)</span><br><span class="line">        y = random.randint(<span class="number">0</span>, map2d.width - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置障碍物</span></span><br><span class="line">    map2d.set_obstacle(x, y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果展示"><a href="#运行结果展示" class="headerlink" title="运行结果展示"></a>运行结果展示</h2><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/image-20240319230213276.png" alt="image-20240319230213276"></p><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/50x50result.png" alt="50x50result"></p><h3 id="在100-x-100地图下运行"><a href="#在100-x-100地图下运行" class="headerlink" title="在100 x 100地图下运行"></a>在100 x 100地图下运行</h3><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/image-20240319230328817.png" alt="image-20240319230328817"></p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/100x100result.png" alt="100x100result" style="zoom:50%;" /><h3 id="在150-x-150地图下运行"><a href="#在150-x-150地图下运行" class="headerlink" title="在150 x 150地图下运行"></a>在150 x 150地图下运行</h3><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/image-20240319230339514.png" alt="image-20240319230339514"></p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/150x150result.png" alt="150x150result" style="zoom:50%;" /><h3 id="在200-x-200地图下运行"><a href="#在200-x-200地图下运行" class="headerlink" title="在200 x 200地图下运行"></a>在200 x 200地图下运行</h3><p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/image-20240319230349324.png" alt="image-20240319230349324"></p><img src="https://raw.githubusercontent.com/kashima19960/img/master/A_Star/200x200result.png" alt="200x200result" style="zoom: 33%;" /><h2 id="总结与分析"><a href="#总结与分析" class="headerlink" title="总结与分析"></a>总结与分析</h2><p>总体而言，A *算法在随机生成障碍物的情况下，由于其使用了启发函数，尽可能地减少了过程中不必要的搜索，所以无论是在50 x 50,100 x 100,150 x 150还是200 x 200的测试样例中均能在0.05s左右找到正确的最优路径，展现了A *算法的优越性。</p><h2 id="附录：完整代码"><a href="#附录：完整代码" class="headerlink" title="附录：完整代码"></a>附录：完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Point类是数学坐标系的一个抽象的点,和Node类不是一回事</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重载“==”运算符，(x1,y1)==(x2,y2)，当且仅当x1=x2，y1=y2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.x == other.x <span class="keyword">and</span> <span class="variable language_">self</span>.y == other.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Map2D</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, height, width</span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.height = height</span><br><span class="line">        <span class="variable language_">self</span>.width = width</span><br><span class="line">        <span class="comment">#width可以看成二维地图的行，height可以看成二维地图的列</span></span><br><span class="line">        <span class="variable language_">self</span>.data = [[<span class="string">&quot;⬜&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(width)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(height)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将地图数据用文本导出</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self, file_name=<span class="string">&quot;output.txt&quot;</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="variable language_">self</span>.data:</span><br><span class="line">              file.write(<span class="string">&quot; &quot;</span>.join(row) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将地图数据用图片导出</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_image</span>(<span class="params">self, file_name=<span class="string">&quot;map.png&quot;</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        cell_size = <span class="number">10</span></span><br><span class="line">        image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="variable language_">self</span>.width * cell_size, <span class="variable language_">self</span>.height * cell_size), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">        draw = ImageDraw.Draw(image)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.height):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.width):</span><br><span class="line">                color = <span class="string">&quot;white&quot;</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;⬛&quot;</span>:</span><br><span class="line">                    color = <span class="string">&quot;black&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;🟥&quot;</span>:</span><br><span class="line">                    color = <span class="string">&quot;red&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="variable language_">self</span>.data[x][y] == <span class="string">&quot;🟩&quot;</span>:</span><br><span class="line">                    color = <span class="string">&quot;green&quot;</span></span><br><span class="line">                draw.rectangle([(y * cell_size, x * cell_size), ((y + <span class="number">1</span>) * cell_size, (x + <span class="number">1</span>) * cell_size)], fill=color)</span><br><span class="line">        image.save(file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#当地图点为⬛，则为障碍物</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_obstacle</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data[x][y] = <span class="string">&quot;⬛&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置起点和终点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_start_end</span>(<span class="params">self, start: Point, end: Point</span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.data[start.x][start.y] = <span class="string">&quot;🟥&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.data[end.x][end.y] = <span class="string">&quot;🟥&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">obstacle_generate</span>(<span class="params">self, ratio:<span class="built_in">int</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 随机放置障碍物</span></span><br><span class="line">        obstacle_cells = <span class="built_in">int</span>((<span class="variable language_">self</span>.height * <span class="variable language_">self</span>.width) * ratio)  <span class="comment"># 障碍物占据40%的格子</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(obstacle_cells):</span><br><span class="line">            x = random.randint(<span class="number">0</span>, map2d.height - <span class="number">1</span>)</span><br><span class="line">            y = random.randint(<span class="number">0</span>, map2d.width - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> (x == start_point.x <span class="keyword">and</span> y == start_point.y) <span class="keyword">or</span> (x == end_point.x <span class="keyword">and</span> y == end_point.y) <span class="keyword">or</span> map2d.data[x][y] == <span class="string">&quot;⬛&quot;</span>:</span><br><span class="line">                x = random.randint(<span class="number">0</span>, map2d.height - <span class="number">1</span>)</span><br><span class="line">                y = random.randint(<span class="number">0</span>, map2d.width - <span class="number">1</span>)</span><br><span class="line">            map2d.set_obstacle(x, y)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.ud指的是up and down</span></span><br><span class="line"><span class="string">2.rl指的是right and left</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, point: Point, endpoint: Point, g: <span class="built_in">float</span></span>):<span class="comment"># 初始化中间节点的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.point = point</span><br><span class="line">        <span class="variable language_">self</span>.endpoint = endpoint</span><br><span class="line">        <span class="variable language_">self</span>.father = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.g = g</span><br><span class="line">        <span class="comment">#h取曼哈顿距离，c=|x2-x1|+|y2-y1|</span></span><br><span class="line">        <span class="variable language_">self</span>.h = (<span class="built_in">abs</span>(endpoint.x - point.x) + <span class="built_in">abs</span>(endpoint.y - point.y)) * <span class="number">10</span></span><br><span class="line">        <span class="variable language_">self</span>.f = <span class="variable language_">self</span>.g + <span class="variable language_">self</span>.h</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_near</span>(<span class="params">self, ud, rl</span>):<span class="comment">#获取相邻节点</span></span><br><span class="line">        near_point = Point(<span class="variable language_">self</span>.point.x + rl, <span class="variable language_">self</span>.point.y + ud)</span><br><span class="line">        near_node = Node(near_point, <span class="variable language_">self</span>.endpoint, <span class="variable language_">self</span>.g + (<span class="number">10</span> <span class="keyword">if</span> ud == <span class="number">0</span> <span class="keyword">or</span> rl == <span class="number">0</span> <span class="keyword">else</span> <span class="number">14</span>))</span><br><span class="line">        <span class="keyword">return</span> near_node</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AStar</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start: Point, end: Point, map2d: Map2D</span>):<span class="comment">#初始化A*算法的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.path = []</span><br><span class="line">        <span class="variable language_">self</span>.closed_list = []</span><br><span class="line">        <span class="variable language_">self</span>.open_list = []</span><br><span class="line">        <span class="variable language_">self</span>.start = start</span><br><span class="line">        <span class="variable language_">self</span>.end = end</span><br><span class="line">        <span class="variable language_">self</span>.map2d = map2d</span><br><span class="line"></span><br><span class="line">    <span class="comment">#从open_list里面找到一个代价最小的节点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_current</span>(<span class="params">self</span>)-&gt;Node:</span><br><span class="line">        min_f = sys.maxsize</span><br><span class="line">        node_temp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list:</span><br><span class="line">            <span class="keyword">if</span> node.f &lt; min_f:</span><br><span class="line">                min_f = node.f</span><br><span class="line">                node_temp = node</span><br><span class="line">        <span class="keyword">return</span> node_temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_in_open_list</span>(<span class="params">self, node:Node</span>)-&gt;<span class="built_in">bool</span>:<span class="comment"># 判断节点是否在待检测队列中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">any</span>([open_node.point == node.point <span class="keyword">for</span> open_node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_in_closed_list</span>(<span class="params">self, node:Node</span>)-&gt;<span class="built_in">bool</span>:<span class="comment"># 判断节点是否在已检测队列中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">any</span>([closed_node.point == node.point <span class="keyword">for</span> closed_node <span class="keyword">in</span> <span class="variable language_">self</span>.closed_list])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_obstacle</span>(<span class="params">self, node:Node</span>)-&gt;<span class="built_in">bool</span>:<span class="comment"># 判断节点是否是障碍物</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.map2d.data[node.point.x][node.point.y] == <span class="string">&quot;⬛&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这个函数是A*算法的核心函数，找到当前节点代价最小的邻点</span></span><br><span class="line"><span class="string">用list来当作是队列的数据结构，存放探测过或者未被探测的节点，以此来进行路径探索</span></span><br><span class="line"><span class="string">在路径探索中节点有三种状态</span></span><br><span class="line"><span class="string">状态1.加入了队列并且已经检测了，这个单独用一个Close_list队列存放</span></span><br><span class="line"><span class="string">状态2.加入了队列但是还没有检测，这个用Open_list队列存放</span></span><br><span class="line"><span class="string">状态3.还没有被加入队列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">explore_neighbors</span>(<span class="params">self, current_node:Node</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        up=(<span class="number">0</span>,<span class="number">1</span>)<span class="comment">#上</span></span><br><span class="line">        down=(<span class="number">0</span>,-<span class="number">1</span>)<span class="comment">#下</span></span><br><span class="line">        right=(<span class="number">1</span>,<span class="number">0</span>)<span class="comment">#右</span></span><br><span class="line">        left=(-<span class="number">1</span>,<span class="number">0</span>)<span class="comment">#左</span></span><br><span class="line">        top_right=(<span class="number">1</span>,<span class="number">1</span>)<span class="comment">#右上</span></span><br><span class="line">        top_left=(-<span class="number">1</span>,<span class="number">1</span>)<span class="comment">#左上</span></span><br><span class="line">        Bottom_right=(<span class="number">1</span>,-<span class="number">1</span>)<span class="comment">#右下</span></span><br><span class="line">        Bottom_left=(-<span class="number">1</span>,-<span class="number">1</span>)<span class="comment">#左下</span></span><br><span class="line">        directions = [up,down,right,left,top_right,top_left,Bottom_right,Bottom_left]</span><br><span class="line">        <span class="keyword">for</span> direction <span class="keyword">in</span> directions:</span><br><span class="line">            ud, rl = direction</span><br><span class="line">            <span class="comment">#current_neighbor是当前节点的邻点</span></span><br><span class="line">            current_neighbor = current_node.get_near(ud, rl)</span><br><span class="line">            <span class="comment">#如果检测到的节点是终点，就没必要接着往下探索了，直接退出循环，结束这个函数</span></span><br><span class="line">            <span class="keyword">if</span> current_neighbor.point == <span class="variable language_">self</span>.end:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment">#判断一下邻点是不是已经检测或者是障碍物，如果是，就跳过这个邻点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_in_closed_list(current_neighbor) <span class="keyword">or</span> <span class="variable language_">self</span>.is_obstacle(current_neighbor):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_in_open_list(current_neighbor):</span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                作用:在open_list中找到第一个与current_neighbor相同(坐标相同)的节点</span></span><br><span class="line"><span class="string">                这里有两个值得注意的点</span></span><br><span class="line"><span class="string">                1.在open_list中,可能有多个与current_neighbor相同(坐标相同)的节点，</span></span><br><span class="line"><span class="string">                出现这种情况是因为同一个节点，是可以通过多条不同的路径抵达的(意思就是g值不同)</span></span><br><span class="line"><span class="string">                比如说节点C是当前节点,点A与节点B都能抵达节点C且g值都相同,那么节点C此时在open_list就会被添加两次</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2.previous_current_neighbor是取的在open_list中与current_neighbor相同(坐标相同)的节点中</span></span><br><span class="line"><span class="string">                他们唯一的区别就是g值不同但因为有多个匹配,因此这里用next函数只取一次即可</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                previous_current_neighbor = <span class="built_in">next</span>(open_node <span class="keyword">for</span> open_node <span class="keyword">in</span> <span class="variable language_">self</span>.open_list <span class="keyword">if</span> open_node.point == current_neighbor.point)</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                这时就要比较current_neighbor与previous_current_neighbor的代价了,</span></span><br><span class="line"><span class="string">                假如我在本次的路径探索到的current_neighbor要比我之前的路径探索到的previous_current_neighbor的代价要小</span></span><br><span class="line"><span class="string">                (这里时刻注意,current_neighbor与previous_current_neighbor是坐标相同的),那么我就要更新previous_current_neighbor的代价</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                <span class="keyword">if</span> current_neighbor.f &lt; previous_current_neighbor.f:</span><br><span class="line">                    <span class="comment">#更新父节点</span></span><br><span class="line">                    previous_current_neighbor.father = current_node</span><br><span class="line">                    <span class="comment">#更新g值</span></span><br><span class="line">                    previous_current_neighbor.g = current_neighbor.g</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#对应状态3，直接入队</span></span><br><span class="line">                current_neighbor.father = current_node</span><br><span class="line">                <span class="variable language_">self</span>.open_list.append(current_neighbor)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">self</span>):</span><br><span class="line">        start_node = Node(point=<span class="variable language_">self</span>.start, endpoint=<span class="variable language_">self</span>.end, g=<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_list.append(start_node)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment">#从open_list里面取出一个代价值最小节点</span></span><br><span class="line">            current_node = <span class="variable language_">self</span>.select_current()</span><br><span class="line">            <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment">#取出来后，从open_list里面删除，添加到closed_list里面</span></span><br><span class="line">            <span class="variable language_">self</span>.open_list.remove(current_node)</span><br><span class="line">            <span class="variable language_">self</span>.closed_list.append(current_node)</span><br><span class="line">            <span class="comment">#当current_node是终点时，explore_neighbors函数会返回一个True</span></span><br><span class="line">            <span class="keyword">if</span> current_node.point == <span class="variable language_">self</span>.end <span class="keyword">or</span> <span class="variable language_">self</span>.explore_neighbors(current_node):</span><br><span class="line">                <span class="keyword">while</span> current_node.father <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.path.insert(<span class="number">0</span>, current_node.point)</span><br><span class="line">                    <span class="comment">#这里其实就是相当于遍历一个链表</span></span><br><span class="line">                    current_node = current_node.father</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建地图</span></span><br><span class="line">    map2d = Map2D(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 设置起点和终点</span></span><br><span class="line">    start_point = Point(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    end_point = Point(<span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line">    map2d.set_start_end(start_point, end_point)</span><br><span class="line">    map2d.obstacle_generate(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 运行A*算法</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    a_star = AStar(start_point, end_point, map2d)</span><br><span class="line">    path = a_star.find_path()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找到最佳路径：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> path:</span><br><span class="line">            map2d.data[point.x][point.y] = <span class="string">&quot;🟩&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到路径！&quot;</span>)</span><br><span class="line">    map2d.export_image(<span class="string">&quot;result.png&quot;</span>)</span><br><span class="line">    <span class="comment"># 打印运行时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序运行时间：&quot;</span>, end_time - start_time, <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
